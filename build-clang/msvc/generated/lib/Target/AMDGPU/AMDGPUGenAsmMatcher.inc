/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Matcher Source Fragment                                           *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_ASSEMBLER_HEADER
#undef GET_ASSEMBLER_HEADER
  // This should be included into the middle of the declaration of
  // your subclasses implementation of MCTargetAsmParser.
  uint64_t ComputeAvailableFeatures(const FeatureBitset& FB) const;
  void convertToMCInst(unsigned Kind, MCInst &Inst, unsigned Opcode,
                       const OperandVector &Operands);
  void convertToMapAndConstraints(unsigned Kind,
                           const OperandVector &Operands) override;
  bool mnemonicIsValid(StringRef Mnemonic, unsigned VariantID) override;
  unsigned MatchInstructionImpl(const OperandVector &Operands,
                                MCInst &Inst,
                                uint64_t &ErrorInfo, bool matchingInlineAsm,
                                unsigned VariantID = 0);

  enum OperandMatchResultTy {
    MatchOperand_Success,    // operand matched successfully
    MatchOperand_NoMatch,    // operand did not match
    MatchOperand_ParseFail   // operand matched but had errors
  };
  OperandMatchResultTy MatchOperandParserImpl(
    OperandVector &Operands,
    StringRef Mnemonic);
  OperandMatchResultTy tryCustomParseOperand(
    OperandVector &Operands,
    unsigned MCK);

#endif // GET_ASSEMBLER_HEADER_INFO


#ifdef GET_OPERAND_DIAGNOSTIC_TYPES
#undef GET_OPERAND_DIAGNOSTIC_TYPES

#endif // GET_OPERAND_DIAGNOSTIC_TYPES


#ifdef GET_REGISTER_MATCHER
#undef GET_REGISTER_MATCHER

// Flags for subtarget features that participate in instruction matching.
enum SubtargetFeatureFlag : uint8_t {
  Feature_isSICI = (1ULL << 4),
  Feature_isCIOnly = (1ULL << 1),
  Feature_isVI = (1ULL << 5),
  Feature_DisableInst = (1ULL << 0),
  Feature_isGCN = (1ULL << 3),
  Feature_isCIVI = (1ULL << 2),
  Feature_None = 0
};

#endif // GET_REGISTER_MATCHER


#ifdef GET_SUBTARGET_FEATURE_NAME
#undef GET_SUBTARGET_FEATURE_NAME

// User-level names for subtarget features that participate in
// instruction matching.
static const char *getSubtargetFeatureName(uint64_t Val) {
  switch(Val) {
  case Feature_isSICI: return "";
  case Feature_isCIOnly: return "";
  case Feature_isVI: return "";
  case Feature_DisableInst: return "";
  case Feature_isGCN: return "";
  case Feature_isCIVI: return "";
  default: return "(unknown)";
  }
}

#endif // GET_SUBTARGET_FEATURE_NAME


#ifdef GET_MATCHER_IMPLEMENTATION
#undef GET_MATCHER_IMPLEMENTATION

static void applyMnemonicAliases(StringRef &Mnemonic, uint64_t Features, unsigned VariantID) {
  switch (VariantID) {
    case 0:
      switch (Mnemonic.size()) {
      default: break;
      case 9:	 // 3 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'a':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+3, "dd_u32", 6))
            break;
          if ((Features & Feature_isGCN) == Feature_isGCN)	 // "v_add_u32"
            Mnemonic = "v_add_i32";
          return;
        case 'n':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+3, "op_e32", 6))
            break;
          Mnemonic = "v_nop";	 // "v_nop_e32"
          return;
        case 's':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+3, "ub_u32", 6))
            break;
          if ((Features & Feature_isGCN) == Feature_isGCN)	 // "v_sub_u32"
            Mnemonic = "v_sub_i32";
          return;
        }
        break;
      case 12:	 // 3 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'o':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "r_b32_e", 7))
            break;
          switch (Mnemonic[10]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[11] != '2')
              break;
            Mnemonic = "v_or_b32";	 // "v_or_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[11] != '4')
              break;
            Mnemonic = "v_or_b32";	 // "v_or_b32_e64"
            return;
          }
          break;
        case 's':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+3, "ubrev_u32", 9))
            break;
          if ((Features & Feature_isGCN) == Feature_isGCN)	 // "v_subrev_u32"
            Mnemonic = "v_subrev_i32";
          return;
        }
        break;
      case 13:	 // 98 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'a':	 // 11 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'd':	 // 9 strings to match.
            if (memcmp(Mnemonic.data()+4, "d_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'f':	 // 5 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_add_f16";	 // "v_add_f16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_add_f16";	 // "v_add_f16_e64"
                  return;
                }
                break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_add_f32";	 // "v_add_f32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_add_f32";	 // "v_add_f32_e64"
                  return;
                }
                break;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+8, "4_e64", 5))
                  break;
                Mnemonic = "v_add_f64";	 // "v_add_f64_e64"
                return;
              }
              break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "32_e", 4))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_add_i32";	 // "v_add_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_add_i32";	 // "v_add_i32_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "16_e", 4))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_add_u16";	 // "v_add_u16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_add_u16";	 // "v_add_u16_e64"
                return;
              }
              break;
            }
            break;
          case 'n':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "d_b32_e", 7))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_and_b32";	 // "v_and_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_and_b32";	 // "v_and_b32_e64"
              return;
            }
            break;
          }
          break;
        case 'b':	 // 5 strings to match.
          if (Mnemonic[3] != 'f')
            break;
          switch (Mnemonic[4]) {
          default: break;
          case 'e':	 // 2 strings to match.
            if (Mnemonic[5] != '_')
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'i':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+7, "32_e64", 6))
                break;
              Mnemonic = "v_bfe_i32";	 // "v_bfe_i32_e64"
              return;
            case 'u':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+7, "32_e64", 6))
                break;
              Mnemonic = "v_bfe_u32";	 // "v_bfe_u32_e64"
              return;
            }
            break;
          case 'i':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+5, "_b32_e64", 8))
              break;
            Mnemonic = "v_bfi_b32";	 // "v_bfi_b32_e64"
            return;
          case 'm':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+5, "_b32_e", 6))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_bfm_b32";	 // "v_bfm_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_bfm_b32";	 // "v_bfm_b32_e64"
              return;
            }
            break;
          }
          break;
        case 'c':	 // 5 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'l':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+4, "rexcp_e32", 9))
              break;
            Mnemonic = "v_clrexcp";	 // "v_clrexcp_e32"
            return;
          case 'o':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+4, "s_f", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_cos_f16";	 // "v_cos_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_cos_f16";	 // "v_cos_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_cos_f32";	 // "v_cos_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_cos_f32";	 // "v_cos_f32_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'e':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+3, "xp_f", 4))
            break;
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_exp_f16";	 // "v_exp_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_exp_f16";	 // "v_exp_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_exp_f32";	 // "v_exp_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_exp_f32";	 // "v_exp_f32_e64"
              return;
            }
            break;
          }
          break;
        case 'f':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "ma_f", 4))
            break;
          switch (Mnemonic[7]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "2_e64", 5))
              break;
            Mnemonic = "v_fma_f32";	 // "v_fma_f32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "4_e64", 5))
              break;
            Mnemonic = "v_fma_f64";	 // "v_fma_f64_e64"
            return;
          }
          break;
        case 'l':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+3, "og_f", 4))
            break;
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_log_f16";	 // "v_log_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_log_f16";	 // "v_log_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_log_f32";	 // "v_log_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_log_f32";	 // "v_log_f32_e64"
              return;
            }
            break;
          }
          break;
        case 'm':	 // 38 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'a':	 // 18 strings to match.
            switch (Mnemonic[4]) {
            default: break;
            case 'c':	 // 4 strings to match.
              if (memcmp(Mnemonic.data()+5, "_f", 2))
                break;
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_mac_f16";	 // "v_mac_f16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_mac_f16";	 // "v_mac_f16_e64"
                  return;
                }
                break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_mac_f32";	 // "v_mac_f32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_mac_f32";	 // "v_mac_f32_e64"
                  return;
                }
                break;
              }
              break;
            case 'd':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+5, "_f32_e64", 8))
                break;
              Mnemonic = "v_mad_f32";	 // "v_mad_f32_e64"
              return;
            case 'x':	 // 13 strings to match.
              if (Mnemonic[5] != '_')
                break;
              switch (Mnemonic[6]) {
              default: break;
              case 'f':	 // 5 strings to match.
                switch (Mnemonic[7]) {
                default: break;
                case '1':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "6_e", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[12] != '2')
                      break;
                    Mnemonic = "v_max_f16";	 // "v_max_f16_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[12] != '4')
                      break;
                    Mnemonic = "v_max_f16";	 // "v_max_f16_e64"
                    return;
                  }
                  break;
                case '3':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "2_e", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[12] != '2')
                      break;
                    Mnemonic = "v_max_f32";	 // "v_max_f32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[12] != '4')
                      break;
                    Mnemonic = "v_max_f32";	 // "v_max_f32_e64"
                    return;
                  }
                  break;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+8, "4_e64", 5))
                    break;
                  Mnemonic = "v_max_f64";	 // "v_max_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 4 strings to match.
                switch (Mnemonic[7]) {
                default: break;
                case '1':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "6_e", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[12] != '2')
                      break;
                    Mnemonic = "v_max_i16";	 // "v_max_i16_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[12] != '4')
                      break;
                    Mnemonic = "v_max_i16";	 // "v_max_i16_e64"
                    return;
                  }
                  break;
                case '3':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "2_e", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[12] != '2')
                      break;
                    Mnemonic = "v_max_i32";	 // "v_max_i32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[12] != '4')
                      break;
                    Mnemonic = "v_max_i32";	 // "v_max_i32_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'u':	 // 4 strings to match.
                switch (Mnemonic[7]) {
                default: break;
                case '1':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "6_e", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[12] != '2')
                      break;
                    Mnemonic = "v_max_u16";	 // "v_max_u16_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[12] != '4')
                      break;
                    Mnemonic = "v_max_u16";	 // "v_max_u16_e64"
                    return;
                  }
                  break;
                case '3':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "2_e", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[12] != '2')
                      break;
                    Mnemonic = "v_max_u32";	 // "v_max_u32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[12] != '4')
                      break;
                    Mnemonic = "v_max_u32";	 // "v_max_u32_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            }
            break;
          case 'i':	 // 13 strings to match.
            if (memcmp(Mnemonic.data()+4, "n_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'f':	 // 5 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_min_f16";	 // "v_min_f16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_min_f16";	 // "v_min_f16_e64"
                  return;
                }
                break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_min_f32";	 // "v_min_f32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_min_f32";	 // "v_min_f32_e64"
                  return;
                }
                break;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+8, "4_e64", 5))
                  break;
                Mnemonic = "v_min_f64";	 // "v_min_f64_e64"
                return;
              }
              break;
            case 'i':	 // 4 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_min_i16";	 // "v_min_i16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_min_i16";	 // "v_min_i16_e64"
                  return;
                }
                break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_min_i32";	 // "v_min_i32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_min_i32";	 // "v_min_i32_e64"
                  return;
                }
                break;
              }
              break;
            case 'u':	 // 4 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_min_u16";	 // "v_min_u16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_min_u16";	 // "v_min_u16_e64"
                  return;
                }
                break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_min_u32";	 // "v_min_u32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_min_u32";	 // "v_min_u32_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'o':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "v_b32_e", 7))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_mov_b32";	 // "v_mov_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_mov_b32";	 // "v_mov_b32_e64"
              return;
            }
            break;
          case 'u':	 // 5 strings to match.
            if (memcmp(Mnemonic.data()+4, "l_f", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_mul_f16";	 // "v_mul_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_mul_f16";	 // "v_mul_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_mul_f32";	 // "v_mul_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_mul_f32";	 // "v_mul_f32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "4_e64", 5))
                break;
              Mnemonic = "v_mul_f64";	 // "v_mul_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'n':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "ot_b32_e", 8))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_not_b32";	 // "v_not_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_not_b32";	 // "v_not_b32_e64"
            return;
          }
          break;
        case 'r':	 // 12 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'c':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+4, "p_f", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_rcp_f16";	 // "v_rcp_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_rcp_f16";	 // "v_rcp_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_rcp_f32";	 // "v_rcp_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_rcp_f32";	 // "v_rcp_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "4_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_rcp_f64";	 // "v_rcp_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_rcp_f64";	 // "v_rcp_f64_e64"
                return;
              }
              break;
            }
            break;
          case 's':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+4, "q_f", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_rsq_f16";	 // "v_rsq_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_rsq_f16";	 // "v_rsq_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_rsq_f32";	 // "v_rsq_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_rsq_f32";	 // "v_rsq_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "4_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_rsq_f64";	 // "v_rsq_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_rsq_f64";	 // "v_rsq_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 's':	 // 13 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'a':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+4, "d_u32_e64", 9))
              break;
            Mnemonic = "v_sad_u32";	 // "v_sad_u32_e64"
            return;
          case 'i':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+4, "n_f", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_sin_f16";	 // "v_sin_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_sin_f16";	 // "v_sin_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_sin_f32";	 // "v_sin_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_sin_f32";	 // "v_sin_f32_e64"
                return;
              }
              break;
            }
            break;
          case 'u':	 // 8 strings to match.
            if (memcmp(Mnemonic.data()+4, "b_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'f':	 // 4 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_sub_f16";	 // "v_sub_f16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_sub_f16";	 // "v_sub_f16_e64"
                  return;
                }
                break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_sub_f32";	 // "v_sub_f32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_sub_f32";	 // "v_sub_f32_e64"
                  return;
                }
                break;
              }
              break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "32_e", 4))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_sub_i32";	 // "v_sub_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_sub_i32";	 // "v_sub_i32_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "16_e", 4))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_sub_u16";	 // "v_sub_u16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_sub_u16";	 // "v_sub_u16_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'x':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "or_b32_e", 8))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_xor_b32";	 // "v_xor_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_xor_b32";	 // "v_xor_b32_e64"
            return;
          }
          break;
        }
        break;
      case 14:	 // 40 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'a':	 // 5 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'd':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "dc_u32_e", 8))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[13] != '2')
                break;
              Mnemonic = "v_addc_u32";	 // "v_addc_u32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[13] != '4')
                break;
              Mnemonic = "v_addc_u32";	 // "v_addc_u32_e64"
              return;
            }
            break;
          case 's':	 // 3 strings to match.
            if (memcmp(Mnemonic.data()+4, "hr_i", 4))
              break;
            switch (Mnemonic[8]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "2_e", 3))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_ashr_i32";	 // "v_ashr_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_ashr_i32";	 // "v_ashr_i32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+9, "4_e64", 5))
                break;
              Mnemonic = "v_ashr_i64";	 // "v_ashr_i64_e64"
              return;
            }
            break;
          }
          break;
        case 'c':	 // 6 strings to match.
          if (memcmp(Mnemonic.data()+3, "eil_f", 5))
            break;
          switch (Mnemonic[8]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+9, "6_e", 3))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[13] != '2')
                break;
              Mnemonic = "v_ceil_f16";	 // "v_ceil_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[13] != '4')
                break;
              Mnemonic = "v_ceil_f16";	 // "v_ceil_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+9, "2_e", 3))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[13] != '2')
                break;
              Mnemonic = "v_ceil_f32";	 // "v_ceil_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[13] != '4')
                break;
              Mnemonic = "v_ceil_f32";	 // "v_ceil_f32_e64"
              return;
            }
            break;
          case '6':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+9, "4_e", 3))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[13] != '2')
                break;
              Mnemonic = "v_ceil_f64";	 // "v_ceil_f64_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[13] != '4')
                break;
              Mnemonic = "v_ceil_f64";	 // "v_ceil_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'f':	 // 6 strings to match.
          if (memcmp(Mnemonic.data()+3, "fb", 2))
            break;
          switch (Mnemonic[5]) {
          default: break;
          case 'h':	 // 4 strings to match.
            if (Mnemonic[6] != '_')
              break;
            switch (Mnemonic[7]) {
            default: break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "32_e", 4))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_ffbh_i32";	 // "v_ffbh_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_ffbh_i32";	 // "v_ffbh_i32_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "32_e", 4))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_ffbh_u32";	 // "v_ffbh_u32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_ffbh_u32";	 // "v_ffbh_u32_e64"
                return;
              }
              break;
            }
            break;
          case 'l':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+6, "_b32_e", 6))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[13] != '2')
                break;
              Mnemonic = "v_ffbl_b32";	 // "v_ffbl_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[13] != '4')
                break;
              Mnemonic = "v_ffbl_b32";	 // "v_ffbl_b32_e64"
              return;
            }
            break;
          }
          break;
        case 'l':	 // 6 strings to match.
          if (memcmp(Mnemonic.data()+3, "sh", 2))
            break;
          switch (Mnemonic[5]) {
          default: break;
          case 'l':	 // 3 strings to match.
            if (memcmp(Mnemonic.data()+6, "_b", 2))
              break;
            switch (Mnemonic[8]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "2_e", 3))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_lshl_b32";	 // "v_lshl_b32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_lshl_b32";	 // "v_lshl_b32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+9, "4_e64", 5))
                break;
              Mnemonic = "v_lshl_b64";	 // "v_lshl_b64_e64"
              return;
            }
            break;
          case 'r':	 // 3 strings to match.
            if (memcmp(Mnemonic.data()+6, "_b", 2))
              break;
            switch (Mnemonic[8]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "2_e", 3))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_lshr_b32";	 // "v_lshr_b32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_lshr_b32";	 // "v_lshr_b32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+9, "4_e64", 5))
                break;
              Mnemonic = "v_lshr_b64";	 // "v_lshr_b64_e64"
              return;
            }
            break;
          }
          break;
        case 'm':	 // 9 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'a':	 // 3 strings to match.
            if (memcmp(Mnemonic.data()+4, "x3_", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case 'f':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_max3_f32";	 // "v_max3_f32_e64"
              return;
            case 'i':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_max3_i32";	 // "v_max3_i32_e64"
              return;
            case 'u':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_max3_u32";	 // "v_max3_u32_e64"
              return;
            }
            break;
          case 'e':	 // 3 strings to match.
            if (memcmp(Mnemonic.data()+4, "d3_", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case 'f':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_med3_f32";	 // "v_med3_f32_e64"
              return;
            case 'i':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_med3_i32";	 // "v_med3_i32_e64"
              return;
            case 'u':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_med3_u32";	 // "v_med3_u32_e64"
              return;
            }
            break;
          case 'i':	 // 3 strings to match.
            if (memcmp(Mnemonic.data()+4, "n3_", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case 'f':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_min3_f32";	 // "v_min3_f32_e64"
              return;
            case 'i':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_min3_i32";	 // "v_min3_i32_e64"
              return;
            case 'u':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_min3_u32";	 // "v_min3_u32_e64"
              return;
            }
            break;
          }
          break;
        case 's':	 // 8 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'q':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+4, "rt_f", 4))
              break;
            switch (Mnemonic[8]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "6_e", 3))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_sqrt_f16";	 // "v_sqrt_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_sqrt_f16";	 // "v_sqrt_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "2_e", 3))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_sqrt_f32";	 // "v_sqrt_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_sqrt_f32";	 // "v_sqrt_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "4_e", 3))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_sqrt_f64";	 // "v_sqrt_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_sqrt_f64";	 // "v_sqrt_f64_e64"
                return;
              }
              break;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "bb_u32_e", 8))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[13] != '2')
                break;
              Mnemonic = "v_subb_u32";	 // "v_subb_u32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[13] != '4')
                break;
              Mnemonic = "v_subb_u32";	 // "v_subb_u32_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 15:	 // 49 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'b':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "frev_b32_e", 10))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[14] != '2')
              break;
            Mnemonic = "v_bfrev_b32";	 // "v_bfrev_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[14] != '4')
              break;
            Mnemonic = "v_bfrev_b32";	 // "v_bfrev_b32_e64"
            return;
          }
          break;
        case 'c':	 // 14 strings to match.
          if (memcmp(Mnemonic.data()+3, "mp_", 3))
            break;
          switch (Mnemonic[6]) {
          default: break;
          case 'f':	 // 6 strings to match.
            if (Mnemonic[7] != '_')
              break;
            switch (Mnemonic[8]) {
            default: break;
            case 'f':	 // 2 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_f_f32";	 // "v_cmp_f_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_f_f64";	 // "v_cmp_f_f64_e64"
                return;
              }
              break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_f_i32";	 // "v_cmp_f_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_f_i64";	 // "v_cmp_f_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_f_u32";	 // "v_cmp_f_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_f_u64";	 // "v_cmp_f_u64_e64"
                return;
              }
              break;
            }
            break;
          case 'o':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+7, "_f", 2))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "2_e64", 5))
                break;
              Mnemonic = "v_cmp_o_f32";	 // "v_cmp_o_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "4_e64", 5))
                break;
              Mnemonic = "v_cmp_o_f64";	 // "v_cmp_o_f64_e64"
              return;
            }
            break;
          case 't':	 // 4 strings to match.
            if (Mnemonic[7] != '_')
              break;
            switch (Mnemonic[8]) {
            default: break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_t_i32";	 // "v_cmp_t_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_t_i64";	 // "v_cmp_t_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_t_u32";	 // "v_cmp_t_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_t_u64";	 // "v_cmp_t_u64_e64"
                return;
              }
              break;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+7, "_f", 2))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "2_e64", 5))
                break;
              Mnemonic = "v_cmp_u_f32";	 // "v_cmp_u_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "4_e64", 5))
                break;
              Mnemonic = "v_cmp_u_f64";	 // "v_cmp_u_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'f':	 // 12 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'l':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+4, "oor_f", 5))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "6_e", 3))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[14] != '2')
                  break;
                Mnemonic = "v_floor_f16";	 // "v_floor_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[14] != '4')
                  break;
                Mnemonic = "v_floor_f16";	 // "v_floor_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "2_e", 3))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[14] != '2')
                  break;
                Mnemonic = "v_floor_f32";	 // "v_floor_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[14] != '4')
                  break;
                Mnemonic = "v_floor_f32";	 // "v_floor_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "4_e", 3))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[14] != '2')
                  break;
                Mnemonic = "v_floor_f64";	 // "v_floor_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[14] != '4')
                  break;
                Mnemonic = "v_floor_f64";	 // "v_floor_f64_e64"
                return;
              }
              break;
            }
            break;
          case 'r':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+4, "act_f", 5))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "6_e", 3))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[14] != '2')
                  break;
                Mnemonic = "v_fract_f16";	 // "v_fract_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[14] != '4')
                  break;
                Mnemonic = "v_fract_f16";	 // "v_fract_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "2_e", 3))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[14] != '2')
                  break;
                Mnemonic = "v_fract_f32";	 // "v_fract_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[14] != '4')
                  break;
                Mnemonic = "v_fract_f32";	 // "v_fract_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "4_e", 3))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[14] != '2')
                  break;
                Mnemonic = "v_fract_f64";	 // "v_fract_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[14] != '4')
                  break;
                Mnemonic = "v_fract_f64";	 // "v_fract_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'l':	 // 5 strings to match.
          if (memcmp(Mnemonic.data()+3, "dexp_f", 6))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "6_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_ldexp_f16";	 // "v_ldexp_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_ldexp_f16";	 // "v_ldexp_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "2_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_ldexp_f32";	 // "v_ldexp_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_ldexp_f32";	 // "v_ldexp_f32_e64"
              return;
            }
            break;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "4_e64", 5))
              break;
            Mnemonic = "v_ldexp_f64";	 // "v_ldexp_f64_e64"
            return;
          }
          break;
        case 'm':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+3, "ad", 2))
            break;
          switch (Mnemonic[5]) {
          default: break;
          case 'a':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+6, "k_f", 3))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case '1':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "6_e32", 5))
                break;
              Mnemonic = "v_madak_f16";	 // "v_madak_f16_e32"
              return;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "2_e32", 5))
                break;
              Mnemonic = "v_madak_f32";	 // "v_madak_f32_e32"
              return;
            }
            break;
          case 'm':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+6, "k_f", 3))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case '1':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "6_e32", 5))
                break;
              Mnemonic = "v_madmk_f16";	 // "v_madmk_f16_e32"
              return;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "2_e32", 5))
                break;
              Mnemonic = "v_madmk_f32";	 // "v_madmk_f32_e32"
              return;
            }
            break;
          }
          break;
        case 'r':	 // 6 strings to match.
          if (memcmp(Mnemonic.data()+3, "ndne_f", 6))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "6_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_rndne_f16";	 // "v_rndne_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_rndne_f16";	 // "v_rndne_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "2_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_rndne_f32";	 // "v_rndne_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_rndne_f32";	 // "v_rndne_f32_e64"
              return;
            }
            break;
          case '6':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "4_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_rndne_f64";	 // "v_rndne_f64_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_rndne_f64";	 // "v_rndne_f64_e64"
              return;
            }
            break;
          }
          break;
        case 't':	 // 6 strings to match.
          if (memcmp(Mnemonic.data()+3, "runc_f", 6))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "6_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_trunc_f16";	 // "v_trunc_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_trunc_f16";	 // "v_trunc_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "2_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_trunc_f32";	 // "v_trunc_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_trunc_f32";	 // "v_trunc_f32_e64"
              return;
            }
            break;
          case '6':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "4_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_trunc_f64";	 // "v_trunc_f64_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_trunc_f64";	 // "v_trunc_f64_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 16:	 // 75 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'c':	 // 60 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'm':	 // 56 strings to match.
            if (Mnemonic[4] != 'p')
              break;
            switch (Mnemonic[5]) {
            default: break;
            case '_':	 // 36 strings to match.
              switch (Mnemonic[6]) {
              default: break;
              case 'e':	 // 6 strings to match.
                if (memcmp(Mnemonic.data()+7, "q_", 2))
                  break;
                switch (Mnemonic[9]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmp_eq_f32";	 // "v_cmp_eq_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmp_eq_f64";	 // "v_cmp_eq_f64_e64"
                    return;
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmp_eq_i32";	 // "v_cmp_eq_i32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmp_eq_i64";	 // "v_cmp_eq_i64_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmp_eq_u32";	 // "v_cmp_eq_u32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmp_eq_u64";	 // "v_cmp_eq_u64_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'g':	 // 12 strings to match.
                switch (Mnemonic[7]) {
                default: break;
                case 'e':	 // 6 strings to match.
                  if (Mnemonic[8] != '_')
                    break;
                  switch (Mnemonic[9]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ge_f32";	 // "v_cmp_ge_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ge_f64";	 // "v_cmp_ge_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ge_i32";	 // "v_cmp_ge_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ge_i64";	 // "v_cmp_ge_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ge_u32";	 // "v_cmp_ge_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ge_u64";	 // "v_cmp_ge_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 't':	 // 6 strings to match.
                  if (Mnemonic[8] != '_')
                    break;
                  switch (Mnemonic[9]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_gt_f32";	 // "v_cmp_gt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_gt_f64";	 // "v_cmp_gt_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_gt_i32";	 // "v_cmp_gt_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_gt_i64";	 // "v_cmp_gt_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_gt_u32";	 // "v_cmp_gt_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_gt_u64";	 // "v_cmp_gt_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                }
                break;
              case 'l':	 // 14 strings to match.
                switch (Mnemonic[7]) {
                default: break;
                case 'e':	 // 6 strings to match.
                  if (Mnemonic[8] != '_')
                    break;
                  switch (Mnemonic[9]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_le_f32";	 // "v_cmp_le_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_le_f64";	 // "v_cmp_le_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_le_i32";	 // "v_cmp_le_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_le_i64";	 // "v_cmp_le_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_le_u32";	 // "v_cmp_le_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_le_u64";	 // "v_cmp_le_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 'g':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "_f", 2))
                    break;
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmp_lg_f32";	 // "v_cmp_lg_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmp_lg_f64";	 // "v_cmp_lg_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 6 strings to match.
                  if (Mnemonic[8] != '_')
                    break;
                  switch (Mnemonic[9]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_lt_f32";	 // "v_cmp_lt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_lt_f64";	 // "v_cmp_lt_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_lt_i32";	 // "v_cmp_lt_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_lt_i64";	 // "v_cmp_lt_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_lt_u32";	 // "v_cmp_lt_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_lt_u64";	 // "v_cmp_lt_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                }
                break;
              case 'n':	 // 4 strings to match.
                if (memcmp(Mnemonic.data()+7, "e_", 2))
                  break;
                switch (Mnemonic[9]) {
                default: break;
                case 'i':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmp_ne_i32";	 // "v_cmp_ne_i32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmp_ne_i64";	 // "v_cmp_ne_i64_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmp_ne_u32";	 // "v_cmp_ne_u32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmp_ne_u64";	 // "v_cmp_ne_u64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            case 's':	 // 6 strings to match.
              if (Mnemonic[6] != '_')
                break;
              switch (Mnemonic[7]) {
              default: break;
              case 'f':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "_f", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_f_f32";	 // "v_cmps_f_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_f_f64";	 // "v_cmps_f_f64_e64"
                  return;
                }
                break;
              case 'o':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "_f", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_o_f32";	 // "v_cmps_o_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_o_f64";	 // "v_cmps_o_f64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "_f", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_u_f32";	 // "v_cmps_u_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_u_f64";	 // "v_cmps_u_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 'x':	 // 14 strings to match.
              if (Mnemonic[6] != '_')
                break;
              switch (Mnemonic[7]) {
              default: break;
              case 'f':	 // 6 strings to match.
                if (Mnemonic[8] != '_')
                  break;
                switch (Mnemonic[9]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_f_f32";	 // "v_cmpx_f_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_f_f64";	 // "v_cmpx_f_f64_e64"
                    return;
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_f_i32";	 // "v_cmpx_f_i32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_f_i64";	 // "v_cmpx_f_i64_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_f_u32";	 // "v_cmpx_f_u32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_f_u64";	 // "v_cmpx_f_u64_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'o':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "_f", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_o_f32";	 // "v_cmpx_o_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_o_f64";	 // "v_cmpx_o_f64_e64"
                  return;
                }
                break;
              case 't':	 // 4 strings to match.
                if (Mnemonic[8] != '_')
                  break;
                switch (Mnemonic[9]) {
                default: break;
                case 'i':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_t_i32";	 // "v_cmpx_t_i32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_t_i64";	 // "v_cmpx_t_i64_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_t_u32";	 // "v_cmpx_t_u32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_t_u64";	 // "v_cmpx_t_u64_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'u':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "_f", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_u_f32";	 // "v_cmpx_u_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_u_f64";	 // "v_cmpx_u_f64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'u':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+4, "be", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'i':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+7, "d_f32_e64", 9))
                break;
              Mnemonic = "v_cubeid_f32";	 // "v_cubeid_f32_e64"
              return;
            case 'm':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+7, "a_f32_e64", 9))
                break;
              Mnemonic = "v_cubema_f32";	 // "v_cubema_f32_e64"
              return;
            case 's':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+7, "c_f32_e64", 9))
                break;
              Mnemonic = "v_cubesc_f32";	 // "v_cubesc_f32_e64"
              return;
            case 't':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+7, "c_f32_e64", 9))
                break;
              Mnemonic = "v_cubetc_f32";	 // "v_cubetc_f32_e64"
              return;
            }
            break;
          }
          break;
        case 'm':	 // 7 strings to match.
          if (memcmp(Mnemonic.data()+3, "ul", 2))
            break;
          switch (Mnemonic[5]) {
          default: break;
          case '_':	 // 6 strings to match.
            switch (Mnemonic[6]) {
            default: break;
            case 'h':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "i_", 2))
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'i':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "32_e64", 6))
                  break;
                Mnemonic = "v_mul_hi_i32";	 // "v_mul_hi_i32_e64"
                return;
              case 'u':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "32_e64", 6))
                  break;
                Mnemonic = "v_mul_hi_u32";	 // "v_mul_hi_u32_e64"
                return;
              }
              break;
            case 'l':	 // 4 strings to match.
              if (memcmp(Mnemonic.data()+7, "o_", 2))
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'i':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "32_e64", 6))
                  break;
                Mnemonic = "v_mul_lo_i32";	 // "v_mul_lo_i32_e64"
                return;
              case 'u':	 // 3 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '1':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "6_e", 3))
                    break;
                  switch (Mnemonic[14]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[15] != '2')
                      break;
                    Mnemonic = "v_mul_lo_u16";	 // "v_mul_lo_u16_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[15] != '4')
                      break;
                    Mnemonic = "v_mul_lo_u16";	 // "v_mul_lo_u16_e64"
                    return;
                  }
                  break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_mul_lo_u32";	 // "v_mul_lo_u32_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'l':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+6, "it_f32_e64", 10))
              break;
            Mnemonic = "v_mullit_f32";	 // "v_mullit_f32_e64"
            return;
          }
          break;
        case 's':	 // 8 strings to match.
          if (memcmp(Mnemonic.data()+3, "ubrev_", 6))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case 'f':	 // 4 strings to match.
            switch (Mnemonic[10]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "6_e", 3))
                break;
              switch (Mnemonic[14]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[15] != '2')
                  break;
                Mnemonic = "v_subrev_f16";	 // "v_subrev_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[15] != '4')
                  break;
                Mnemonic = "v_subrev_f16";	 // "v_subrev_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "2_e", 3))
                break;
              switch (Mnemonic[14]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[15] != '2')
                  break;
                Mnemonic = "v_subrev_f32";	 // "v_subrev_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[15] != '4')
                  break;
                Mnemonic = "v_subrev_f32";	 // "v_subrev_f32_e64"
                return;
              }
              break;
            }
            break;
          case 'i':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "32_e", 4))
              break;
            switch (Mnemonic[14]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[15] != '2')
                break;
              Mnemonic = "v_subrev_i32";	 // "v_subrev_i32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[15] != '4')
                break;
              Mnemonic = "v_subrev_i32";	 // "v_subrev_i32_e64"
              return;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "16_e", 4))
              break;
            switch (Mnemonic[14]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[15] != '2')
                break;
              Mnemonic = "v_subrev_u16";	 // "v_subrev_u16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[15] != '4')
                break;
              Mnemonic = "v_subrev_u16";	 // "v_subrev_u16_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 17:	 // 133 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'a':	 // 5 strings to match.
          if (memcmp(Mnemonic.data()+3, "shrrev_", 7))
            break;
          switch (Mnemonic[10]) {
          default: break;
          case 'b':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+11, "16_e", 4))
              break;
            switch (Mnemonic[15]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[16] != '2')
                break;
              Mnemonic = "v_ashrrev_b16";	 // "v_ashrrev_b16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[16] != '4')
                break;
              Mnemonic = "v_ashrrev_b16";	 // "v_ashrrev_b16_e64"
              return;
            }
            break;
          case 'i':	 // 3 strings to match.
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "2_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_ashrrev_i32";	 // "v_ashrrev_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_ashrrev_i32";	 // "v_ashrrev_i32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                break;
              Mnemonic = "v_ashrrev_i64";	 // "v_ashrrev_i64_e64"
              return;
            }
            break;
          }
          break;
        case 'c':	 // 102 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'm':	 // 68 strings to match.
            if (Mnemonic[4] != 'p')
              break;
            switch (Mnemonic[5]) {
            default: break;
            case '_':	 // 14 strings to match.
              switch (Mnemonic[6]) {
              default: break;
              case 'n':	 // 12 strings to match.
                switch (Mnemonic[7]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "q_f", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmp_neq_f32";	 // "v_cmp_neq_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmp_neq_f64";	 // "v_cmp_neq_f64_e64"
                    return;
                  }
                  break;
                case 'g':	 // 4 strings to match.
                  switch (Mnemonic[8]) {
                  default: break;
                  case 'e':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nge_f32";	 // "v_cmp_nge_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nge_f64";	 // "v_cmp_nge_f64_e64"
                      return;
                    }
                    break;
                  case 't':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ngt_f32";	 // "v_cmp_ngt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ngt_f64";	 // "v_cmp_ngt_f64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 'l':	 // 6 strings to match.
                  switch (Mnemonic[8]) {
                  default: break;
                  case 'e':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nle_f32";	 // "v_cmp_nle_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nle_f64";	 // "v_cmp_nle_f64_e64"
                      return;
                    }
                    break;
                  case 'g':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nlg_f32";	 // "v_cmp_nlg_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nlg_f64";	 // "v_cmp_nlg_f64_e64"
                      return;
                    }
                    break;
                  case 't':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nlt_f32";	 // "v_cmp_nlt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nlt_f64";	 // "v_cmp_nlt_f64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+7, "ru_f", 4))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_tru_f32";	 // "v_cmp_tru_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_tru_f64";	 // "v_cmp_tru_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 's':	 // 18 strings to match.
              switch (Mnemonic[6]) {
              default: break;
              case '_':	 // 12 strings to match.
                switch (Mnemonic[7]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "q_f", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmps_eq_f32";	 // "v_cmps_eq_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmps_eq_f64";	 // "v_cmps_eq_f64_e64"
                    return;
                  }
                  break;
                case 'g':	 // 4 strings to match.
                  switch (Mnemonic[8]) {
                  default: break;
                  case 'e':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_ge_f32";	 // "v_cmps_ge_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_ge_f64";	 // "v_cmps_ge_f64_e64"
                      return;
                    }
                    break;
                  case 't':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_gt_f32";	 // "v_cmps_gt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_gt_f64";	 // "v_cmps_gt_f64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 'l':	 // 6 strings to match.
                  switch (Mnemonic[8]) {
                  default: break;
                  case 'e':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_le_f32";	 // "v_cmps_le_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_le_f64";	 // "v_cmps_le_f64_e64"
                      return;
                    }
                    break;
                  case 'g':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_lg_f32";	 // "v_cmps_lg_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_lg_f64";	 // "v_cmps_lg_f64_e64"
                      return;
                    }
                    break;
                  case 't':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_lt_f32";	 // "v_cmps_lt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_lt_f64";	 // "v_cmps_lt_f64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                }
                break;
              case 'x':	 // 6 strings to match.
                if (Mnemonic[7] != '_')
                  break;
                switch (Mnemonic[8]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+9, "_f", 2))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_f_f32";	 // "v_cmpsx_f_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_f_f64";	 // "v_cmpsx_f_f64_e64"
                    return;
                  }
                  break;
                case 'o':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+9, "_f", 2))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_o_f32";	 // "v_cmpsx_o_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_o_f64";	 // "v_cmpsx_o_f64_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+9, "_f", 2))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_u_f32";	 // "v_cmpsx_u_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_u_f64";	 // "v_cmpsx_u_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            case 'x':	 // 36 strings to match.
              if (Mnemonic[6] != '_')
                break;
              switch (Mnemonic[7]) {
              default: break;
              case 'e':	 // 6 strings to match.
                if (memcmp(Mnemonic.data()+8, "q_", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_eq_f32";	 // "v_cmpx_eq_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_eq_f64";	 // "v_cmpx_eq_f64_e64"
                    return;
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_eq_i32";	 // "v_cmpx_eq_i32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_eq_i64";	 // "v_cmpx_eq_i64_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_eq_u32";	 // "v_cmpx_eq_u32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_eq_u64";	 // "v_cmpx_eq_u64_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'g':	 // 12 strings to match.
                switch (Mnemonic[8]) {
                default: break;
                case 'e':	 // 6 strings to match.
                  if (Mnemonic[9] != '_')
                    break;
                  switch (Mnemonic[10]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_ge_f32";	 // "v_cmpx_ge_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_ge_f64";	 // "v_cmpx_ge_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_ge_i32";	 // "v_cmpx_ge_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_ge_i64";	 // "v_cmpx_ge_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_ge_u32";	 // "v_cmpx_ge_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_ge_u64";	 // "v_cmpx_ge_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 't':	 // 6 strings to match.
                  if (Mnemonic[9] != '_')
                    break;
                  switch (Mnemonic[10]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_gt_f32";	 // "v_cmpx_gt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_gt_f64";	 // "v_cmpx_gt_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_gt_i32";	 // "v_cmpx_gt_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_gt_i64";	 // "v_cmpx_gt_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_gt_u32";	 // "v_cmpx_gt_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_gt_u64";	 // "v_cmpx_gt_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                }
                break;
              case 'l':	 // 14 strings to match.
                switch (Mnemonic[8]) {
                default: break;
                case 'e':	 // 6 strings to match.
                  if (Mnemonic[9] != '_')
                    break;
                  switch (Mnemonic[10]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_le_f32";	 // "v_cmpx_le_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_le_f64";	 // "v_cmpx_le_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_le_i32";	 // "v_cmpx_le_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_le_i64";	 // "v_cmpx_le_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_le_u32";	 // "v_cmpx_le_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_le_u64";	 // "v_cmpx_le_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 'g':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+9, "_f", 2))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_lg_f32";	 // "v_cmpx_lg_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_lg_f64";	 // "v_cmpx_lg_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 6 strings to match.
                  if (Mnemonic[9] != '_')
                    break;
                  switch (Mnemonic[10]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_lt_f32";	 // "v_cmpx_lt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_lt_f64";	 // "v_cmpx_lt_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_lt_i32";	 // "v_cmpx_lt_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_lt_i64";	 // "v_cmpx_lt_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_lt_u32";	 // "v_cmpx_lt_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_lt_u64";	 // "v_cmpx_lt_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                }
                break;
              case 'n':	 // 4 strings to match.
                if (memcmp(Mnemonic.data()+8, "e_", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case 'i':	 // 2 strings to match.
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_ne_i32";	 // "v_cmpx_ne_i32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_ne_i64";	 // "v_cmpx_ne_i64_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_ne_u32";	 // "v_cmpx_ne_u32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_ne_u64";	 // "v_cmpx_ne_u64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            }
            break;
          case 'n':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "dmask_b32_e", 11))
              break;
            switch (Mnemonic[15]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[16] != '2')
                break;
              Mnemonic = "v_cndmask_b32";	 // "v_cndmask_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[16] != '4')
                break;
              Mnemonic = "v_cndmask_b32";	 // "v_cndmask_b32_e64"
              return;
            }
            break;
          case 'v':	 // 32 strings to match.
            if (memcmp(Mnemonic.data()+4, "t_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'f':	 // 20 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 6 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "32_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f16_f32";	 // "v_cvt_f16_f32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f16_f32";	 // "v_cvt_f16_f32_e64"
                    return;
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "16_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f16_i16";	 // "v_cvt_f16_i16_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f16_i16";	 // "v_cvt_f16_i16_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "16_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f16_u16";	 // "v_cvt_f16_u16_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f16_u16";	 // "v_cvt_f16_u16_e64"
                    return;
                  }
                  break;
                }
                break;
              case '3':	 // 8 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case 'f':	 // 4 strings to match.
                  switch (Mnemonic[11]) {
                  default: break;
                  case '1':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+12, "6_e", 3))
                      break;
                    switch (Mnemonic[15]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (Mnemonic[16] != '2')
                        break;
                      Mnemonic = "v_cvt_f32_f16";	 // "v_cvt_f32_f16_e32"
                      return;
                    case '6':	 // 1 string to match.
                      if (Mnemonic[16] != '4')
                        break;
                      Mnemonic = "v_cvt_f32_f16";	 // "v_cvt_f32_f16_e64"
                      return;
                    }
                    break;
                  case '6':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+12, "4_e", 3))
                      break;
                    switch (Mnemonic[15]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (Mnemonic[16] != '2')
                        break;
                      Mnemonic = "v_cvt_f32_f64";	 // "v_cvt_f32_f64_e32"
                      return;
                    case '6':	 // 1 string to match.
                      if (Mnemonic[16] != '4')
                        break;
                      Mnemonic = "v_cvt_f32_f64";	 // "v_cvt_f32_f64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "32_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f32_i32";	 // "v_cvt_f32_i32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f32_i32";	 // "v_cvt_f32_i32_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "32_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f32_u32";	 // "v_cvt_f32_u32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f32_u32";	 // "v_cvt_f32_u32_e64"
                    return;
                  }
                  break;
                }
                break;
              case '6':	 // 6 strings to match.
                if (memcmp(Mnemonic.data()+8, "4_", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "32_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f64_f32";	 // "v_cvt_f64_f32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f64_f32";	 // "v_cvt_f64_f32_e64"
                    return;
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "32_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f64_i32";	 // "v_cvt_f64_i32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f64_i32";	 // "v_cvt_f64_i32_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "32_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f64_u32";	 // "v_cvt_f64_u32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f64_u32";	 // "v_cvt_f64_u32_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            case 'i':	 // 6 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_f16_e", 7))
                  break;
                switch (Mnemonic[15]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[16] != '2')
                    break;
                  Mnemonic = "v_cvt_i16_f16";	 // "v_cvt_i16_f16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[16] != '4')
                    break;
                  Mnemonic = "v_cvt_i16_f16";	 // "v_cvt_i16_f16_e64"
                  return;
                }
                break;
              case '3':	 // 4 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_f", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+12, "2_e", 3))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_i32_f32";	 // "v_cvt_i32_f32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_i32_f32";	 // "v_cvt_i32_f32_e64"
                    return;
                  }
                  break;
                case '6':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+12, "4_e", 3))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_i32_f64";	 // "v_cvt_i32_f64_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_i32_f64";	 // "v_cvt_i32_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            case 'u':	 // 6 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_f16_e", 7))
                  break;
                switch (Mnemonic[15]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[16] != '2')
                    break;
                  Mnemonic = "v_cvt_u16_f16";	 // "v_cvt_u16_f16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[16] != '4')
                    break;
                  Mnemonic = "v_cvt_u16_f16";	 // "v_cvt_u16_f16_e64"
                  return;
                }
                break;
              case '3':	 // 4 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_f", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+12, "2_e", 3))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_u32_f32";	 // "v_cvt_u32_f32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_u32_f32";	 // "v_cvt_u32_f32_e64"
                    return;
                  }
                  break;
                case '6':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+12, "4_e", 3))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_u32_f64";	 // "v_cvt_u32_f64_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_u32_f64";	 // "v_cvt_u32_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 'l':	 // 10 strings to match.
          if (memcmp(Mnemonic.data()+3, "sh", 2))
            break;
          switch (Mnemonic[5]) {
          default: break;
          case 'l':	 // 5 strings to match.
            if (memcmp(Mnemonic.data()+6, "rev_b", 5))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "6_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_lshlrev_b16";	 // "v_lshlrev_b16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_lshlrev_b16";	 // "v_lshlrev_b16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "2_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_lshlrev_b32";	 // "v_lshlrev_b32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_lshlrev_b32";	 // "v_lshlrev_b32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                break;
              Mnemonic = "v_lshlrev_b64";	 // "v_lshlrev_b64_e64"
              return;
            }
            break;
          case 'r':	 // 5 strings to match.
            if (memcmp(Mnemonic.data()+6, "rev_b", 5))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "6_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_lshrrev_b16";	 // "v_lshrrev_b16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_lshrrev_b16";	 // "v_lshrrev_b16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "2_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_lshrrev_b32";	 // "v_lshrrev_b32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_lshrrev_b32";	 // "v_lshrrev_b32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                break;
              Mnemonic = "v_lshrrev_b64";	 // "v_lshrrev_b64_e64"
              return;
            }
            break;
          }
          break;
        case 'm':	 // 14 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'a':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+4, "d_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+8, "2_i24_e64", 9))
                  break;
                Mnemonic = "v_mad_i32_i24";	 // "v_mad_i32_i24_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+8, "4_i32_e64", 9))
                  break;
                Mnemonic = "v_mad_i64_i32";	 // "v_mad_i64_i32_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+8, "2_u24_e64", 9))
                  break;
                Mnemonic = "v_mad_u32_u24";	 // "v_mad_u32_u24_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+8, "4_u32_e64", 9))
                  break;
                Mnemonic = "v_mad_u64_u32";	 // "v_mad_u64_u32_e64"
                return;
              }
              break;
            }
            break;
          case 'o':	 // 6 strings to match.
            if (Mnemonic[4] != 'v')
              break;
            switch (Mnemonic[5]) {
            default: break;
            case '_':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+6, "fed_b32_e", 9))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_mov_fed_b32";	 // "v_mov_fed_b32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_mov_fed_b32";	 // "v_mov_fed_b32_e64"
                return;
              }
              break;
            case 'r':	 // 4 strings to match.
              if (memcmp(Mnemonic.data()+6, "el", 2))
                break;
              switch (Mnemonic[8]) {
              default: break;
              case 'd':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_b32_e", 6))
                  break;
                switch (Mnemonic[15]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[16] != '2')
                    break;
                  Mnemonic = "v_movreld_b32";	 // "v_movreld_b32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[16] != '4')
                    break;
                  Mnemonic = "v_movreld_b32";	 // "v_movreld_b32_e64"
                  return;
                }
                break;
              case 's':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_b32_e", 6))
                  break;
                switch (Mnemonic[15]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[16] != '2')
                    break;
                  Mnemonic = "v_movrels_b32";	 // "v_movrels_b32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[16] != '4')
                    break;
                  Mnemonic = "v_movrels_b32";	 // "v_movrels_b32_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'u':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+4, "l_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "32_i24_e", 8))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_mul_i32_i24";	 // "v_mul_i32_i24_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_mul_i32_i24";	 // "v_mul_i32_i24_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "32_u24_e", 8))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_mul_u32_u24";	 // "v_mul_u32_u24_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_mul_u32_u24";	 // "v_mul_u32_u24_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 's':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "ubbrev_u32_e", 12))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_subbrev_u32";	 // "v_subbrev_u32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_subbrev_u32";	 // "v_subbrev_u32_e64"
            return;
          }
          break;
        }
        break;
      case 18:	 // 49 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'a':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+3, "lignbit_b32_e64", 15))
            break;
          Mnemonic = "v_alignbit_b32";	 // "v_alignbit_b32_e64"
          return;
        case 'b':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "cnt_u32_b32_e", 13))
            break;
          switch (Mnemonic[16]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[17] != '2')
              break;
            Mnemonic = "v_bcnt_u32_b32";	 // "v_bcnt_u32_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[17] != '4')
              break;
            Mnemonic = "v_bcnt_u32_b32";	 // "v_bcnt_u32_b32_e64"
            return;
          }
          break;
        case 'c':	 // 40 strings to match.
          if (memcmp(Mnemonic.data()+3, "mp", 2))
            break;
          switch (Mnemonic[5]) {
          default: break;
          case 's':	 // 26 strings to match.
            switch (Mnemonic[6]) {
            default: break;
            case '_':	 // 14 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case 'n':	 // 12 strings to match.
                switch (Mnemonic[8]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+9, "q_f", 3))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmps_neq_f32";	 // "v_cmps_neq_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmps_neq_f64";	 // "v_cmps_neq_f64_e64"
                    return;
                  }
                  break;
                case 'g':	 // 4 strings to match.
                  switch (Mnemonic[9]) {
                  default: break;
                  case 'e':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+10, "_f", 2))
                      break;
                    switch (Mnemonic[12]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nge_f32";	 // "v_cmps_nge_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nge_f64";	 // "v_cmps_nge_f64_e64"
                      return;
                    }
                    break;
                  case 't':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+10, "_f", 2))
                      break;
                    switch (Mnemonic[12]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_ngt_f32";	 // "v_cmps_ngt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_ngt_f64";	 // "v_cmps_ngt_f64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 'l':	 // 6 strings to match.
                  switch (Mnemonic[9]) {
                  default: break;
                  case 'e':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+10, "_f", 2))
                      break;
                    switch (Mnemonic[12]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nle_f32";	 // "v_cmps_nle_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nle_f64";	 // "v_cmps_nle_f64_e64"
                      return;
                    }
                    break;
                  case 'g':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+10, "_f", 2))
                      break;
                    switch (Mnemonic[12]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nlg_f32";	 // "v_cmps_nlg_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nlg_f64";	 // "v_cmps_nlg_f64_e64"
                      return;
                    }
                    break;
                  case 't':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+10, "_f", 2))
                      break;
                    switch (Mnemonic[12]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nlt_f32";	 // "v_cmps_nlt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nlt_f64";	 // "v_cmps_nlt_f64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "ru_f", 4))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_tru_f32";	 // "v_cmps_tru_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_tru_f64";	 // "v_cmps_tru_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 'x':	 // 12 strings to match.
              if (Mnemonic[7] != '_')
                break;
              switch (Mnemonic[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "q_f", 3))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpsx_eq_f32";	 // "v_cmpsx_eq_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpsx_eq_f64";	 // "v_cmpsx_eq_f64_e64"
                  return;
                }
                break;
              case 'g':	 // 4 strings to match.
                switch (Mnemonic[9]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_ge_f32";	 // "v_cmpsx_ge_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_ge_f64";	 // "v_cmpsx_ge_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_gt_f32";	 // "v_cmpsx_gt_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_gt_f64";	 // "v_cmpsx_gt_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'l':	 // 6 strings to match.
                switch (Mnemonic[9]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_le_f32";	 // "v_cmpsx_le_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_le_f64";	 // "v_cmpsx_le_f64_e64"
                    return;
                  }
                  break;
                case 'g':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_lg_f32";	 // "v_cmpsx_lg_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_lg_f64";	 // "v_cmpsx_lg_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_lt_f32";	 // "v_cmpsx_lt_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_lt_f64";	 // "v_cmpsx_lt_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            }
            break;
          case 'x':	 // 14 strings to match.
            if (Mnemonic[6] != '_')
              break;
            switch (Mnemonic[7]) {
            default: break;
            case 'n':	 // 12 strings to match.
              switch (Mnemonic[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "q_f", 3))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_neq_f32";	 // "v_cmpx_neq_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_neq_f64";	 // "v_cmpx_neq_f64_e64"
                  return;
                }
                break;
              case 'g':	 // 4 strings to match.
                switch (Mnemonic[9]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nge_f32";	 // "v_cmpx_nge_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nge_f64";	 // "v_cmpx_nge_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_ngt_f32";	 // "v_cmpx_ngt_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_ngt_f64";	 // "v_cmpx_ngt_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'l':	 // 6 strings to match.
                switch (Mnemonic[9]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nle_f32";	 // "v_cmpx_nle_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nle_f64";	 // "v_cmpx_nle_f64_e64"
                    return;
                  }
                  break;
                case 'g':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nlg_f32";	 // "v_cmpx_nlg_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nlg_f64";	 // "v_cmpx_nlg_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nlt_f32";	 // "v_cmpx_nlt_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nlt_f64";	 // "v_cmpx_nlt_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "ru_f", 4))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_tru_f32";	 // "v_cmpx_tru_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_tru_f64";	 // "v_cmpx_tru_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'd':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "iv_fmas_f", 9))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+13, "2_e64", 5))
              break;
            Mnemonic = "v_div_fmas_f32";	 // "v_div_fmas_f32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+13, "4_e64", 5))
              break;
            Mnemonic = "v_div_fmas_f64";	 // "v_div_fmas_f64_e64"
            return;
          }
          break;
        case 'm':	 // 4 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'o':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "vrelsd_b32_e", 12))
              break;
            switch (Mnemonic[16]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[17] != '2')
                break;
              Mnemonic = "v_movrelsd_b32";	 // "v_movrelsd_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[17] != '4')
                break;
              Mnemonic = "v_movrelsd_b32";	 // "v_movrelsd_b32_e64"
              return;
            }
            break;
          case 'q':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "sad_u", 5))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case '1':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "6_u8_e64", 8))
                break;
              Mnemonic = "v_mqsad_u16_u8";	 // "v_mqsad_u16_u8_e64"
              return;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "2_u8_e64", 8))
                break;
              Mnemonic = "v_mqsad_u32_u8";	 // "v_mqsad_u32_u8_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 19:	 // 33 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'a':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+3, "lignbyte_b32_e64", 16))
            break;
          Mnemonic = "v_alignbyte_b32";	 // "v_alignbyte_b32_e64"
          return;
        case 'c':	 // 16 strings to match.
          if (memcmp(Mnemonic.data()+3, "mp", 2))
            break;
          switch (Mnemonic[5]) {
          default: break;
          case '_':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+6, "class_f", 7))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                break;
              Mnemonic = "v_cmp_class_f32";	 // "v_cmp_class_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                break;
              Mnemonic = "v_cmp_class_f64";	 // "v_cmp_class_f64_e64"
              return;
            }
            break;
          case 's':	 // 14 strings to match.
            if (memcmp(Mnemonic.data()+6, "x_", 2))
              break;
            switch (Mnemonic[8]) {
            default: break;
            case 'n':	 // 12 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "q_f", 3))
                  break;
                switch (Mnemonic[13]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpsx_neq_f32";	 // "v_cmpsx_neq_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpsx_neq_f64";	 // "v_cmpsx_neq_f64_e64"
                  return;
                }
                break;
              case 'g':	 // 4 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "_f", 2))
                    break;
                  switch (Mnemonic[13]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nge_f32";	 // "v_cmpsx_nge_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nge_f64";	 // "v_cmpsx_nge_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "_f", 2))
                    break;
                  switch (Mnemonic[13]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_ngt_f32";	 // "v_cmpsx_ngt_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_ngt_f64";	 // "v_cmpsx_ngt_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'l':	 // 6 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "_f", 2))
                    break;
                  switch (Mnemonic[13]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nle_f32";	 // "v_cmpsx_nle_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nle_f64";	 // "v_cmpsx_nle_f64_e64"
                    return;
                  }
                  break;
                case 'g':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "_f", 2))
                    break;
                  switch (Mnemonic[13]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nlg_f32";	 // "v_cmpsx_nlg_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nlg_f64";	 // "v_cmpsx_nlg_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "_f", 2))
                    break;
                  switch (Mnemonic[13]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nlt_f32";	 // "v_cmpsx_nlt_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nlt_f64";	 // "v_cmpsx_nlt_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "ru_f", 4))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_tru_f32";	 // "v_cmpsx_tru_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_tru_f64";	 // "v_cmpsx_tru_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'd':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+3, "iv_", 3))
            break;
          switch (Mnemonic[6]) {
          default: break;
          case 'f':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+7, "ixup_f", 6))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                break;
              Mnemonic = "v_div_fixup_f32";	 // "v_div_fixup_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                break;
              Mnemonic = "v_div_fixup_f64";	 // "v_div_fixup_f64_e64"
              return;
            }
            break;
          case 's':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+7, "cale_f", 6))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                break;
              Mnemonic = "v_div_scale_f32";	 // "v_div_scale_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                break;
              Mnemonic = "v_div_scale_f64";	 // "v_div_scale_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'l':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "og_clamp_f32_e", 14))
            break;
          switch (Mnemonic[17]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[18] != '2')
              break;
            Mnemonic = "v_log_clamp_f32";	 // "v_log_clamp_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[18] != '4')
              break;
            Mnemonic = "v_log_clamp_f32";	 // "v_log_clamp_f32_e64"
            return;
          }
          break;
        case 'r':	 // 10 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'c':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+4, "p_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'c':	 // 4 strings to match.
              if (memcmp(Mnemonic.data()+7, "lamp_f", 6))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+14, "2_e", 3))
                  break;
                switch (Mnemonic[17]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[18] != '2')
                    break;
                  Mnemonic = "v_rcp_clamp_f32";	 // "v_rcp_clamp_f32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[18] != '4')
                    break;
                  Mnemonic = "v_rcp_clamp_f32";	 // "v_rcp_clamp_f32_e64"
                  return;
                }
                break;
              case '6':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+14, "4_e", 3))
                  break;
                switch (Mnemonic[17]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[18] != '2')
                    break;
                  Mnemonic = "v_rcp_clamp_f64";	 // "v_rcp_clamp_f64_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[18] != '4')
                    break;
                  Mnemonic = "v_rcp_clamp_f64";	 // "v_rcp_clamp_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "flag_f32_e", 10))
                break;
              switch (Mnemonic[17]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[18] != '2')
                  break;
                Mnemonic = "v_rcp_iflag_f32";	 // "v_rcp_iflag_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[18] != '4')
                  break;
                Mnemonic = "v_rcp_iflag_f32";	 // "v_rcp_iflag_f32_e64"
                return;
              }
              break;
            }
            break;
          case 's':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+4, "q_clamp_f", 9))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+14, "2_e", 3))
                break;
              switch (Mnemonic[17]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[18] != '2')
                  break;
                Mnemonic = "v_rsq_clamp_f32";	 // "v_rsq_clamp_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[18] != '4')
                  break;
                Mnemonic = "v_rsq_clamp_f32";	 // "v_rsq_clamp_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+14, "4_e", 3))
                break;
              switch (Mnemonic[17]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[18] != '2')
                  break;
                Mnemonic = "v_rsq_clamp_f64";	 // "v_rsq_clamp_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[18] != '4')
                  break;
                Mnemonic = "v_rsq_clamp_f64";	 // "v_rsq_clamp_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 20:	 // 45 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'c':	 // 16 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'm':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "px_class_f", 10))
              break;
            switch (Mnemonic[14]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+15, "2_e64", 5))
                break;
              Mnemonic = "v_cmpx_class_f32";	 // "v_cmpx_class_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+15, "4_e64", 5))
                break;
              Mnemonic = "v_cmpx_class_f64";	 // "v_cmpx_class_f64_e64"
              return;
            }
            break;
          case 'v':	 // 14 strings to match.
            if (memcmp(Mnemonic.data()+4, "t_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'f':	 // 8 strings to match.
              if (memcmp(Mnemonic.data()+7, "32_ubyte", 8))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '0':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+16, "_e", 2))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte0";	 // "v_cvt_f32_ubyte0_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte0";	 // "v_cvt_f32_ubyte0_e64"
                  return;
                }
                break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+16, "_e", 2))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte1";	 // "v_cvt_f32_ubyte1_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte1";	 // "v_cvt_f32_ubyte1_e64"
                  return;
                }
                break;
              case '2':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+16, "_e", 2))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte2";	 // "v_cvt_f32_ubyte2_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte2";	 // "v_cvt_f32_ubyte2_e64"
                  return;
                }
                break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+16, "_e", 2))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte3";	 // "v_cvt_f32_ubyte3_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte3";	 // "v_cvt_f32_ubyte3_e64"
                  return;
                }
                break;
              }
              break;
            case 'o':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "ff_f32_i4_e", 11))
                break;
              switch (Mnemonic[18]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[19] != '2')
                  break;
                Mnemonic = "v_cvt_off_f32_i4";	 // "v_cvt_off_f32_i4_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[19] != '4')
                  break;
                Mnemonic = "v_cvt_off_f32_i4";	 // "v_cvt_off_f32_i4_e64"
                return;
              }
              break;
            case 'p':	 // 4 strings to match.
              if (memcmp(Mnemonic.data()+7, "k_", 2))
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'i':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "16_i32_e", 8))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_cvt_pk_i16_i32";	 // "v_cvt_pk_i16_i32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_cvt_pk_i16_i32";	 // "v_cvt_pk_i16_i32_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "16_u32_e", 8))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_cvt_pk_u16_u32";	 // "v_cvt_pk_u16_u32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_cvt_pk_u16_u32";	 // "v_cvt_pk_u16_u32_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 'e':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "xp_legacy_f32_e", 15))
            break;
          switch (Mnemonic[18]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[19] != '2')
              break;
            Mnemonic = "v_exp_legacy_f32";	 // "v_exp_legacy_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[19] != '4')
              break;
            Mnemonic = "v_exp_legacy_f32";	 // "v_exp_legacy_f32_e64"
            return;
          }
          break;
        case 'f':	 // 6 strings to match.
          if (memcmp(Mnemonic.data()+3, "rexp_mant_f", 11))
            break;
          switch (Mnemonic[14]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+15, "6_e", 3))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_frexp_mant_f16";	 // "v_frexp_mant_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_frexp_mant_f16";	 // "v_frexp_mant_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+15, "2_e", 3))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_frexp_mant_f32";	 // "v_frexp_mant_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_frexp_mant_f32";	 // "v_frexp_mant_f32_e64"
              return;
            }
            break;
          case '6':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+15, "4_e", 3))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_frexp_mant_f64";	 // "v_frexp_mant_f64_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_frexp_mant_f64";	 // "v_frexp_mant_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'l':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "og_legacy_f32_e", 15))
            break;
          switch (Mnemonic[18]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[19] != '2')
              break;
            Mnemonic = "v_log_legacy_f32";	 // "v_log_legacy_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[19] != '4')
              break;
            Mnemonic = "v_log_legacy_f32";	 // "v_log_legacy_f32_e64"
            return;
          }
          break;
        case 'm':	 // 13 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'a':	 // 5 strings to match.
            switch (Mnemonic[4]) {
            default: break;
            case 'c':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+5, "_legacy_f32_e", 13))
                break;
              switch (Mnemonic[18]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[19] != '2')
                  break;
                Mnemonic = "v_mac_legacy_f32";	 // "v_mac_legacy_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[19] != '4')
                  break;
                Mnemonic = "v_mac_legacy_f32";	 // "v_mac_legacy_f32_e64"
                return;
              }
              break;
            case 'd':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+5, "_legacy_f32_e64", 15))
                break;
              Mnemonic = "v_mad_legacy_f32";	 // "v_mad_legacy_f32_e64"
              return;
            case 'x':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+5, "_legacy_f32_e", 13))
                break;
              switch (Mnemonic[18]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[19] != '2')
                  break;
                Mnemonic = "v_max_legacy_f32";	 // "v_max_legacy_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[19] != '4')
                  break;
                Mnemonic = "v_max_legacy_f32";	 // "v_max_legacy_f32_e64"
                return;
              }
              break;
            }
            break;
          case 'i':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "n_legacy_f32_e", 14))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_min_legacy_f32";	 // "v_min_legacy_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_min_legacy_f32";	 // "v_min_legacy_f32_e64"
              return;
            }
            break;
          case 'u':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+4, "l_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'h':	 // 4 strings to match.
              if (memcmp(Mnemonic.data()+7, "i_", 2))
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'i':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "32_i24_e", 8))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_mul_hi_i32_i24";	 // "v_mul_hi_i32_i24_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_mul_hi_i32_i24";	 // "v_mul_hi_i32_i24_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "32_u24_e", 8))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_mul_hi_u32_u24";	 // "v_mul_hi_u32_u24_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_mul_hi_u32_u24";	 // "v_mul_hi_u32_u24_e64"
                  return;
                }
                break;
              }
              break;
            case 'l':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "egacy_f32_e", 11))
                break;
              switch (Mnemonic[18]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[19] != '2')
                  break;
                Mnemonic = "v_mul_legacy_f32";	 // "v_mul_legacy_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[19] != '4')
                  break;
                Mnemonic = "v_mul_legacy_f32";	 // "v_mul_legacy_f32_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'q':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+3, "sad_pk_u16_u8_e64", 17))
            break;
          Mnemonic = "v_qsad_pk_u16_u8";	 // "v_qsad_pk_u16_u8_e64"
          return;
        case 'r':	 // 4 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'c':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "p_legacy_f32_e", 14))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_rcp_legacy_f32";	 // "v_rcp_legacy_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_rcp_legacy_f32";	 // "v_rcp_legacy_f32_e64"
              return;
            }
            break;
          case 's':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "q_legacy_f32_e", 14))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_rsq_legacy_f32";	 // "v_rsq_legacy_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_rsq_legacy_f32";	 // "v_rsq_legacy_f32_e64"
              return;
            }
            break;
          }
          break;
        case 't':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+3, "rig_preop_f64_e64", 17))
            break;
          Mnemonic = "v_trig_preop_f64";	 // "v_trig_preop_f64_e64"
          return;
        }
        break;
      case 21:	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_cvt_", 6))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'f':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "lr_i32_f32_e", 12))
            break;
          switch (Mnemonic[19]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[20] != '2')
              break;
            Mnemonic = "v_cvt_flr_i32_f32";	 // "v_cvt_flr_i32_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[20] != '4')
              break;
            Mnemonic = "v_cvt_flr_i32_f32";	 // "v_cvt_flr_i32_f32_e64"
            return;
          }
          break;
        case 'r':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "pi_i32_f32_e", 12))
            break;
          switch (Mnemonic[19]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[20] != '2')
              break;
            Mnemonic = "v_cvt_rpi_i32_f32";	 // "v_cvt_rpi_i32_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[20] != '4')
              break;
            Mnemonic = "v_cvt_rpi_i32_f32";	 // "v_cvt_rpi_i32_f32_e64"
            return;
          }
          break;
        }
        break;
      case 22:	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_mbcnt_", 8))
          break;
        switch (Mnemonic[8]) {
        default: break;
        case 'h':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "i_u32_b32_e", 11))
            break;
          switch (Mnemonic[20]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[21] != '2')
              break;
            Mnemonic = "v_mbcnt_hi_u32_b32";	 // "v_mbcnt_hi_u32_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[21] != '4')
              break;
            Mnemonic = "v_mbcnt_hi_u32_b32";	 // "v_mbcnt_hi_u32_b32_e64"
            return;
          }
          break;
        case 'l':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "o_u32_b32_e", 11))
            break;
          switch (Mnemonic[20]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[21] != '2')
              break;
            Mnemonic = "v_mbcnt_lo_u32_b32";	 // "v_mbcnt_lo_u32_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[21] != '4')
              break;
            Mnemonic = "v_mbcnt_lo_u32_b32";	 // "v_mbcnt_lo_u32_b32_e64"
            return;
          }
          break;
        }
        break;
      case 23:	 // 8 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'c':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "vt_pkrtz_f16_f32_e", 18))
            break;
          switch (Mnemonic[21]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[22] != '2')
              break;
            Mnemonic = "v_cvt_pkrtz_f16_f32";	 // "v_cvt_pkrtz_f16_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[22] != '4')
              break;
            Mnemonic = "v_cvt_pkrtz_f16_f32";	 // "v_cvt_pkrtz_f16_f32_e64"
            return;
          }
          break;
        case 'f':	 // 6 strings to match.
          if (memcmp(Mnemonic.data()+3, "rexp_exp_i", 10))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+14, "6_f16_e", 7))
              break;
            switch (Mnemonic[21]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[22] != '2')
                break;
              Mnemonic = "v_frexp_exp_i16_f16";	 // "v_frexp_exp_i16_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[22] != '4')
                break;
              Mnemonic = "v_frexp_exp_i16_f16";	 // "v_frexp_exp_i16_f16_e64"
              return;
            }
            break;
          case '3':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+14, "2_f", 3))
              break;
            switch (Mnemonic[17]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+18, "2_e", 3))
                break;
              switch (Mnemonic[21]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[22] != '2')
                  break;
                Mnemonic = "v_frexp_exp_i32_f32";	 // "v_frexp_exp_i32_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[22] != '4')
                  break;
                Mnemonic = "v_frexp_exp_i32_f32";	 // "v_frexp_exp_i32_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+18, "4_e", 3))
                break;
              switch (Mnemonic[21]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[22] != '2')
                  break;
                Mnemonic = "v_frexp_exp_i32_f64";	 // "v_frexp_exp_i32_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[22] != '4')
                  break;
                Mnemonic = "v_frexp_exp_i32_f64";	 // "v_frexp_exp_i32_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 24:	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_cvt_pk", 8))
          break;
        switch (Mnemonic[8]) {
        default: break;
        case 'a':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "ccum_u8_f32_e", 13))
            break;
          switch (Mnemonic[22]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[23] != '2')
              break;
            Mnemonic = "v_cvt_pkaccum_u8_f32";	 // "v_cvt_pkaccum_u8_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[23] != '4')
              break;
            Mnemonic = "v_cvt_pkaccum_u8_f32";	 // "v_cvt_pkaccum_u8_f32_e64"
            return;
          }
          break;
        case 'n':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+9, "orm_", 4))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case 'i':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+14, "16_f32_e", 8))
              break;
            switch (Mnemonic[22]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[23] != '2')
                break;
              Mnemonic = "v_cvt_pknorm_i16_f32";	 // "v_cvt_pknorm_i16_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[23] != '4')
                break;
              Mnemonic = "v_cvt_pknorm_i16_f32";	 // "v_cvt_pknorm_i16_f32_e64"
              return;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+14, "16_f32_e", 8))
              break;
            switch (Mnemonic[22]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[23] != '2')
                break;
              Mnemonic = "v_cvt_pknorm_u16_f32";	 // "v_cvt_pknorm_u16_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[23] != '4')
                break;
              Mnemonic = "v_cvt_pknorm_u16_f32";	 // "v_cvt_pknorm_u16_f32_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      }
    break;
  }
  switch (Mnemonic.size()) {
  default: break;
  case 9:	 // 3 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'a':	 // 1 string to match.
      if (memcmp(Mnemonic.data()+3, "dd_u32", 6))
        break;
      if ((Features & Feature_isGCN) == Feature_isGCN)	 // "v_add_u32"
        Mnemonic = "v_add_i32";
      return;
    case 'n':	 // 1 string to match.
      if (memcmp(Mnemonic.data()+3, "op_e32", 6))
        break;
      Mnemonic = "v_nop";	 // "v_nop_e32"
      return;
    case 's':	 // 1 string to match.
      if (memcmp(Mnemonic.data()+3, "ub_u32", 6))
        break;
      if ((Features & Feature_isGCN) == Feature_isGCN)	 // "v_sub_u32"
        Mnemonic = "v_sub_i32";
      return;
    }
    break;
  case 12:	 // 3 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'o':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "r_b32_e", 7))
        break;
      switch (Mnemonic[10]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[11] != '2')
          break;
        Mnemonic = "v_or_b32";	 // "v_or_b32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[11] != '4')
          break;
        Mnemonic = "v_or_b32";	 // "v_or_b32_e64"
        return;
      }
      break;
    case 's':	 // 1 string to match.
      if (memcmp(Mnemonic.data()+3, "ubrev_u32", 9))
        break;
      if ((Features & Feature_isGCN) == Feature_isGCN)	 // "v_subrev_u32"
        Mnemonic = "v_subrev_i32";
      return;
    }
    break;
  case 13:	 // 98 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'a':	 // 11 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'd':	 // 9 strings to match.
        if (memcmp(Mnemonic.data()+4, "d_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'f':	 // 5 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_add_f16";	 // "v_add_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_add_f16";	 // "v_add_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_add_f32";	 // "v_add_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_add_f32";	 // "v_add_f32_e64"
              return;
            }
            break;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "4_e64", 5))
              break;
            Mnemonic = "v_add_f64";	 // "v_add_f64_e64"
            return;
          }
          break;
        case 'i':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "32_e", 4))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_add_i32";	 // "v_add_i32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_add_i32";	 // "v_add_i32_e64"
            return;
          }
          break;
        case 'u':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "16_e", 4))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_add_u16";	 // "v_add_u16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_add_u16";	 // "v_add_u16_e64"
            return;
          }
          break;
        }
        break;
      case 'n':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "d_b32_e", 7))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[12] != '2')
            break;
          Mnemonic = "v_and_b32";	 // "v_and_b32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[12] != '4')
            break;
          Mnemonic = "v_and_b32";	 // "v_and_b32_e64"
          return;
        }
        break;
      }
      break;
    case 'b':	 // 5 strings to match.
      if (Mnemonic[3] != 'f')
        break;
      switch (Mnemonic[4]) {
      default: break;
      case 'e':	 // 2 strings to match.
        if (Mnemonic[5] != '_')
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'i':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+7, "32_e64", 6))
            break;
          Mnemonic = "v_bfe_i32";	 // "v_bfe_i32_e64"
          return;
        case 'u':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+7, "32_e64", 6))
            break;
          Mnemonic = "v_bfe_u32";	 // "v_bfe_u32_e64"
          return;
        }
        break;
      case 'i':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+5, "_b32_e64", 8))
          break;
        Mnemonic = "v_bfi_b32";	 // "v_bfi_b32_e64"
        return;
      case 'm':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+5, "_b32_e", 6))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[12] != '2')
            break;
          Mnemonic = "v_bfm_b32";	 // "v_bfm_b32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[12] != '4')
            break;
          Mnemonic = "v_bfm_b32";	 // "v_bfm_b32_e64"
          return;
        }
        break;
      }
      break;
    case 'c':	 // 5 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'l':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+4, "rexcp_e32", 9))
          break;
        Mnemonic = "v_clrexcp";	 // "v_clrexcp_e32"
        return;
      case 'o':	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+4, "s_f", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "6_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_cos_f16";	 // "v_cos_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_cos_f16";	 // "v_cos_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "2_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_cos_f32";	 // "v_cos_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_cos_f32";	 // "v_cos_f32_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 'e':	 // 4 strings to match.
      if (memcmp(Mnemonic.data()+3, "xp_f", 4))
        break;
      switch (Mnemonic[7]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+8, "6_e", 3))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[12] != '2')
            break;
          Mnemonic = "v_exp_f16";	 // "v_exp_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[12] != '4')
            break;
          Mnemonic = "v_exp_f16";	 // "v_exp_f16_e64"
          return;
        }
        break;
      case '3':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+8, "2_e", 3))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[12] != '2')
            break;
          Mnemonic = "v_exp_f32";	 // "v_exp_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[12] != '4')
            break;
          Mnemonic = "v_exp_f32";	 // "v_exp_f32_e64"
          return;
        }
        break;
      }
      break;
    case 'f':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "ma_f", 4))
        break;
      switch (Mnemonic[7]) {
      default: break;
      case '3':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+8, "2_e64", 5))
          break;
        Mnemonic = "v_fma_f32";	 // "v_fma_f32_e64"
        return;
      case '6':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+8, "4_e64", 5))
          break;
        Mnemonic = "v_fma_f64";	 // "v_fma_f64_e64"
        return;
      }
      break;
    case 'l':	 // 4 strings to match.
      if (memcmp(Mnemonic.data()+3, "og_f", 4))
        break;
      switch (Mnemonic[7]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+8, "6_e", 3))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[12] != '2')
            break;
          Mnemonic = "v_log_f16";	 // "v_log_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[12] != '4')
            break;
          Mnemonic = "v_log_f16";	 // "v_log_f16_e64"
          return;
        }
        break;
      case '3':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+8, "2_e", 3))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[12] != '2')
            break;
          Mnemonic = "v_log_f32";	 // "v_log_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[12] != '4')
            break;
          Mnemonic = "v_log_f32";	 // "v_log_f32_e64"
          return;
        }
        break;
      }
      break;
    case 'm':	 // 38 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'a':	 // 18 strings to match.
        switch (Mnemonic[4]) {
        default: break;
        case 'c':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+5, "_f", 2))
            break;
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_mac_f16";	 // "v_mac_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_mac_f16";	 // "v_mac_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_mac_f32";	 // "v_mac_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_mac_f32";	 // "v_mac_f32_e64"
              return;
            }
            break;
          }
          break;
        case 'd':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+5, "_f32_e64", 8))
            break;
          Mnemonic = "v_mad_f32";	 // "v_mad_f32_e64"
          return;
        case 'x':	 // 13 strings to match.
          if (Mnemonic[5] != '_')
            break;
          switch (Mnemonic[6]) {
          default: break;
          case 'f':	 // 5 strings to match.
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_max_f16";	 // "v_max_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_max_f16";	 // "v_max_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_max_f32";	 // "v_max_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_max_f32";	 // "v_max_f32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "4_e64", 5))
                break;
              Mnemonic = "v_max_f64";	 // "v_max_f64_e64"
              return;
            }
            break;
          case 'i':	 // 4 strings to match.
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_max_i16";	 // "v_max_i16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_max_i16";	 // "v_max_i16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_max_i32";	 // "v_max_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_max_i32";	 // "v_max_i32_e64"
                return;
              }
              break;
            }
            break;
          case 'u':	 // 4 strings to match.
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_max_u16";	 // "v_max_u16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_max_u16";	 // "v_max_u16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_max_u32";	 // "v_max_u32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_max_u32";	 // "v_max_u32_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 'i':	 // 13 strings to match.
        if (memcmp(Mnemonic.data()+4, "n_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'f':	 // 5 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_min_f16";	 // "v_min_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_min_f16";	 // "v_min_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_min_f32";	 // "v_min_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_min_f32";	 // "v_min_f32_e64"
              return;
            }
            break;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "4_e64", 5))
              break;
            Mnemonic = "v_min_f64";	 // "v_min_f64_e64"
            return;
          }
          break;
        case 'i':	 // 4 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_min_i16";	 // "v_min_i16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_min_i16";	 // "v_min_i16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_min_i32";	 // "v_min_i32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_min_i32";	 // "v_min_i32_e64"
              return;
            }
            break;
          }
          break;
        case 'u':	 // 4 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_min_u16";	 // "v_min_u16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_min_u16";	 // "v_min_u16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_min_u32";	 // "v_min_u32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_min_u32";	 // "v_min_u32_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 'o':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "v_b32_e", 7))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[12] != '2')
            break;
          Mnemonic = "v_mov_b32";	 // "v_mov_b32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[12] != '4')
            break;
          Mnemonic = "v_mov_b32";	 // "v_mov_b32_e64"
          return;
        }
        break;
      case 'u':	 // 5 strings to match.
        if (memcmp(Mnemonic.data()+4, "l_f", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "6_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_mul_f16";	 // "v_mul_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_mul_f16";	 // "v_mul_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "2_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_mul_f32";	 // "v_mul_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_mul_f32";	 // "v_mul_f32_e64"
            return;
          }
          break;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "4_e64", 5))
            break;
          Mnemonic = "v_mul_f64";	 // "v_mul_f64_e64"
          return;
        }
        break;
      }
      break;
    case 'n':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "ot_b32_e", 8))
        break;
      switch (Mnemonic[11]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[12] != '2')
          break;
        Mnemonic = "v_not_b32";	 // "v_not_b32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[12] != '4')
          break;
        Mnemonic = "v_not_b32";	 // "v_not_b32_e64"
        return;
      }
      break;
    case 'r':	 // 12 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'c':	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+4, "p_f", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "6_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_rcp_f16";	 // "v_rcp_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_rcp_f16";	 // "v_rcp_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "2_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_rcp_f32";	 // "v_rcp_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_rcp_f32";	 // "v_rcp_f32_e64"
            return;
          }
          break;
        case '6':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "4_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_rcp_f64";	 // "v_rcp_f64_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_rcp_f64";	 // "v_rcp_f64_e64"
            return;
          }
          break;
        }
        break;
      case 's':	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+4, "q_f", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "6_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_rsq_f16";	 // "v_rsq_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_rsq_f16";	 // "v_rsq_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "2_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_rsq_f32";	 // "v_rsq_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_rsq_f32";	 // "v_rsq_f32_e64"
            return;
          }
          break;
        case '6':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "4_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_rsq_f64";	 // "v_rsq_f64_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_rsq_f64";	 // "v_rsq_f64_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 's':	 // 13 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'a':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+4, "d_u32_e64", 9))
          break;
        Mnemonic = "v_sad_u32";	 // "v_sad_u32_e64"
        return;
      case 'i':	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+4, "n_f", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "6_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_sin_f16";	 // "v_sin_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_sin_f16";	 // "v_sin_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "2_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_sin_f32";	 // "v_sin_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_sin_f32";	 // "v_sin_f32_e64"
            return;
          }
          break;
        }
        break;
      case 'u':	 // 8 strings to match.
        if (memcmp(Mnemonic.data()+4, "b_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'f':	 // 4 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_sub_f16";	 // "v_sub_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_sub_f16";	 // "v_sub_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_sub_f32";	 // "v_sub_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_sub_f32";	 // "v_sub_f32_e64"
              return;
            }
            break;
          }
          break;
        case 'i':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "32_e", 4))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_sub_i32";	 // "v_sub_i32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_sub_i32";	 // "v_sub_i32_e64"
            return;
          }
          break;
        case 'u':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "16_e", 4))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_sub_u16";	 // "v_sub_u16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_sub_u16";	 // "v_sub_u16_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 'x':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "or_b32_e", 8))
        break;
      switch (Mnemonic[11]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[12] != '2')
          break;
        Mnemonic = "v_xor_b32";	 // "v_xor_b32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[12] != '4')
          break;
        Mnemonic = "v_xor_b32";	 // "v_xor_b32_e64"
        return;
      }
      break;
    }
    break;
  case 14:	 // 40 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'a':	 // 5 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'd':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "dc_u32_e", 8))
          break;
        switch (Mnemonic[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[13] != '2')
            break;
          Mnemonic = "v_addc_u32";	 // "v_addc_u32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[13] != '4')
            break;
          Mnemonic = "v_addc_u32";	 // "v_addc_u32_e64"
          return;
        }
        break;
      case 's':	 // 3 strings to match.
        if (memcmp(Mnemonic.data()+4, "hr_i", 4))
          break;
        switch (Mnemonic[8]) {
        default: break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "2_e", 3))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_ashr_i32";	 // "v_ashr_i32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_ashr_i32";	 // "v_ashr_i32_e64"
            return;
          }
          break;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+9, "4_e64", 5))
            break;
          Mnemonic = "v_ashr_i64";	 // "v_ashr_i64_e64"
          return;
        }
        break;
      }
      break;
    case 'c':	 // 6 strings to match.
      if (memcmp(Mnemonic.data()+3, "eil_f", 5))
        break;
      switch (Mnemonic[8]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+9, "6_e", 3))
          break;
        switch (Mnemonic[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[13] != '2')
            break;
          Mnemonic = "v_ceil_f16";	 // "v_ceil_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[13] != '4')
            break;
          Mnemonic = "v_ceil_f16";	 // "v_ceil_f16_e64"
          return;
        }
        break;
      case '3':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+9, "2_e", 3))
          break;
        switch (Mnemonic[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[13] != '2')
            break;
          Mnemonic = "v_ceil_f32";	 // "v_ceil_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[13] != '4')
            break;
          Mnemonic = "v_ceil_f32";	 // "v_ceil_f32_e64"
          return;
        }
        break;
      case '6':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+9, "4_e", 3))
          break;
        switch (Mnemonic[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[13] != '2')
            break;
          Mnemonic = "v_ceil_f64";	 // "v_ceil_f64_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[13] != '4')
            break;
          Mnemonic = "v_ceil_f64";	 // "v_ceil_f64_e64"
          return;
        }
        break;
      }
      break;
    case 'f':	 // 6 strings to match.
      if (memcmp(Mnemonic.data()+3, "fb", 2))
        break;
      switch (Mnemonic[5]) {
      default: break;
      case 'h':	 // 4 strings to match.
        if (Mnemonic[6] != '_')
          break;
        switch (Mnemonic[7]) {
        default: break;
        case 'i':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "32_e", 4))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_ffbh_i32";	 // "v_ffbh_i32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_ffbh_i32";	 // "v_ffbh_i32_e64"
            return;
          }
          break;
        case 'u':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "32_e", 4))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_ffbh_u32";	 // "v_ffbh_u32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_ffbh_u32";	 // "v_ffbh_u32_e64"
            return;
          }
          break;
        }
        break;
      case 'l':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+6, "_b32_e", 6))
          break;
        switch (Mnemonic[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[13] != '2')
            break;
          Mnemonic = "v_ffbl_b32";	 // "v_ffbl_b32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[13] != '4')
            break;
          Mnemonic = "v_ffbl_b32";	 // "v_ffbl_b32_e64"
          return;
        }
        break;
      }
      break;
    case 'l':	 // 6 strings to match.
      if (memcmp(Mnemonic.data()+3, "sh", 2))
        break;
      switch (Mnemonic[5]) {
      default: break;
      case 'l':	 // 3 strings to match.
        if (memcmp(Mnemonic.data()+6, "_b", 2))
          break;
        switch (Mnemonic[8]) {
        default: break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "2_e", 3))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_lshl_b32";	 // "v_lshl_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_lshl_b32";	 // "v_lshl_b32_e64"
            return;
          }
          break;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+9, "4_e64", 5))
            break;
          Mnemonic = "v_lshl_b64";	 // "v_lshl_b64_e64"
          return;
        }
        break;
      case 'r':	 // 3 strings to match.
        if (memcmp(Mnemonic.data()+6, "_b", 2))
          break;
        switch (Mnemonic[8]) {
        default: break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "2_e", 3))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_lshr_b32";	 // "v_lshr_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_lshr_b32";	 // "v_lshr_b32_e64"
            return;
          }
          break;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+9, "4_e64", 5))
            break;
          Mnemonic = "v_lshr_b64";	 // "v_lshr_b64_e64"
          return;
        }
        break;
      }
      break;
    case 'm':	 // 9 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'a':	 // 3 strings to match.
        if (memcmp(Mnemonic.data()+4, "x3_", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case 'f':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_max3_f32";	 // "v_max3_f32_e64"
          return;
        case 'i':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_max3_i32";	 // "v_max3_i32_e64"
          return;
        case 'u':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_max3_u32";	 // "v_max3_u32_e64"
          return;
        }
        break;
      case 'e':	 // 3 strings to match.
        if (memcmp(Mnemonic.data()+4, "d3_", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case 'f':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_med3_f32";	 // "v_med3_f32_e64"
          return;
        case 'i':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_med3_i32";	 // "v_med3_i32_e64"
          return;
        case 'u':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_med3_u32";	 // "v_med3_u32_e64"
          return;
        }
        break;
      case 'i':	 // 3 strings to match.
        if (memcmp(Mnemonic.data()+4, "n3_", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case 'f':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_min3_f32";	 // "v_min3_f32_e64"
          return;
        case 'i':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_min3_i32";	 // "v_min3_i32_e64"
          return;
        case 'u':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_min3_u32";	 // "v_min3_u32_e64"
          return;
        }
        break;
      }
      break;
    case 's':	 // 8 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'q':	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+4, "rt_f", 4))
          break;
        switch (Mnemonic[8]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "6_e", 3))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_sqrt_f16";	 // "v_sqrt_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_sqrt_f16";	 // "v_sqrt_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "2_e", 3))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_sqrt_f32";	 // "v_sqrt_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_sqrt_f32";	 // "v_sqrt_f32_e64"
            return;
          }
          break;
        case '6':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "4_e", 3))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_sqrt_f64";	 // "v_sqrt_f64_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_sqrt_f64";	 // "v_sqrt_f64_e64"
            return;
          }
          break;
        }
        break;
      case 'u':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "bb_u32_e", 8))
          break;
        switch (Mnemonic[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[13] != '2')
            break;
          Mnemonic = "v_subb_u32";	 // "v_subb_u32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[13] != '4')
            break;
          Mnemonic = "v_subb_u32";	 // "v_subb_u32_e64"
          return;
        }
        break;
      }
      break;
    }
    break;
  case 15:	 // 49 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'b':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "frev_b32_e", 10))
        break;
      switch (Mnemonic[13]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[14] != '2')
          break;
        Mnemonic = "v_bfrev_b32";	 // "v_bfrev_b32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[14] != '4')
          break;
        Mnemonic = "v_bfrev_b32";	 // "v_bfrev_b32_e64"
        return;
      }
      break;
    case 'c':	 // 14 strings to match.
      if (memcmp(Mnemonic.data()+3, "mp_", 3))
        break;
      switch (Mnemonic[6]) {
      default: break;
      case 'f':	 // 6 strings to match.
        if (Mnemonic[7] != '_')
          break;
        switch (Mnemonic[8]) {
        default: break;
        case 'f':	 // 2 strings to match.
          switch (Mnemonic[9]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "2_e64", 5))
              break;
            Mnemonic = "v_cmp_f_f32";	 // "v_cmp_f_f32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "4_e64", 5))
              break;
            Mnemonic = "v_cmp_f_f64";	 // "v_cmp_f_f64_e64"
            return;
          }
          break;
        case 'i':	 // 2 strings to match.
          switch (Mnemonic[9]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "2_e64", 5))
              break;
            Mnemonic = "v_cmp_f_i32";	 // "v_cmp_f_i32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "4_e64", 5))
              break;
            Mnemonic = "v_cmp_f_i64";	 // "v_cmp_f_i64_e64"
            return;
          }
          break;
        case 'u':	 // 2 strings to match.
          switch (Mnemonic[9]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "2_e64", 5))
              break;
            Mnemonic = "v_cmp_f_u32";	 // "v_cmp_f_u32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "4_e64", 5))
              break;
            Mnemonic = "v_cmp_f_u64";	 // "v_cmp_f_u64_e64"
            return;
          }
          break;
        }
        break;
      case 'o':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+7, "_f", 2))
          break;
        switch (Mnemonic[9]) {
        default: break;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "2_e64", 5))
            break;
          Mnemonic = "v_cmp_o_f32";	 // "v_cmp_o_f32_e64"
          return;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "4_e64", 5))
            break;
          Mnemonic = "v_cmp_o_f64";	 // "v_cmp_o_f64_e64"
          return;
        }
        break;
      case 't':	 // 4 strings to match.
        if (Mnemonic[7] != '_')
          break;
        switch (Mnemonic[8]) {
        default: break;
        case 'i':	 // 2 strings to match.
          switch (Mnemonic[9]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "2_e64", 5))
              break;
            Mnemonic = "v_cmp_t_i32";	 // "v_cmp_t_i32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "4_e64", 5))
              break;
            Mnemonic = "v_cmp_t_i64";	 // "v_cmp_t_i64_e64"
            return;
          }
          break;
        case 'u':	 // 2 strings to match.
          switch (Mnemonic[9]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "2_e64", 5))
              break;
            Mnemonic = "v_cmp_t_u32";	 // "v_cmp_t_u32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "4_e64", 5))
              break;
            Mnemonic = "v_cmp_t_u64";	 // "v_cmp_t_u64_e64"
            return;
          }
          break;
        }
        break;
      case 'u':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+7, "_f", 2))
          break;
        switch (Mnemonic[9]) {
        default: break;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "2_e64", 5))
            break;
          Mnemonic = "v_cmp_u_f32";	 // "v_cmp_u_f32_e64"
          return;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "4_e64", 5))
            break;
          Mnemonic = "v_cmp_u_f64";	 // "v_cmp_u_f64_e64"
          return;
        }
        break;
      }
      break;
    case 'f':	 // 12 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'l':	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+4, "oor_f", 5))
          break;
        switch (Mnemonic[9]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+10, "6_e", 3))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[14] != '2')
              break;
            Mnemonic = "v_floor_f16";	 // "v_floor_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[14] != '4')
              break;
            Mnemonic = "v_floor_f16";	 // "v_floor_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+10, "2_e", 3))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[14] != '2')
              break;
            Mnemonic = "v_floor_f32";	 // "v_floor_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[14] != '4')
              break;
            Mnemonic = "v_floor_f32";	 // "v_floor_f32_e64"
            return;
          }
          break;
        case '6':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+10, "4_e", 3))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[14] != '2')
              break;
            Mnemonic = "v_floor_f64";	 // "v_floor_f64_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[14] != '4')
              break;
            Mnemonic = "v_floor_f64";	 // "v_floor_f64_e64"
            return;
          }
          break;
        }
        break;
      case 'r':	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+4, "act_f", 5))
          break;
        switch (Mnemonic[9]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+10, "6_e", 3))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[14] != '2')
              break;
            Mnemonic = "v_fract_f16";	 // "v_fract_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[14] != '4')
              break;
            Mnemonic = "v_fract_f16";	 // "v_fract_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+10, "2_e", 3))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[14] != '2')
              break;
            Mnemonic = "v_fract_f32";	 // "v_fract_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[14] != '4')
              break;
            Mnemonic = "v_fract_f32";	 // "v_fract_f32_e64"
            return;
          }
          break;
        case '6':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+10, "4_e", 3))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[14] != '2')
              break;
            Mnemonic = "v_fract_f64";	 // "v_fract_f64_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[14] != '4')
              break;
            Mnemonic = "v_fract_f64";	 // "v_fract_f64_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 'l':	 // 5 strings to match.
      if (memcmp(Mnemonic.data()+3, "dexp_f", 6))
        break;
      switch (Mnemonic[9]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "6_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_ldexp_f16";	 // "v_ldexp_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_ldexp_f16";	 // "v_ldexp_f16_e64"
          return;
        }
        break;
      case '3':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "2_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_ldexp_f32";	 // "v_ldexp_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_ldexp_f32";	 // "v_ldexp_f32_e64"
          return;
        }
        break;
      case '6':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+10, "4_e64", 5))
          break;
        Mnemonic = "v_ldexp_f64";	 // "v_ldexp_f64_e64"
        return;
      }
      break;
    case 'm':	 // 4 strings to match.
      if (memcmp(Mnemonic.data()+3, "ad", 2))
        break;
      switch (Mnemonic[5]) {
      default: break;
      case 'a':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+6, "k_f", 3))
          break;
        switch (Mnemonic[9]) {
        default: break;
        case '1':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "6_e32", 5))
            break;
          Mnemonic = "v_madak_f16";	 // "v_madak_f16_e32"
          return;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "2_e32", 5))
            break;
          Mnemonic = "v_madak_f32";	 // "v_madak_f32_e32"
          return;
        }
        break;
      case 'm':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+6, "k_f", 3))
          break;
        switch (Mnemonic[9]) {
        default: break;
        case '1':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "6_e32", 5))
            break;
          Mnemonic = "v_madmk_f16";	 // "v_madmk_f16_e32"
          return;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "2_e32", 5))
            break;
          Mnemonic = "v_madmk_f32";	 // "v_madmk_f32_e32"
          return;
        }
        break;
      }
      break;
    case 'r':	 // 6 strings to match.
      if (memcmp(Mnemonic.data()+3, "ndne_f", 6))
        break;
      switch (Mnemonic[9]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "6_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_rndne_f16";	 // "v_rndne_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_rndne_f16";	 // "v_rndne_f16_e64"
          return;
        }
        break;
      case '3':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "2_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_rndne_f32";	 // "v_rndne_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_rndne_f32";	 // "v_rndne_f32_e64"
          return;
        }
        break;
      case '6':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "4_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_rndne_f64";	 // "v_rndne_f64_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_rndne_f64";	 // "v_rndne_f64_e64"
          return;
        }
        break;
      }
      break;
    case 't':	 // 6 strings to match.
      if (memcmp(Mnemonic.data()+3, "runc_f", 6))
        break;
      switch (Mnemonic[9]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "6_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_trunc_f16";	 // "v_trunc_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_trunc_f16";	 // "v_trunc_f16_e64"
          return;
        }
        break;
      case '3':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "2_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_trunc_f32";	 // "v_trunc_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_trunc_f32";	 // "v_trunc_f32_e64"
          return;
        }
        break;
      case '6':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "4_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_trunc_f64";	 // "v_trunc_f64_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_trunc_f64";	 // "v_trunc_f64_e64"
          return;
        }
        break;
      }
      break;
    }
    break;
  case 16:	 // 75 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'c':	 // 60 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'm':	 // 56 strings to match.
        if (Mnemonic[4] != 'p')
          break;
        switch (Mnemonic[5]) {
        default: break;
        case '_':	 // 36 strings to match.
          switch (Mnemonic[6]) {
          default: break;
          case 'e':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+7, "q_", 2))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case 'f':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_eq_f32";	 // "v_cmp_eq_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_eq_f64";	 // "v_cmp_eq_f64_e64"
                return;
              }
              break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_eq_i32";	 // "v_cmp_eq_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_eq_i64";	 // "v_cmp_eq_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_eq_u32";	 // "v_cmp_eq_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_eq_u64";	 // "v_cmp_eq_u64_e64"
                return;
              }
              break;
            }
            break;
          case 'g':	 // 12 strings to match.
            switch (Mnemonic[7]) {
            default: break;
            case 'e':	 // 6 strings to match.
              if (Mnemonic[8] != '_')
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ge_f32";	 // "v_cmp_ge_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ge_f64";	 // "v_cmp_ge_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ge_i32";	 // "v_cmp_ge_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ge_i64";	 // "v_cmp_ge_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ge_u32";	 // "v_cmp_ge_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ge_u64";	 // "v_cmp_ge_u64_e64"
                  return;
                }
                break;
              }
              break;
            case 't':	 // 6 strings to match.
              if (Mnemonic[8] != '_')
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_gt_f32";	 // "v_cmp_gt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_gt_f64";	 // "v_cmp_gt_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_gt_i32";	 // "v_cmp_gt_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_gt_i64";	 // "v_cmp_gt_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_gt_u32";	 // "v_cmp_gt_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_gt_u64";	 // "v_cmp_gt_u64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'l':	 // 14 strings to match.
            switch (Mnemonic[7]) {
            default: break;
            case 'e':	 // 6 strings to match.
              if (Mnemonic[8] != '_')
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_le_f32";	 // "v_cmp_le_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_le_f64";	 // "v_cmp_le_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_le_i32";	 // "v_cmp_le_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_le_i64";	 // "v_cmp_le_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_le_u32";	 // "v_cmp_le_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_le_u64";	 // "v_cmp_le_u64_e64"
                  return;
                }
                break;
              }
              break;
            case 'g':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "_f", 2))
                break;
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_lg_f32";	 // "v_cmp_lg_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_lg_f64";	 // "v_cmp_lg_f64_e64"
                return;
              }
              break;
            case 't':	 // 6 strings to match.
              if (Mnemonic[8] != '_')
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_lt_f32";	 // "v_cmp_lt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_lt_f64";	 // "v_cmp_lt_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_lt_i32";	 // "v_cmp_lt_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_lt_i64";	 // "v_cmp_lt_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_lt_u32";	 // "v_cmp_lt_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_lt_u64";	 // "v_cmp_lt_u64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'n':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+7, "e_", 2))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_ne_i32";	 // "v_cmp_ne_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_ne_i64";	 // "v_cmp_ne_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_ne_u32";	 // "v_cmp_ne_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_ne_u64";	 // "v_cmp_ne_u64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 's':	 // 6 strings to match.
          if (Mnemonic[6] != '_')
            break;
          switch (Mnemonic[7]) {
          default: break;
          case 'f':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "_f", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                break;
              Mnemonic = "v_cmps_f_f32";	 // "v_cmps_f_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                break;
              Mnemonic = "v_cmps_f_f64";	 // "v_cmps_f_f64_e64"
              return;
            }
            break;
          case 'o':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "_f", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                break;
              Mnemonic = "v_cmps_o_f32";	 // "v_cmps_o_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                break;
              Mnemonic = "v_cmps_o_f64";	 // "v_cmps_o_f64_e64"
              return;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "_f", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                break;
              Mnemonic = "v_cmps_u_f32";	 // "v_cmps_u_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                break;
              Mnemonic = "v_cmps_u_f64";	 // "v_cmps_u_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'x':	 // 14 strings to match.
          if (Mnemonic[6] != '_')
            break;
          switch (Mnemonic[7]) {
          default: break;
          case 'f':	 // 6 strings to match.
            if (Mnemonic[8] != '_')
              break;
            switch (Mnemonic[9]) {
            default: break;
            case 'f':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_f_f32";	 // "v_cmpx_f_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_f_f64";	 // "v_cmpx_f_f64_e64"
                return;
              }
              break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_f_i32";	 // "v_cmpx_f_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_f_i64";	 // "v_cmpx_f_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_f_u32";	 // "v_cmpx_f_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_f_u64";	 // "v_cmpx_f_u64_e64"
                return;
              }
              break;
            }
            break;
          case 'o':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "_f", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                break;
              Mnemonic = "v_cmpx_o_f32";	 // "v_cmpx_o_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                break;
              Mnemonic = "v_cmpx_o_f64";	 // "v_cmpx_o_f64_e64"
              return;
            }
            break;
          case 't':	 // 4 strings to match.
            if (Mnemonic[8] != '_')
              break;
            switch (Mnemonic[9]) {
            default: break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_t_i32";	 // "v_cmpx_t_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_t_i64";	 // "v_cmpx_t_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_t_u32";	 // "v_cmpx_t_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_t_u64";	 // "v_cmpx_t_u64_e64"
                return;
              }
              break;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "_f", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                break;
              Mnemonic = "v_cmpx_u_f32";	 // "v_cmpx_u_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                break;
              Mnemonic = "v_cmpx_u_f64";	 // "v_cmpx_u_f64_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 'u':	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+4, "be", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'i':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+7, "d_f32_e64", 9))
            break;
          Mnemonic = "v_cubeid_f32";	 // "v_cubeid_f32_e64"
          return;
        case 'm':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+7, "a_f32_e64", 9))
            break;
          Mnemonic = "v_cubema_f32";	 // "v_cubema_f32_e64"
          return;
        case 's':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+7, "c_f32_e64", 9))
            break;
          Mnemonic = "v_cubesc_f32";	 // "v_cubesc_f32_e64"
          return;
        case 't':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+7, "c_f32_e64", 9))
            break;
          Mnemonic = "v_cubetc_f32";	 // "v_cubetc_f32_e64"
          return;
        }
        break;
      }
      break;
    case 'm':	 // 7 strings to match.
      if (memcmp(Mnemonic.data()+3, "ul", 2))
        break;
      switch (Mnemonic[5]) {
      default: break;
      case '_':	 // 6 strings to match.
        switch (Mnemonic[6]) {
        default: break;
        case 'h':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "i_", 2))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case 'i':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "32_e64", 6))
              break;
            Mnemonic = "v_mul_hi_i32";	 // "v_mul_hi_i32_e64"
            return;
          case 'u':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "32_e64", 6))
              break;
            Mnemonic = "v_mul_hi_u32";	 // "v_mul_hi_u32_e64"
            return;
          }
          break;
        case 'l':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+7, "o_", 2))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case 'i':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "32_e64", 6))
              break;
            Mnemonic = "v_mul_lo_i32";	 // "v_mul_lo_i32_e64"
            return;
          case 'u':	 // 3 strings to match.
            switch (Mnemonic[10]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "6_e", 3))
                break;
              switch (Mnemonic[14]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[15] != '2')
                  break;
                Mnemonic = "v_mul_lo_u16";	 // "v_mul_lo_u16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[15] != '4')
                  break;
                Mnemonic = "v_mul_lo_u16";	 // "v_mul_lo_u16_e64"
                return;
              }
              break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                break;
              Mnemonic = "v_mul_lo_u32";	 // "v_mul_lo_u32_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 'l':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+6, "it_f32_e64", 10))
          break;
        Mnemonic = "v_mullit_f32";	 // "v_mullit_f32_e64"
        return;
      }
      break;
    case 's':	 // 8 strings to match.
      if (memcmp(Mnemonic.data()+3, "ubrev_", 6))
        break;
      switch (Mnemonic[9]) {
      default: break;
      case 'f':	 // 4 strings to match.
        switch (Mnemonic[10]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+11, "6_e", 3))
            break;
          switch (Mnemonic[14]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[15] != '2')
              break;
            Mnemonic = "v_subrev_f16";	 // "v_subrev_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[15] != '4')
              break;
            Mnemonic = "v_subrev_f16";	 // "v_subrev_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+11, "2_e", 3))
            break;
          switch (Mnemonic[14]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[15] != '2')
              break;
            Mnemonic = "v_subrev_f32";	 // "v_subrev_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[15] != '4')
              break;
            Mnemonic = "v_subrev_f32";	 // "v_subrev_f32_e64"
            return;
          }
          break;
        }
        break;
      case 'i':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "32_e", 4))
          break;
        switch (Mnemonic[14]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[15] != '2')
            break;
          Mnemonic = "v_subrev_i32";	 // "v_subrev_i32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[15] != '4')
            break;
          Mnemonic = "v_subrev_i32";	 // "v_subrev_i32_e64"
          return;
        }
        break;
      case 'u':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "16_e", 4))
          break;
        switch (Mnemonic[14]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[15] != '2')
            break;
          Mnemonic = "v_subrev_u16";	 // "v_subrev_u16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[15] != '4')
            break;
          Mnemonic = "v_subrev_u16";	 // "v_subrev_u16_e64"
          return;
        }
        break;
      }
      break;
    }
    break;
  case 17:	 // 133 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'a':	 // 5 strings to match.
      if (memcmp(Mnemonic.data()+3, "shrrev_", 7))
        break;
      switch (Mnemonic[10]) {
      default: break;
      case 'b':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+11, "16_e", 4))
          break;
        switch (Mnemonic[15]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[16] != '2')
            break;
          Mnemonic = "v_ashrrev_b16";	 // "v_ashrrev_b16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[16] != '4')
            break;
          Mnemonic = "v_ashrrev_b16";	 // "v_ashrrev_b16_e64"
          return;
        }
        break;
      case 'i':	 // 3 strings to match.
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+12, "2_e", 3))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_ashrrev_i32";	 // "v_ashrrev_i32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_ashrrev_i32";	 // "v_ashrrev_i32_e64"
            return;
          }
          break;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+12, "4_e64", 5))
            break;
          Mnemonic = "v_ashrrev_i64";	 // "v_ashrrev_i64_e64"
          return;
        }
        break;
      }
      break;
    case 'c':	 // 102 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'm':	 // 68 strings to match.
        if (Mnemonic[4] != 'p')
          break;
        switch (Mnemonic[5]) {
        default: break;
        case '_':	 // 14 strings to match.
          switch (Mnemonic[6]) {
          default: break;
          case 'n':	 // 12 strings to match.
            switch (Mnemonic[7]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "q_f", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_neq_f32";	 // "v_cmp_neq_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_neq_f64";	 // "v_cmp_neq_f64_e64"
                return;
              }
              break;
            case 'g':	 // 4 strings to match.
              switch (Mnemonic[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nge_f32";	 // "v_cmp_nge_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nge_f64";	 // "v_cmp_nge_f64_e64"
                  return;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ngt_f32";	 // "v_cmp_ngt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ngt_f64";	 // "v_cmp_ngt_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 'l':	 // 6 strings to match.
              switch (Mnemonic[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nle_f32";	 // "v_cmp_nle_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nle_f64";	 // "v_cmp_nle_f64_e64"
                  return;
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nlg_f32";	 // "v_cmp_nlg_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nlg_f64";	 // "v_cmp_nlg_f64_e64"
                  return;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nlt_f32";	 // "v_cmp_nlt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nlt_f64";	 // "v_cmp_nlt_f64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 't':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+7, "ru_f", 4))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                break;
              Mnemonic = "v_cmp_tru_f32";	 // "v_cmp_tru_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                break;
              Mnemonic = "v_cmp_tru_f64";	 // "v_cmp_tru_f64_e64"
              return;
            }
            break;
          }
          break;
        case 's':	 // 18 strings to match.
          switch (Mnemonic[6]) {
          default: break;
          case '_':	 // 12 strings to match.
            switch (Mnemonic[7]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "q_f", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmps_eq_f32";	 // "v_cmps_eq_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmps_eq_f64";	 // "v_cmps_eq_f64_e64"
                return;
              }
              break;
            case 'g':	 // 4 strings to match.
              switch (Mnemonic[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_ge_f32";	 // "v_cmps_ge_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_ge_f64";	 // "v_cmps_ge_f64_e64"
                  return;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_gt_f32";	 // "v_cmps_gt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_gt_f64";	 // "v_cmps_gt_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 'l':	 // 6 strings to match.
              switch (Mnemonic[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_le_f32";	 // "v_cmps_le_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_le_f64";	 // "v_cmps_le_f64_e64"
                  return;
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_lg_f32";	 // "v_cmps_lg_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_lg_f64";	 // "v_cmps_lg_f64_e64"
                  return;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_lt_f32";	 // "v_cmps_lt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_lt_f64";	 // "v_cmps_lt_f64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'x':	 // 6 strings to match.
            if (Mnemonic[7] != '_')
              break;
            switch (Mnemonic[8]) {
            default: break;
            case 'f':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "_f", 2))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_f_f32";	 // "v_cmpsx_f_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_f_f64";	 // "v_cmpsx_f_f64_e64"
                return;
              }
              break;
            case 'o':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "_f", 2))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_o_f32";	 // "v_cmpsx_o_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_o_f64";	 // "v_cmpsx_o_f64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "_f", 2))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_u_f32";	 // "v_cmpsx_u_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_u_f64";	 // "v_cmpsx_u_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'x':	 // 36 strings to match.
          if (Mnemonic[6] != '_')
            break;
          switch (Mnemonic[7]) {
          default: break;
          case 'e':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+8, "q_", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case 'f':	 // 2 strings to match.
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_eq_f32";	 // "v_cmpx_eq_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_eq_f64";	 // "v_cmpx_eq_f64_e64"
                return;
              }
              break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_eq_i32";	 // "v_cmpx_eq_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_eq_i64";	 // "v_cmpx_eq_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_eq_u32";	 // "v_cmpx_eq_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_eq_u64";	 // "v_cmpx_eq_u64_e64"
                return;
              }
              break;
            }
            break;
          case 'g':	 // 12 strings to match.
            switch (Mnemonic[8]) {
            default: break;
            case 'e':	 // 6 strings to match.
              if (Mnemonic[9] != '_')
                break;
              switch (Mnemonic[10]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_ge_f32";	 // "v_cmpx_ge_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_ge_f64";	 // "v_cmpx_ge_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_ge_i32";	 // "v_cmpx_ge_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_ge_i64";	 // "v_cmpx_ge_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_ge_u32";	 // "v_cmpx_ge_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_ge_u64";	 // "v_cmpx_ge_u64_e64"
                  return;
                }
                break;
              }
              break;
            case 't':	 // 6 strings to match.
              if (Mnemonic[9] != '_')
                break;
              switch (Mnemonic[10]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_gt_f32";	 // "v_cmpx_gt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_gt_f64";	 // "v_cmpx_gt_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_gt_i32";	 // "v_cmpx_gt_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_gt_i64";	 // "v_cmpx_gt_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_gt_u32";	 // "v_cmpx_gt_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_gt_u64";	 // "v_cmpx_gt_u64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'l':	 // 14 strings to match.
            switch (Mnemonic[8]) {
            default: break;
            case 'e':	 // 6 strings to match.
              if (Mnemonic[9] != '_')
                break;
              switch (Mnemonic[10]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_le_f32";	 // "v_cmpx_le_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_le_f64";	 // "v_cmpx_le_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_le_i32";	 // "v_cmpx_le_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_le_i64";	 // "v_cmpx_le_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_le_u32";	 // "v_cmpx_le_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_le_u64";	 // "v_cmpx_le_u64_e64"
                  return;
                }
                break;
              }
              break;
            case 'g':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "_f", 2))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_lg_f32";	 // "v_cmpx_lg_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_lg_f64";	 // "v_cmpx_lg_f64_e64"
                return;
              }
              break;
            case 't':	 // 6 strings to match.
              if (Mnemonic[9] != '_')
                break;
              switch (Mnemonic[10]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_lt_f32";	 // "v_cmpx_lt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_lt_f64";	 // "v_cmpx_lt_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_lt_i32";	 // "v_cmpx_lt_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_lt_i64";	 // "v_cmpx_lt_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_lt_u32";	 // "v_cmpx_lt_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_lt_u64";	 // "v_cmpx_lt_u64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'n':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+8, "e_", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_ne_i32";	 // "v_cmpx_ne_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_ne_i64";	 // "v_cmpx_ne_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_ne_u32";	 // "v_cmpx_ne_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_ne_u64";	 // "v_cmpx_ne_u64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 'n':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "dmask_b32_e", 11))
          break;
        switch (Mnemonic[15]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[16] != '2')
            break;
          Mnemonic = "v_cndmask_b32";	 // "v_cndmask_b32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[16] != '4')
            break;
          Mnemonic = "v_cndmask_b32";	 // "v_cndmask_b32_e64"
          return;
        }
        break;
      case 'v':	 // 32 strings to match.
        if (memcmp(Mnemonic.data()+4, "t_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'f':	 // 20 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case 'f':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "32_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f16_f32";	 // "v_cvt_f16_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f16_f32";	 // "v_cvt_f16_f32_e64"
                return;
              }
              break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "16_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f16_i16";	 // "v_cvt_f16_i16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f16_i16";	 // "v_cvt_f16_i16_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "16_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f16_u16";	 // "v_cvt_f16_u16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f16_u16";	 // "v_cvt_f16_u16_e64"
                return;
              }
              break;
            }
            break;
          case '3':	 // 8 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case 'f':	 // 4 strings to match.
              switch (Mnemonic[11]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+12, "6_e", 3))
                  break;
                switch (Mnemonic[15]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[16] != '2')
                    break;
                  Mnemonic = "v_cvt_f32_f16";	 // "v_cvt_f32_f16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[16] != '4')
                    break;
                  Mnemonic = "v_cvt_f32_f16";	 // "v_cvt_f32_f16_e64"
                  return;
                }
                break;
              case '6':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+12, "4_e", 3))
                  break;
                switch (Mnemonic[15]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[16] != '2')
                    break;
                  Mnemonic = "v_cvt_f32_f64";	 // "v_cvt_f32_f64_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[16] != '4')
                    break;
                  Mnemonic = "v_cvt_f32_f64";	 // "v_cvt_f32_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "32_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f32_i32";	 // "v_cvt_f32_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f32_i32";	 // "v_cvt_f32_i32_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "32_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f32_u32";	 // "v_cvt_f32_u32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f32_u32";	 // "v_cvt_f32_u32_e64"
                return;
              }
              break;
            }
            break;
          case '6':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+8, "4_", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case 'f':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "32_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f64_f32";	 // "v_cvt_f64_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f64_f32";	 // "v_cvt_f64_f32_e64"
                return;
              }
              break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "32_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f64_i32";	 // "v_cvt_f64_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f64_i32";	 // "v_cvt_f64_i32_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "32_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f64_u32";	 // "v_cvt_f64_u32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f64_u32";	 // "v_cvt_f64_u32_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'i':	 // 6 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_f16_e", 7))
              break;
            switch (Mnemonic[15]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[16] != '2')
                break;
              Mnemonic = "v_cvt_i16_f16";	 // "v_cvt_i16_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[16] != '4')
                break;
              Mnemonic = "v_cvt_i16_f16";	 // "v_cvt_i16_f16_e64"
              return;
            }
            break;
          case '3':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_f", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "2_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_i32_f32";	 // "v_cvt_i32_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_i32_f32";	 // "v_cvt_i32_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "4_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_i32_f64";	 // "v_cvt_i32_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_i32_f64";	 // "v_cvt_i32_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'u':	 // 6 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_f16_e", 7))
              break;
            switch (Mnemonic[15]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[16] != '2')
                break;
              Mnemonic = "v_cvt_u16_f16";	 // "v_cvt_u16_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[16] != '4')
                break;
              Mnemonic = "v_cvt_u16_f16";	 // "v_cvt_u16_f16_e64"
              return;
            }
            break;
          case '3':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_f", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "2_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_u32_f32";	 // "v_cvt_u32_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_u32_f32";	 // "v_cvt_u32_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "4_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_u32_f64";	 // "v_cvt_u32_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_u32_f64";	 // "v_cvt_u32_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 'l':	 // 10 strings to match.
      if (memcmp(Mnemonic.data()+3, "sh", 2))
        break;
      switch (Mnemonic[5]) {
      default: break;
      case 'l':	 // 5 strings to match.
        if (memcmp(Mnemonic.data()+6, "rev_b", 5))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+12, "6_e", 3))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_lshlrev_b16";	 // "v_lshlrev_b16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_lshlrev_b16";	 // "v_lshlrev_b16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+12, "2_e", 3))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_lshlrev_b32";	 // "v_lshlrev_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_lshlrev_b32";	 // "v_lshlrev_b32_e64"
            return;
          }
          break;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+12, "4_e64", 5))
            break;
          Mnemonic = "v_lshlrev_b64";	 // "v_lshlrev_b64_e64"
          return;
        }
        break;
      case 'r':	 // 5 strings to match.
        if (memcmp(Mnemonic.data()+6, "rev_b", 5))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+12, "6_e", 3))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_lshrrev_b16";	 // "v_lshrrev_b16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_lshrrev_b16";	 // "v_lshrrev_b16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+12, "2_e", 3))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_lshrrev_b32";	 // "v_lshrrev_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_lshrrev_b32";	 // "v_lshrrev_b32_e64"
            return;
          }
          break;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+12, "4_e64", 5))
            break;
          Mnemonic = "v_lshrrev_b64";	 // "v_lshrrev_b64_e64"
          return;
        }
        break;
      }
      break;
    case 'm':	 // 14 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'a':	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+4, "d_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'i':	 // 2 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "2_i24_e64", 9))
              break;
            Mnemonic = "v_mad_i32_i24";	 // "v_mad_i32_i24_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "4_i32_e64", 9))
              break;
            Mnemonic = "v_mad_i64_i32";	 // "v_mad_i64_i32_e64"
            return;
          }
          break;
        case 'u':	 // 2 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "2_u24_e64", 9))
              break;
            Mnemonic = "v_mad_u32_u24";	 // "v_mad_u32_u24_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "4_u32_e64", 9))
              break;
            Mnemonic = "v_mad_u64_u32";	 // "v_mad_u64_u32_e64"
            return;
          }
          break;
        }
        break;
      case 'o':	 // 6 strings to match.
        if (Mnemonic[4] != 'v')
          break;
        switch (Mnemonic[5]) {
        default: break;
        case '_':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+6, "fed_b32_e", 9))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_mov_fed_b32";	 // "v_mov_fed_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_mov_fed_b32";	 // "v_mov_fed_b32_e64"
            return;
          }
          break;
        case 'r':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+6, "el", 2))
            break;
          switch (Mnemonic[8]) {
          default: break;
          case 'd':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+9, "_b32_e", 6))
              break;
            switch (Mnemonic[15]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[16] != '2')
                break;
              Mnemonic = "v_movreld_b32";	 // "v_movreld_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[16] != '4')
                break;
              Mnemonic = "v_movreld_b32";	 // "v_movreld_b32_e64"
              return;
            }
            break;
          case 's':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+9, "_b32_e", 6))
              break;
            switch (Mnemonic[15]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[16] != '2')
                break;
              Mnemonic = "v_movrels_b32";	 // "v_movrels_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[16] != '4')
                break;
              Mnemonic = "v_movrels_b32";	 // "v_movrels_b32_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 'u':	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+4, "l_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'i':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "32_i24_e", 8))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_mul_i32_i24";	 // "v_mul_i32_i24_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_mul_i32_i24";	 // "v_mul_i32_i24_e64"
            return;
          }
          break;
        case 'u':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "32_u24_e", 8))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_mul_u32_u24";	 // "v_mul_u32_u24_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_mul_u32_u24";	 // "v_mul_u32_u24_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 's':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "ubbrev_u32_e", 12))
        break;
      switch (Mnemonic[15]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[16] != '2')
          break;
        Mnemonic = "v_subbrev_u32";	 // "v_subbrev_u32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[16] != '4')
          break;
        Mnemonic = "v_subbrev_u32";	 // "v_subbrev_u32_e64"
        return;
      }
      break;
    }
    break;
  case 18:	 // 49 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'a':	 // 1 string to match.
      if (memcmp(Mnemonic.data()+3, "lignbit_b32_e64", 15))
        break;
      Mnemonic = "v_alignbit_b32";	 // "v_alignbit_b32_e64"
      return;
    case 'b':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "cnt_u32_b32_e", 13))
        break;
      switch (Mnemonic[16]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[17] != '2')
          break;
        Mnemonic = "v_bcnt_u32_b32";	 // "v_bcnt_u32_b32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[17] != '4')
          break;
        Mnemonic = "v_bcnt_u32_b32";	 // "v_bcnt_u32_b32_e64"
        return;
      }
      break;
    case 'c':	 // 40 strings to match.
      if (memcmp(Mnemonic.data()+3, "mp", 2))
        break;
      switch (Mnemonic[5]) {
      default: break;
      case 's':	 // 26 strings to match.
        switch (Mnemonic[6]) {
        default: break;
        case '_':	 // 14 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case 'n':	 // 12 strings to match.
            switch (Mnemonic[8]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "q_f", 3))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmps_neq_f32";	 // "v_cmps_neq_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmps_neq_f64";	 // "v_cmps_neq_f64_e64"
                return;
              }
              break;
            case 'g':	 // 4 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "_f", 2))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nge_f32";	 // "v_cmps_nge_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nge_f64";	 // "v_cmps_nge_f64_e64"
                  return;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "_f", 2))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_ngt_f32";	 // "v_cmps_ngt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_ngt_f64";	 // "v_cmps_ngt_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 'l':	 // 6 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "_f", 2))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nle_f32";	 // "v_cmps_nle_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nle_f64";	 // "v_cmps_nle_f64_e64"
                  return;
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "_f", 2))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nlg_f32";	 // "v_cmps_nlg_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nlg_f64";	 // "v_cmps_nlg_f64_e64"
                  return;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "_f", 2))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nlt_f32";	 // "v_cmps_nlt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nlt_f64";	 // "v_cmps_nlt_f64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 't':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "ru_f", 4))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                break;
              Mnemonic = "v_cmps_tru_f32";	 // "v_cmps_tru_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                break;
              Mnemonic = "v_cmps_tru_f64";	 // "v_cmps_tru_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'x':	 // 12 strings to match.
          if (Mnemonic[7] != '_')
            break;
          switch (Mnemonic[8]) {
          default: break;
          case 'e':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+9, "q_f", 3))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                break;
              Mnemonic = "v_cmpsx_eq_f32";	 // "v_cmpsx_eq_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                break;
              Mnemonic = "v_cmpsx_eq_f64";	 // "v_cmpsx_eq_f64_e64"
              return;
            }
            break;
          case 'g':	 // 4 strings to match.
            switch (Mnemonic[9]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_ge_f32";	 // "v_cmpsx_ge_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_ge_f64";	 // "v_cmpsx_ge_f64_e64"
                return;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_gt_f32";	 // "v_cmpsx_gt_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_gt_f64";	 // "v_cmpsx_gt_f64_e64"
                return;
              }
              break;
            }
            break;
          case 'l':	 // 6 strings to match.
            switch (Mnemonic[9]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_le_f32";	 // "v_cmpsx_le_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_le_f64";	 // "v_cmpsx_le_f64_e64"
                return;
              }
              break;
            case 'g':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_lg_f32";	 // "v_cmpsx_lg_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_lg_f64";	 // "v_cmpsx_lg_f64_e64"
                return;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_lt_f32";	 // "v_cmpsx_lt_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_lt_f64";	 // "v_cmpsx_lt_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 'x':	 // 14 strings to match.
        if (Mnemonic[6] != '_')
          break;
        switch (Mnemonic[7]) {
        default: break;
        case 'n':	 // 12 strings to match.
          switch (Mnemonic[8]) {
          default: break;
          case 'e':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+9, "q_f", 3))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                break;
              Mnemonic = "v_cmpx_neq_f32";	 // "v_cmpx_neq_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                break;
              Mnemonic = "v_cmpx_neq_f64";	 // "v_cmpx_neq_f64_e64"
              return;
            }
            break;
          case 'g':	 // 4 strings to match.
            switch (Mnemonic[9]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nge_f32";	 // "v_cmpx_nge_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nge_f64";	 // "v_cmpx_nge_f64_e64"
                return;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_ngt_f32";	 // "v_cmpx_ngt_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_ngt_f64";	 // "v_cmpx_ngt_f64_e64"
                return;
              }
              break;
            }
            break;
          case 'l':	 // 6 strings to match.
            switch (Mnemonic[9]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nle_f32";	 // "v_cmpx_nle_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nle_f64";	 // "v_cmpx_nle_f64_e64"
                return;
              }
              break;
            case 'g':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nlg_f32";	 // "v_cmpx_nlg_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nlg_f64";	 // "v_cmpx_nlg_f64_e64"
                return;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nlt_f32";	 // "v_cmpx_nlt_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nlt_f64";	 // "v_cmpx_nlt_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 't':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "ru_f", 4))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+13, "2_e64", 5))
              break;
            Mnemonic = "v_cmpx_tru_f32";	 // "v_cmpx_tru_f32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+13, "4_e64", 5))
              break;
            Mnemonic = "v_cmpx_tru_f64";	 // "v_cmpx_tru_f64_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 'd':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "iv_fmas_f", 9))
        break;
      switch (Mnemonic[12]) {
      default: break;
      case '3':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+13, "2_e64", 5))
          break;
        Mnemonic = "v_div_fmas_f32";	 // "v_div_fmas_f32_e64"
        return;
      case '6':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+13, "4_e64", 5))
          break;
        Mnemonic = "v_div_fmas_f64";	 // "v_div_fmas_f64_e64"
        return;
      }
      break;
    case 'm':	 // 4 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'o':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "vrelsd_b32_e", 12))
          break;
        switch (Mnemonic[16]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[17] != '2')
            break;
          Mnemonic = "v_movrelsd_b32";	 // "v_movrelsd_b32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[17] != '4')
            break;
          Mnemonic = "v_movrelsd_b32";	 // "v_movrelsd_b32_e64"
          return;
        }
        break;
      case 'q':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "sad_u", 5))
          break;
        switch (Mnemonic[9]) {
        default: break;
        case '1':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "6_u8_e64", 8))
            break;
          Mnemonic = "v_mqsad_u16_u8";	 // "v_mqsad_u16_u8_e64"
          return;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "2_u8_e64", 8))
            break;
          Mnemonic = "v_mqsad_u32_u8";	 // "v_mqsad_u32_u8_e64"
          return;
        }
        break;
      }
      break;
    }
    break;
  case 19:	 // 33 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'a':	 // 1 string to match.
      if (memcmp(Mnemonic.data()+3, "lignbyte_b32_e64", 16))
        break;
      Mnemonic = "v_alignbyte_b32";	 // "v_alignbyte_b32_e64"
      return;
    case 'c':	 // 16 strings to match.
      if (memcmp(Mnemonic.data()+3, "mp", 2))
        break;
      switch (Mnemonic[5]) {
      default: break;
      case '_':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+6, "class_f", 7))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+14, "2_e64", 5))
            break;
          Mnemonic = "v_cmp_class_f32";	 // "v_cmp_class_f32_e64"
          return;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+14, "4_e64", 5))
            break;
          Mnemonic = "v_cmp_class_f64";	 // "v_cmp_class_f64_e64"
          return;
        }
        break;
      case 's':	 // 14 strings to match.
        if (memcmp(Mnemonic.data()+6, "x_", 2))
          break;
        switch (Mnemonic[8]) {
        default: break;
        case 'n':	 // 12 strings to match.
          switch (Mnemonic[9]) {
          default: break;
          case 'e':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "q_f", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                break;
              Mnemonic = "v_cmpsx_neq_f32";	 // "v_cmpsx_neq_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                break;
              Mnemonic = "v_cmpsx_neq_f64";	 // "v_cmpsx_neq_f64_e64"
              return;
            }
            break;
          case 'g':	 // 4 strings to match.
            switch (Mnemonic[10]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "_f", 2))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nge_f32";	 // "v_cmpsx_nge_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nge_f64";	 // "v_cmpsx_nge_f64_e64"
                return;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "_f", 2))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_ngt_f32";	 // "v_cmpsx_ngt_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_ngt_f64";	 // "v_cmpsx_ngt_f64_e64"
                return;
              }
              break;
            }
            break;
          case 'l':	 // 6 strings to match.
            switch (Mnemonic[10]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "_f", 2))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nle_f32";	 // "v_cmpsx_nle_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nle_f64";	 // "v_cmpsx_nle_f64_e64"
                return;
              }
              break;
            case 'g':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "_f", 2))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nlg_f32";	 // "v_cmpsx_nlg_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nlg_f64";	 // "v_cmpsx_nlg_f64_e64"
                return;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "_f", 2))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nlt_f32";	 // "v_cmpsx_nlt_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nlt_f64";	 // "v_cmpsx_nlt_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 't':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "ru_f", 4))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+14, "2_e64", 5))
              break;
            Mnemonic = "v_cmpsx_tru_f32";	 // "v_cmpsx_tru_f32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+14, "4_e64", 5))
              break;
            Mnemonic = "v_cmpsx_tru_f64";	 // "v_cmpsx_tru_f64_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 'd':	 // 4 strings to match.
      if (memcmp(Mnemonic.data()+3, "iv_", 3))
        break;
      switch (Mnemonic[6]) {
      default: break;
      case 'f':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+7, "ixup_f", 6))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+14, "2_e64", 5))
            break;
          Mnemonic = "v_div_fixup_f32";	 // "v_div_fixup_f32_e64"
          return;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+14, "4_e64", 5))
            break;
          Mnemonic = "v_div_fixup_f64";	 // "v_div_fixup_f64_e64"
          return;
        }
        break;
      case 's':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+7, "cale_f", 6))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+14, "2_e64", 5))
            break;
          Mnemonic = "v_div_scale_f32";	 // "v_div_scale_f32_e64"
          return;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+14, "4_e64", 5))
            break;
          Mnemonic = "v_div_scale_f64";	 // "v_div_scale_f64_e64"
          return;
        }
        break;
      }
      break;
    case 'l':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "og_clamp_f32_e", 14))
        break;
      switch (Mnemonic[17]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[18] != '2')
          break;
        Mnemonic = "v_log_clamp_f32";	 // "v_log_clamp_f32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[18] != '4')
          break;
        Mnemonic = "v_log_clamp_f32";	 // "v_log_clamp_f32_e64"
        return;
      }
      break;
    case 'r':	 // 10 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'c':	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+4, "p_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'c':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+7, "lamp_f", 6))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+14, "2_e", 3))
              break;
            switch (Mnemonic[17]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[18] != '2')
                break;
              Mnemonic = "v_rcp_clamp_f32";	 // "v_rcp_clamp_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[18] != '4')
                break;
              Mnemonic = "v_rcp_clamp_f32";	 // "v_rcp_clamp_f32_e64"
              return;
            }
            break;
          case '6':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+14, "4_e", 3))
              break;
            switch (Mnemonic[17]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[18] != '2')
                break;
              Mnemonic = "v_rcp_clamp_f64";	 // "v_rcp_clamp_f64_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[18] != '4')
                break;
              Mnemonic = "v_rcp_clamp_f64";	 // "v_rcp_clamp_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'i':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "flag_f32_e", 10))
            break;
          switch (Mnemonic[17]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[18] != '2')
              break;
            Mnemonic = "v_rcp_iflag_f32";	 // "v_rcp_iflag_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[18] != '4')
              break;
            Mnemonic = "v_rcp_iflag_f32";	 // "v_rcp_iflag_f32_e64"
            return;
          }
          break;
        }
        break;
      case 's':	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+4, "q_clamp_f", 9))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+14, "2_e", 3))
            break;
          switch (Mnemonic[17]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[18] != '2')
              break;
            Mnemonic = "v_rsq_clamp_f32";	 // "v_rsq_clamp_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[18] != '4')
              break;
            Mnemonic = "v_rsq_clamp_f32";	 // "v_rsq_clamp_f32_e64"
            return;
          }
          break;
        case '6':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+14, "4_e", 3))
            break;
          switch (Mnemonic[17]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[18] != '2')
              break;
            Mnemonic = "v_rsq_clamp_f64";	 // "v_rsq_clamp_f64_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[18] != '4')
              break;
            Mnemonic = "v_rsq_clamp_f64";	 // "v_rsq_clamp_f64_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 20:	 // 45 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'c':	 // 16 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'm':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "px_class_f", 10))
          break;
        switch (Mnemonic[14]) {
        default: break;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+15, "2_e64", 5))
            break;
          Mnemonic = "v_cmpx_class_f32";	 // "v_cmpx_class_f32_e64"
          return;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+15, "4_e64", 5))
            break;
          Mnemonic = "v_cmpx_class_f64";	 // "v_cmpx_class_f64_e64"
          return;
        }
        break;
      case 'v':	 // 14 strings to match.
        if (memcmp(Mnemonic.data()+4, "t_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'f':	 // 8 strings to match.
          if (memcmp(Mnemonic.data()+7, "32_ubyte", 8))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '0':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+16, "_e", 2))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_cvt_f32_ubyte0";	 // "v_cvt_f32_ubyte0_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_cvt_f32_ubyte0";	 // "v_cvt_f32_ubyte0_e64"
              return;
            }
            break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+16, "_e", 2))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_cvt_f32_ubyte1";	 // "v_cvt_f32_ubyte1_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_cvt_f32_ubyte1";	 // "v_cvt_f32_ubyte1_e64"
              return;
            }
            break;
          case '2':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+16, "_e", 2))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_cvt_f32_ubyte2";	 // "v_cvt_f32_ubyte2_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_cvt_f32_ubyte2";	 // "v_cvt_f32_ubyte2_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+16, "_e", 2))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_cvt_f32_ubyte3";	 // "v_cvt_f32_ubyte3_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_cvt_f32_ubyte3";	 // "v_cvt_f32_ubyte3_e64"
              return;
            }
            break;
          }
          break;
        case 'o':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "ff_f32_i4_e", 11))
            break;
          switch (Mnemonic[18]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[19] != '2')
              break;
            Mnemonic = "v_cvt_off_f32_i4";	 // "v_cvt_off_f32_i4_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[19] != '4')
              break;
            Mnemonic = "v_cvt_off_f32_i4";	 // "v_cvt_off_f32_i4_e64"
            return;
          }
          break;
        case 'p':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+7, "k_", 2))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case 'i':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "16_i32_e", 8))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_cvt_pk_i16_i32";	 // "v_cvt_pk_i16_i32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_cvt_pk_i16_i32";	 // "v_cvt_pk_i16_i32_e64"
              return;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "16_u32_e", 8))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_cvt_pk_u16_u32";	 // "v_cvt_pk_u16_u32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_cvt_pk_u16_u32";	 // "v_cvt_pk_u16_u32_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 'e':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "xp_legacy_f32_e", 15))
        break;
      switch (Mnemonic[18]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[19] != '2')
          break;
        Mnemonic = "v_exp_legacy_f32";	 // "v_exp_legacy_f32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[19] != '4')
          break;
        Mnemonic = "v_exp_legacy_f32";	 // "v_exp_legacy_f32_e64"
        return;
      }
      break;
    case 'f':	 // 6 strings to match.
      if (memcmp(Mnemonic.data()+3, "rexp_mant_f", 11))
        break;
      switch (Mnemonic[14]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+15, "6_e", 3))
          break;
        switch (Mnemonic[18]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[19] != '2')
            break;
          Mnemonic = "v_frexp_mant_f16";	 // "v_frexp_mant_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[19] != '4')
            break;
          Mnemonic = "v_frexp_mant_f16";	 // "v_frexp_mant_f16_e64"
          return;
        }
        break;
      case '3':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+15, "2_e", 3))
          break;
        switch (Mnemonic[18]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[19] != '2')
            break;
          Mnemonic = "v_frexp_mant_f32";	 // "v_frexp_mant_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[19] != '4')
            break;
          Mnemonic = "v_frexp_mant_f32";	 // "v_frexp_mant_f32_e64"
          return;
        }
        break;
      case '6':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+15, "4_e", 3))
          break;
        switch (Mnemonic[18]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[19] != '2')
            break;
          Mnemonic = "v_frexp_mant_f64";	 // "v_frexp_mant_f64_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[19] != '4')
            break;
          Mnemonic = "v_frexp_mant_f64";	 // "v_frexp_mant_f64_e64"
          return;
        }
        break;
      }
      break;
    case 'l':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "og_legacy_f32_e", 15))
        break;
      switch (Mnemonic[18]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[19] != '2')
          break;
        Mnemonic = "v_log_legacy_f32";	 // "v_log_legacy_f32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[19] != '4')
          break;
        Mnemonic = "v_log_legacy_f32";	 // "v_log_legacy_f32_e64"
        return;
      }
      break;
    case 'm':	 // 13 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'a':	 // 5 strings to match.
        switch (Mnemonic[4]) {
        default: break;
        case 'c':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+5, "_legacy_f32_e", 13))
            break;
          switch (Mnemonic[18]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[19] != '2')
              break;
            Mnemonic = "v_mac_legacy_f32";	 // "v_mac_legacy_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[19] != '4')
              break;
            Mnemonic = "v_mac_legacy_f32";	 // "v_mac_legacy_f32_e64"
            return;
          }
          break;
        case 'd':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+5, "_legacy_f32_e64", 15))
            break;
          Mnemonic = "v_mad_legacy_f32";	 // "v_mad_legacy_f32_e64"
          return;
        case 'x':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+5, "_legacy_f32_e", 13))
            break;
          switch (Mnemonic[18]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[19] != '2')
              break;
            Mnemonic = "v_max_legacy_f32";	 // "v_max_legacy_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[19] != '4')
              break;
            Mnemonic = "v_max_legacy_f32";	 // "v_max_legacy_f32_e64"
            return;
          }
          break;
        }
        break;
      case 'i':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "n_legacy_f32_e", 14))
          break;
        switch (Mnemonic[18]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[19] != '2')
            break;
          Mnemonic = "v_min_legacy_f32";	 // "v_min_legacy_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[19] != '4')
            break;
          Mnemonic = "v_min_legacy_f32";	 // "v_min_legacy_f32_e64"
          return;
        }
        break;
      case 'u':	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+4, "l_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'h':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+7, "i_", 2))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case 'i':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "32_i24_e", 8))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_mul_hi_i32_i24";	 // "v_mul_hi_i32_i24_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_mul_hi_i32_i24";	 // "v_mul_hi_i32_i24_e64"
              return;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "32_u24_e", 8))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_mul_hi_u32_u24";	 // "v_mul_hi_u32_u24_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_mul_hi_u32_u24";	 // "v_mul_hi_u32_u24_e64"
              return;
            }
            break;
          }
          break;
        case 'l':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "egacy_f32_e", 11))
            break;
          switch (Mnemonic[18]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[19] != '2')
              break;
            Mnemonic = "v_mul_legacy_f32";	 // "v_mul_legacy_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[19] != '4')
              break;
            Mnemonic = "v_mul_legacy_f32";	 // "v_mul_legacy_f32_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 'q':	 // 1 string to match.
      if (memcmp(Mnemonic.data()+3, "sad_pk_u16_u8_e64", 17))
        break;
      Mnemonic = "v_qsad_pk_u16_u8";	 // "v_qsad_pk_u16_u8_e64"
      return;
    case 'r':	 // 4 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'c':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "p_legacy_f32_e", 14))
          break;
        switch (Mnemonic[18]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[19] != '2')
            break;
          Mnemonic = "v_rcp_legacy_f32";	 // "v_rcp_legacy_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[19] != '4')
            break;
          Mnemonic = "v_rcp_legacy_f32";	 // "v_rcp_legacy_f32_e64"
          return;
        }
        break;
      case 's':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "q_legacy_f32_e", 14))
          break;
        switch (Mnemonic[18]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[19] != '2')
            break;
          Mnemonic = "v_rsq_legacy_f32";	 // "v_rsq_legacy_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[19] != '4')
            break;
          Mnemonic = "v_rsq_legacy_f32";	 // "v_rsq_legacy_f32_e64"
          return;
        }
        break;
      }
      break;
    case 't':	 // 1 string to match.
      if (memcmp(Mnemonic.data()+3, "rig_preop_f64_e64", 17))
        break;
      Mnemonic = "v_trig_preop_f64";	 // "v_trig_preop_f64_e64"
      return;
    }
    break;
  case 21:	 // 4 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_cvt_", 6))
      break;
    switch (Mnemonic[6]) {
    default: break;
    case 'f':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+7, "lr_i32_f32_e", 12))
        break;
      switch (Mnemonic[19]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[20] != '2')
          break;
        Mnemonic = "v_cvt_flr_i32_f32";	 // "v_cvt_flr_i32_f32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[20] != '4')
          break;
        Mnemonic = "v_cvt_flr_i32_f32";	 // "v_cvt_flr_i32_f32_e64"
        return;
      }
      break;
    case 'r':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+7, "pi_i32_f32_e", 12))
        break;
      switch (Mnemonic[19]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[20] != '2')
          break;
        Mnemonic = "v_cvt_rpi_i32_f32";	 // "v_cvt_rpi_i32_f32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[20] != '4')
          break;
        Mnemonic = "v_cvt_rpi_i32_f32";	 // "v_cvt_rpi_i32_f32_e64"
        return;
      }
      break;
    }
    break;
  case 22:	 // 4 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_mbcnt_", 8))
      break;
    switch (Mnemonic[8]) {
    default: break;
    case 'h':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+9, "i_u32_b32_e", 11))
        break;
      switch (Mnemonic[20]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[21] != '2')
          break;
        Mnemonic = "v_mbcnt_hi_u32_b32";	 // "v_mbcnt_hi_u32_b32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[21] != '4')
          break;
        Mnemonic = "v_mbcnt_hi_u32_b32";	 // "v_mbcnt_hi_u32_b32_e64"
        return;
      }
      break;
    case 'l':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+9, "o_u32_b32_e", 11))
        break;
      switch (Mnemonic[20]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[21] != '2')
          break;
        Mnemonic = "v_mbcnt_lo_u32_b32";	 // "v_mbcnt_lo_u32_b32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[21] != '4')
          break;
        Mnemonic = "v_mbcnt_lo_u32_b32";	 // "v_mbcnt_lo_u32_b32_e64"
        return;
      }
      break;
    }
    break;
  case 23:	 // 8 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'c':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "vt_pkrtz_f16_f32_e", 18))
        break;
      switch (Mnemonic[21]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[22] != '2')
          break;
        Mnemonic = "v_cvt_pkrtz_f16_f32";	 // "v_cvt_pkrtz_f16_f32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[22] != '4')
          break;
        Mnemonic = "v_cvt_pkrtz_f16_f32";	 // "v_cvt_pkrtz_f16_f32_e64"
        return;
      }
      break;
    case 'f':	 // 6 strings to match.
      if (memcmp(Mnemonic.data()+3, "rexp_exp_i", 10))
        break;
      switch (Mnemonic[13]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+14, "6_f16_e", 7))
          break;
        switch (Mnemonic[21]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[22] != '2')
            break;
          Mnemonic = "v_frexp_exp_i16_f16";	 // "v_frexp_exp_i16_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[22] != '4')
            break;
          Mnemonic = "v_frexp_exp_i16_f16";	 // "v_frexp_exp_i16_f16_e64"
          return;
        }
        break;
      case '3':	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+14, "2_f", 3))
          break;
        switch (Mnemonic[17]) {
        default: break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+18, "2_e", 3))
            break;
          switch (Mnemonic[21]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[22] != '2')
              break;
            Mnemonic = "v_frexp_exp_i32_f32";	 // "v_frexp_exp_i32_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[22] != '4')
              break;
            Mnemonic = "v_frexp_exp_i32_f32";	 // "v_frexp_exp_i32_f32_e64"
            return;
          }
          break;
        case '6':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+18, "4_e", 3))
            break;
          switch (Mnemonic[21]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[22] != '2')
              break;
            Mnemonic = "v_frexp_exp_i32_f64";	 // "v_frexp_exp_i32_f64_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[22] != '4')
              break;
            Mnemonic = "v_frexp_exp_i32_f64";	 // "v_frexp_exp_i32_f64_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 24:	 // 6 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_cvt_pk", 8))
      break;
    switch (Mnemonic[8]) {
    default: break;
    case 'a':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+9, "ccum_u8_f32_e", 13))
        break;
      switch (Mnemonic[22]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[23] != '2')
          break;
        Mnemonic = "v_cvt_pkaccum_u8_f32";	 // "v_cvt_pkaccum_u8_f32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[23] != '4')
          break;
        Mnemonic = "v_cvt_pkaccum_u8_f32";	 // "v_cvt_pkaccum_u8_f32_e64"
        return;
      }
      break;
    case 'n':	 // 4 strings to match.
      if (memcmp(Mnemonic.data()+9, "orm_", 4))
        break;
      switch (Mnemonic[13]) {
      default: break;
      case 'i':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+14, "16_f32_e", 8))
          break;
        switch (Mnemonic[22]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[23] != '2')
            break;
          Mnemonic = "v_cvt_pknorm_i16_f32";	 // "v_cvt_pknorm_i16_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[23] != '4')
            break;
          Mnemonic = "v_cvt_pknorm_i16_f32";	 // "v_cvt_pknorm_i16_f32_e64"
          return;
        }
        break;
      case 'u':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+14, "16_f32_e", 8))
          break;
        switch (Mnemonic[22]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[23] != '2')
            break;
          Mnemonic = "v_cvt_pknorm_u16_f32";	 // "v_cvt_pknorm_u16_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[23] != '4')
            break;
          Mnemonic = "v_cvt_pknorm_u16_f32";	 // "v_cvt_pknorm_u16_f32_e64"
          return;
        }
        break;
      }
      break;
    }
    break;
  }
}

namespace {
enum OperatorConversionKind {
  CVT_Done,
  CVT_Reg,
  CVT_Tied,
  CVT_95_addImmOperands,
  CVT_95_Reg,
  CVT_imm_95_0,
  CVT_cvtMubuf,
  CVT_cvtDS,
  CVT_cvtDSOffset01,
  CVT_cvtFlat,
  CVT_95_addRegOrImmOperands,
  CVT_95_addSoppBrTargetOperands,
  CVT_cvtVOP3,
  CVT_NUM_CONVERTERS
};

enum InstructionConversionKind {
  Convert_NoOperands,
  Convert__Imm1_1,
  Convert__Imm1_1__Imm1_3,
  Convert__Reg1_2__Imm1_0,
  Convert__Reg1_4__imm_95_0__Imm1_0__Reg1_1__Reg1_2,
  Convert__Reg1_0,
  Convert__Imm1_2__Imm1_0,
  ConvertCustom_cvtMubuf,
  ConvertCustom_cvtDS,
  ConvertCustom_cvtDSOffset01,
  Convert__Imm1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_8,
  ConvertCustom_cvtFlat,
  Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11,
  Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10,
  Convert__Reg1_0__SSrc321_1,
  Convert__Reg1_0__SSrc321_1__SSrc321_2,
  Convert__Reg1_0__Tie0__Imm1_1,
  Convert__Reg1_0__SSrc641_1__SSrc641_2,
  Convert__Reg1_0__SSrc641_1,
  Convert__Reg1_0__SSrc641_1__SSrc321_2,
  Convert__SoppBrTarget1_0,
  Convert__Reg1_0__Reg1_1__Reg1_2,
  Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDLiteralOffset1_2,
  Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2,
  Convert__Reg1_0__Reg1_1,
  Convert__Reg1_0__Imm1_1,
  Convert__SSrc321_0__SSrc321_1,
  Convert__Imm1_0,
  Convert__Imm1_0__Imm1_1,
  Convert__SWaitCnt1_0,
  Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Reg1_8__Reg1_9__Imm1_10__Imm1_11__SCSrc321_12,
  Convert__Reg1_0__VSrc321_1__Reg1_2,
  ConvertCustom_cvtVOP3,
  Convert__Reg1_0__VCSrc321_1__Reg1_2,
  Convert__Reg1_0__VSrc321_1,
  Convert__Reg1_0__VSrc641_1,
  Convert__VSrc321_1__Reg1_2,
  Convert__VSrc641_1__Reg1_2,
  Convert__Reg1_0__imm_95_0__VCSrc321_1__imm_95_0__VCSrc321_2__imm_95_0__imm_95_0,
  Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3,
  Convert__Reg1_0__Reg1_1__Imm1_2__Imm1_3,
  Convert__Reg1_0__Tie0__Reg1_4__Imm1_5__Imm1_6,
  Convert__Reg1_0__VSrc321_1__Reg1_2__Tie0,
  Convert__Reg1_0__VCSrc321_1__Reg1_2__Imm1_3,
  Convert__Reg1_0__Reg1_1__SCSrc321_2,
  CVT_NUM_SIGNATURES
};

} // end anonymous namespace

static const uint8_t ConversionTable[CVT_NUM_SIGNATURES][27] = {
  // Convert_NoOperands
  { CVT_Done },
  // Convert__Imm1_1
  { CVT_95_addImmOperands, 2, CVT_Done },
  // Convert__Imm1_1__Imm1_3
  { CVT_95_addImmOperands, 2, CVT_95_addImmOperands, 4, CVT_Done },
  // Convert__Reg1_2__Imm1_0
  { CVT_95_Reg, 3, CVT_95_addImmOperands, 1, CVT_Done },
  // Convert__Reg1_4__imm_95_0__Imm1_0__Reg1_1__Reg1_2
  { CVT_95_Reg, 5, CVT_imm_95_0, 0, CVT_95_addImmOperands, 1, CVT_95_Reg, 2, CVT_95_Reg, 3, CVT_Done },
  // Convert__Reg1_0
  { CVT_95_Reg, 1, CVT_Done },
  // Convert__Imm1_2__Imm1_0
  { CVT_95_addImmOperands, 3, CVT_95_addImmOperands, 1, CVT_Done },
  // ConvertCustom_cvtMubuf
  { CVT_cvtMubuf, 0, CVT_Done },
  // ConvertCustom_cvtDS
  { CVT_cvtDS, 0, CVT_Done },
  // ConvertCustom_cvtDSOffset01
  { CVT_cvtDSOffset01, 0, CVT_Done },
  // Convert__Imm1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_8
  { CVT_95_addImmOperands, 1, CVT_95_addImmOperands, 2, CVT_95_addImmOperands, 3, CVT_95_addImmOperands, 4, CVT_95_addImmOperands, 5, CVT_95_Reg, 6, CVT_95_Reg, 7, CVT_95_Reg, 8, CVT_95_Reg, 9, CVT_Done },
  // ConvertCustom_cvtFlat
  { CVT_cvtFlat, 0, CVT_Done },
  // Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11
  { CVT_95_Reg, 1, CVT_95_addImmOperands, 2, CVT_95_addImmOperands, 3, CVT_95_addImmOperands, 4, CVT_95_addImmOperands, 5, CVT_95_addImmOperands, 6, CVT_95_addImmOperands, 7, CVT_95_addImmOperands, 8, CVT_95_addImmOperands, 9, CVT_95_Reg, 10, CVT_95_Reg, 11, CVT_95_Reg, 12, CVT_Done },
  // Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10
  { CVT_95_Reg, 1, CVT_95_addImmOperands, 2, CVT_95_addImmOperands, 3, CVT_95_addImmOperands, 4, CVT_95_addImmOperands, 5, CVT_95_addImmOperands, 6, CVT_95_addImmOperands, 7, CVT_95_addImmOperands, 8, CVT_95_addImmOperands, 9, CVT_95_Reg, 10, CVT_95_Reg, 11, CVT_Done },
  // Convert__Reg1_0__SSrc321_1
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_Done },
  // Convert__Reg1_0__SSrc321_1__SSrc321_2
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_95_addRegOrImmOperands, 3, CVT_Done },
  // Convert__Reg1_0__Tie0__Imm1_1
  { CVT_95_Reg, 1, CVT_Tied, 0, CVT_95_addImmOperands, 2, CVT_Done },
  // Convert__Reg1_0__SSrc641_1__SSrc641_2
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_95_addRegOrImmOperands, 3, CVT_Done },
  // Convert__Reg1_0__SSrc641_1
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_Done },
  // Convert__Reg1_0__SSrc641_1__SSrc321_2
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_95_addRegOrImmOperands, 3, CVT_Done },
  // Convert__SoppBrTarget1_0
  { CVT_95_addSoppBrTargetOperands, 1, CVT_Done },
  // Convert__Reg1_0__Reg1_1__Reg1_2
  { CVT_95_Reg, 1, CVT_95_Reg, 2, CVT_95_Reg, 3, CVT_Done },
  // Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDLiteralOffset1_2
  { CVT_95_Reg, 1, CVT_95_Reg, 2, CVT_95_addImmOperands, 3, CVT_Done },
  // Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2
  { CVT_95_Reg, 1, CVT_95_Reg, 2, CVT_95_addImmOperands, 3, CVT_Done },
  // Convert__Reg1_0__Reg1_1
  { CVT_95_Reg, 1, CVT_95_Reg, 2, CVT_Done },
  // Convert__Reg1_0__Imm1_1
  { CVT_95_Reg, 1, CVT_95_addImmOperands, 2, CVT_Done },
  // Convert__SSrc321_0__SSrc321_1
  { CVT_95_addRegOrImmOperands, 1, CVT_95_addRegOrImmOperands, 2, CVT_Done },
  // Convert__Imm1_0
  { CVT_95_addImmOperands, 1, CVT_Done },
  // Convert__Imm1_0__Imm1_1
  { CVT_95_addImmOperands, 1, CVT_95_addImmOperands, 2, CVT_Done },
  // Convert__SWaitCnt1_0
  { CVT_95_addImmOperands, 1, CVT_Done },
  // Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Reg1_8__Reg1_9__Imm1_10__Imm1_11__SCSrc321_12
  { CVT_95_Reg, 1, CVT_95_addImmOperands, 2, CVT_95_addImmOperands, 3, CVT_95_addImmOperands, 4, CVT_95_addImmOperands, 5, CVT_95_addImmOperands, 6, CVT_95_addImmOperands, 7, CVT_95_addImmOperands, 8, CVT_95_Reg, 9, CVT_95_Reg, 10, CVT_95_addImmOperands, 11, CVT_95_addImmOperands, 12, CVT_95_addRegOrImmOperands, 13, CVT_Done },
  // Convert__Reg1_0__VSrc321_1__Reg1_2
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_95_Reg, 3, CVT_Done },
  // ConvertCustom_cvtVOP3
  { CVT_cvtVOP3, 0, CVT_Done },
  // Convert__Reg1_0__VCSrc321_1__Reg1_2
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_95_Reg, 3, CVT_Done },
  // Convert__Reg1_0__VSrc321_1
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_Done },
  // Convert__Reg1_0__VSrc641_1
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_Done },
  // Convert__VSrc321_1__Reg1_2
  { CVT_95_addRegOrImmOperands, 2, CVT_95_Reg, 3, CVT_Done },
  // Convert__VSrc641_1__Reg1_2
  { CVT_95_addRegOrImmOperands, 2, CVT_95_Reg, 3, CVT_Done },
  // Convert__Reg1_0__imm_95_0__VCSrc321_1__imm_95_0__VCSrc321_2__imm_95_0__imm_95_0
  { CVT_95_Reg, 1, CVT_imm_95_0, 0, CVT_95_addRegOrImmOperands, 2, CVT_imm_95_0, 0, CVT_95_addRegOrImmOperands, 3, CVT_imm_95_0, 0, CVT_imm_95_0, 0, CVT_Done },
  // Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3
  { CVT_95_Reg, 1, CVT_95_addImmOperands, 2, CVT_95_addImmOperands, 3, CVT_95_addImmOperands, 4, CVT_Done },
  // Convert__Reg1_0__Reg1_1__Imm1_2__Imm1_3
  { CVT_95_Reg, 1, CVT_95_Reg, 2, CVT_95_addImmOperands, 3, CVT_95_addImmOperands, 4, CVT_Done },
  // Convert__Reg1_0__Tie0__Reg1_4__Imm1_5__Imm1_6
  { CVT_95_Reg, 1, CVT_Tied, 0, CVT_95_Reg, 5, CVT_95_addImmOperands, 6, CVT_95_addImmOperands, 7, CVT_Done },
  // Convert__Reg1_0__VSrc321_1__Reg1_2__Tie0
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_95_Reg, 3, CVT_Tied, 0, CVT_Done },
  // Convert__Reg1_0__VCSrc321_1__Reg1_2__Imm1_3
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_95_Reg, 3, CVT_95_addImmOperands, 4, CVT_Done },
  // Convert__Reg1_0__Reg1_1__SCSrc321_2
  { CVT_95_Reg, 1, CVT_95_Reg, 2, CVT_95_addRegOrImmOperands, 3, CVT_Done },
};

void AMDGPUAsmParser::
convertToMCInst(unsigned Kind, MCInst &Inst, unsigned Opcode,
                const OperandVector &Operands) {
  assert(Kind < CVT_NUM_SIGNATURES && "Invalid signature!");
  const uint8_t *Converter = ConversionTable[Kind];
  Inst.setOpcode(Opcode);
  for (const uint8_t *p = Converter; *p; p+= 2) {
    switch (*p) {
    default: llvm_unreachable("invalid conversion entry!");
    case CVT_Reg:
      static_cast<AMDGPUOperand&>(*Operands[*(p + 1)]).addRegOperands(Inst, 1);
      break;
    case CVT_Tied:
      Inst.addOperand(Inst.getOperand(*(p + 1)));
      break;
    case CVT_95_addImmOperands:
      static_cast<AMDGPUOperand&>(*Operands[*(p + 1)]).addImmOperands(Inst, 1);
      break;
    case CVT_95_Reg:
      static_cast<AMDGPUOperand&>(*Operands[*(p + 1)]).addRegOperands(Inst, 1);
      break;
    case CVT_imm_95_0:
      Inst.addOperand(MCOperand::createImm(0));
      break;
    case CVT_cvtMubuf:
      cvtMubuf(Inst, Operands);
      break;
    case CVT_cvtDS:
      cvtDS(Inst, Operands);
      break;
    case CVT_cvtDSOffset01:
      cvtDSOffset01(Inst, Operands);
      break;
    case CVT_cvtFlat:
      cvtFlat(Inst, Operands);
      break;
    case CVT_95_addRegOrImmOperands:
      static_cast<AMDGPUOperand&>(*Operands[*(p + 1)]).addRegOrImmOperands(Inst, 1);
      break;
    case CVT_95_addSoppBrTargetOperands:
      static_cast<AMDGPUOperand&>(*Operands[*(p + 1)]).addSoppBrTargetOperands(Inst, 1);
      break;
    case CVT_cvtVOP3:
      cvtVOP3(Inst, Operands);
      break;
    }
  }
}

void AMDGPUAsmParser::
convertToMapAndConstraints(unsigned Kind,
                           const OperandVector &Operands) {
  assert(Kind < CVT_NUM_SIGNATURES && "Invalid signature!");
  unsigned NumMCOperands = 0;
  const uint8_t *Converter = ConversionTable[Kind];
  for (const uint8_t *p = Converter; *p; p+= 2) {
    switch (*p) {
    default: llvm_unreachable("invalid conversion entry!");
    case CVT_Reg:
      Operands[*(p + 1)]->setMCOperandNum(NumMCOperands);
      Operands[*(p + 1)]->setConstraint("r");
      ++NumMCOperands;
      break;
    case CVT_Tied:
      ++NumMCOperands;
      break;
    case CVT_95_addImmOperands:
      Operands[*(p + 1)]->setMCOperandNum(NumMCOperands);
      Operands[*(p + 1)]->setConstraint("m");
      NumMCOperands += 1;
      break;
    case CVT_95_Reg:
      Operands[*(p + 1)]->setMCOperandNum(NumMCOperands);
      Operands[*(p + 1)]->setConstraint("r");
      NumMCOperands += 1;
      break;
    case CVT_imm_95_0:
      Operands[*(p + 1)]->setMCOperandNum(NumMCOperands);
      Operands[*(p + 1)]->setConstraint("");
      ++NumMCOperands;
      break;
    case CVT_95_addRegOrImmOperands:
      Operands[*(p + 1)]->setMCOperandNum(NumMCOperands);
      Operands[*(p + 1)]->setConstraint("m");
      NumMCOperands += 1;
      break;
    case CVT_95_addSoppBrTargetOperands:
      Operands[*(p + 1)]->setMCOperandNum(NumMCOperands);
      Operands[*(p + 1)]->setConstraint("m");
      NumMCOperands += 1;
      break;
    }
  }
}

namespace {

/// MatchClassKind - The kinds of classes which participate in
/// instruction matching.
enum MatchClassKind {
  InvalidMatchClass = 0,
  MCK__COLON_, // ':'
  MCK__64_, // '@'
  MCK_POP_COLON_, // 'POP:'
  MCK__91_, // '['
  MCK__93_, // ']'
  MCK_addr64, // 'addr64'
  MCK_dst1, // 'dst1'
  MCK_gds, // 'gds'
  MCK_glc, // 'glc'
  MCK_idxen, // 'idxen'
  MCK_offen, // 'offen'
  MCK_R600_TReg32_X, // register class 'R600_TReg32_X'
  MCK_R600_TReg32_Y, // register class 'R600_TReg32_Y'
  MCK_R600_TReg32_Z, // register class 'R600_TReg32_Z'
  MCK_R600_TReg32_W, // register class 'R600_TReg32_W'
  MCK_R600_TReg32, // register class 'R600_TReg32'
  MCK_R600_Addr, // register class 'R600_Addr'
  MCK_R600_KC0_Y, // register class 'R600_KC0_Y'
  MCK_R600_KC0_Z, // register class 'R600_KC0_Z'
  MCK_R600_KC0_W, // register class 'R600_KC0_W'
  MCK_R600_KC1_X, // register class 'R600_KC1_X'
  MCK_R600_KC1_Y, // register class 'R600_KC1_Y'
  MCK_R600_KC1_Z, // register class 'R600_KC1_Z'
  MCK_R600_KC1_W, // register class 'R600_KC1_W'
  MCK_R600_KC1, // register class 'R600_KC1'
  MCK_R600_ArrayBase, // register class 'R600_ArrayBase'
  MCK_Reg34, // derived register class
  MCK_R600_LDS_SRC_REG, // register class 'R600_LDS_SRC_REG'
  MCK_R600_Reg32, // register class 'R600_Reg32'
  MCK_R600_Addr_Y, // register class 'R600_Addr_Y'
  MCK_R600_Addr_Z, // register class 'R600_Addr_Z'
  MCK_R600_Addr_W, // register class 'R600_Addr_W'
  MCK_R600_Reg128, // register class 'R600_Reg128'
  MCK_R600_Reg64, // register class 'R600_Reg64'
  MCK_Reg12, // derived register class
  MCK_Reg14, // derived register class
  MCK_Reg15, // derived register class
  MCK_Reg16, // derived register class
  MCK_R600_Reg128Vertical, // register class 'R600_Reg128Vertical'
  MCK_Reg18, // derived register class
  MCK_Reg19, // derived register class
  MCK_Reg20, // derived register class
  MCK_Reg21, // derived register class
  MCK_R600_Reg64Vertical, // register class 'R600_Reg64Vertical'
  MCK_R600_KC0_X, // register class 'R600_KC0_X'
  MCK_R600_KC0, // register class 'R600_KC0'
  MCK_R600_Predicate_Bit, // register class 'R600_Predicate_Bit'
  MCK_R600_Predicate, // register class 'R600_Predicate'
  MCK_M0, // register class 'M0'
  MCK_SGPR_32, // register class 'SGPR_32'
  MCK_SReg_32, // register class 'SReg_32'
  MCK_VGPR_32, // register class 'VGPR_32,VReg_1'
  MCK_VS_32, // register class 'VS_32'
  MCK_VCC, // register class 'VCC'
  MCK_SReg_64, // register class 'SReg_64'
  MCK_VS_64, // register class 'VS_64'
  MCK_SReg_128, // register class 'SReg_128'
  MCK_SReg_256, // register class 'SReg_256'
  MCK_SReg_512, // register class 'SReg_512'
  MCK_SGPR_64, // register class 'SGPR_64'
  MCK_VReg_128, // register class 'VReg_128'
  MCK_VReg_256, // register class 'VReg_256'
  MCK_VReg_512, // register class 'VReg_512'
  MCK_VReg_64, // register class 'VReg_64'
  MCK_VReg_96, // register class 'VReg_96'
  MCK_Clamp, // user defined class 'ClampMatchClass'
  MCK_DSOffset1, // user defined class 'DSOffset01MatchClass'
  MCK_DSOffsetparseDSOffsetOptional, // user defined class 'DSOffsetGDSMatchClass'
  MCK_DSOffsetparseDSOptionalOps, // user defined class 'DSOffsetMatchClass'
  MCK_GDSparseDSOff01OptionalOps, // user defined class 'GDS01MatchClass'
  MCK_GDSparseDSOptionalOps, // user defined class 'GDSMatchClass'
  MCK_GLCparseFlatOptionalOps, // user defined class 'GLCFlatMatchClass'
  MCK_GLCparseMubufOptionalOps, // user defined class 'GLCMubufMatchClass'
  MCK_Imm, // user defined class 'ImmAsmOperand'
  MCK_RegWithInputMods, // user defined class 'InputModsMatchClass'
  MCK_MubufOffset, // user defined class 'MubufOffsetMatchClass'
  MCK_OMod, // user defined class 'OModMatchClass'
  MCK_SLCparseFlatAtomicOptionalOps, // user defined class 'SLCFlatAtomicMatchClass'
  MCK_SLCparseFlatOptionalOps, // user defined class 'SLCFlatMatchClass'
  MCK_SLCparseMubufOptionalOps, // user defined class 'SLCMubufMatchClass'
  MCK_SMRDOffsetisSMRDLiteralOffset, // user defined class 'SMRDLiteralOffsetMatchClass'
  MCK_SMRDOffsetisSMRDOffset, // user defined class 'SMRDOffsetMatchClass'
  MCK_SWaitCnt, // user defined class 'SWaitMatchClass'
  MCK_SoppBrTarget, // user defined class 'SoppBrTarget'
  MCK_TFEparseFlatAtomicOptionalOps, // user defined class 'TFEFlatAtomicMatchClass'
  MCK_TFEparseFlatOptionalOps, // user defined class 'TFEFlatMatchClass'
  MCK_TFEparseMubufOptionalOps, // user defined class 'TFEMubufMatchClass'
  MCK_SSrc32, // user defined class 'anonymous_596'
  MCK_SSrc64, // user defined class 'anonymous_597'
  MCK_SCSrc32, // user defined class 'anonymous_598'
  MCK_VSrc32, // user defined class 'anonymous_599'
  MCK_VSrc64, // user defined class 'anonymous_600'
  MCK_VCSrc32, // user defined class 'anonymous_601'
  MCK_VCSrc64, // user defined class 'anonymous_602'
  NumMatchClassKinds
};

}

static MatchClassKind matchTokenString(StringRef Name) {
  switch (Name.size()) {
  default: break;
  case 1:	 // 4 strings to match.
    switch (Name[0]) {
    default: break;
    case ':':	 // 1 string to match.
      return MCK__COLON_;	 // ":"
    case '@':	 // 1 string to match.
      return MCK__64_;	 // "@"
    case '[':	 // 1 string to match.
      return MCK__91_;	 // "["
    case ']':	 // 1 string to match.
      return MCK__93_;	 // "]"
    }
    break;
  case 3:	 // 2 strings to match.
    if (Name[0] != 'g')
      break;
    switch (Name[1]) {
    default: break;
    case 'd':	 // 1 string to match.
      if (Name[2] != 's')
        break;
      return MCK_gds;	 // "gds"
    case 'l':	 // 1 string to match.
      if (Name[2] != 'c')
        break;
      return MCK_glc;	 // "glc"
    }
    break;
  case 4:	 // 2 strings to match.
    switch (Name[0]) {
    default: break;
    case 'P':	 // 1 string to match.
      if (memcmp(Name.data()+1, "OP:", 3))
        break;
      return MCK_POP_COLON_;	 // "POP:"
    case 'd':	 // 1 string to match.
      if (memcmp(Name.data()+1, "st1", 3))
        break;
      return MCK_dst1;	 // "dst1"
    }
    break;
  case 5:	 // 2 strings to match.
    switch (Name[0]) {
    default: break;
    case 'i':	 // 1 string to match.
      if (memcmp(Name.data()+1, "dxen", 4))
        break;
      return MCK_idxen;	 // "idxen"
    case 'o':	 // 1 string to match.
      if (memcmp(Name.data()+1, "ffen", 4))
        break;
      return MCK_offen;	 // "offen"
    }
    break;
  case 6:	 // 1 string to match.
    if (memcmp(Name.data()+0, "addr64", 6))
      break;
    return MCK_addr64;	 // "addr64"
  }
  return InvalidMatchClass;
}

/// isSubclass - Compute whether \p A is a subclass of \p B.
static bool isSubclass(MatchClassKind A, MatchClassKind B) {
  if (A == B)
    return true;

  switch (A) {
  default:
    return false;

  case MCK_R600_TReg32_X:
    switch (B) {
    default: return false;
    case MCK_R600_TReg32: return true;
    case MCK_R600_Reg32: return true;
    }

  case MCK_R600_TReg32_Y:
    switch (B) {
    default: return false;
    case MCK_R600_TReg32: return true;
    case MCK_R600_Reg32: return true;
    }

  case MCK_R600_TReg32_Z:
    switch (B) {
    default: return false;
    case MCK_R600_TReg32: return true;
    case MCK_R600_Reg32: return true;
    }

  case MCK_R600_TReg32_W:
    switch (B) {
    default: return false;
    case MCK_R600_TReg32: return true;
    case MCK_R600_Reg32: return true;
    }

  case MCK_R600_TReg32:
    return B == MCK_R600_Reg32;

  case MCK_R600_Addr:
    return B == MCK_R600_Reg32;

  case MCK_R600_KC0_Y:
    switch (B) {
    default: return false;
    case MCK_R600_Reg32: return true;
    case MCK_R600_KC0: return true;
    }

  case MCK_R600_KC0_Z:
    switch (B) {
    default: return false;
    case MCK_R600_Reg32: return true;
    case MCK_R600_KC0: return true;
    }

  case MCK_R600_KC0_W:
    switch (B) {
    default: return false;
    case MCK_R600_Reg32: return true;
    case MCK_R600_KC0: return true;
    }

  case MCK_R600_KC1_X:
    switch (B) {
    default: return false;
    case MCK_R600_KC1: return true;
    case MCK_R600_Reg32: return true;
    }

  case MCK_R600_KC1_Y:
    switch (B) {
    default: return false;
    case MCK_R600_KC1: return true;
    case MCK_R600_Reg32: return true;
    }

  case MCK_R600_KC1_Z:
    switch (B) {
    default: return false;
    case MCK_R600_KC1: return true;
    case MCK_R600_Reg32: return true;
    }

  case MCK_R600_KC1_W:
    switch (B) {
    default: return false;
    case MCK_R600_KC1: return true;
    case MCK_R600_Reg32: return true;
    }

  case MCK_R600_KC1:
    return B == MCK_R600_Reg32;

  case MCK_R600_ArrayBase:
    return B == MCK_R600_Reg32;

  case MCK_Reg34:
    switch (B) {
    default: return false;
    case MCK_R600_LDS_SRC_REG: return true;
    case MCK_R600_Reg32: return true;
    }

  case MCK_Reg12:
    return B == MCK_R600_Reg128Vertical;

  case MCK_Reg14:
    return B == MCK_R600_Reg128Vertical;

  case MCK_Reg15:
    return B == MCK_R600_Reg128Vertical;

  case MCK_Reg16:
    return B == MCK_R600_Reg128Vertical;

  case MCK_Reg18:
    return B == MCK_R600_Reg64Vertical;

  case MCK_Reg19:
    return B == MCK_R600_Reg64Vertical;

  case MCK_Reg20:
    return B == MCK_R600_Reg64Vertical;

  case MCK_Reg21:
    return B == MCK_R600_Reg64Vertical;

  case MCK_R600_KC0_X:
    switch (B) {
    default: return false;
    case MCK_R600_Reg32: return true;
    case MCK_R600_KC0: return true;
    }

  case MCK_R600_KC0:
    return B == MCK_R600_Reg32;

  case MCK_M0:
    switch (B) {
    default: return false;
    case MCK_SReg_32: return true;
    case MCK_VS_32: return true;
    }

  case MCK_SGPR_32:
    switch (B) {
    default: return false;
    case MCK_SReg_32: return true;
    case MCK_VS_32: return true;
    }

  case MCK_SReg_32:
    return B == MCK_VS_32;

  case MCK_VGPR_32:
    return B == MCK_VS_32;

  case MCK_VCC:
    switch (B) {
    default: return false;
    case MCK_SReg_64: return true;
    case MCK_VS_64: return true;
    }

  case MCK_SReg_64:
    return B == MCK_VS_64;

  case MCK_SGPR_64:
    switch (B) {
    default: return false;
    case MCK_SReg_64: return true;
    case MCK_VS_64: return true;
    }

  case MCK_VReg_64:
    return B == MCK_VS_64;
  }
}

static unsigned validateOperandClass(MCParsedAsmOperand &GOp, MatchClassKind Kind) {
  AMDGPUOperand &Operand = (AMDGPUOperand&)GOp;
  if (Kind == InvalidMatchClass)
    return MCTargetAsmParser::Match_InvalidOperand;

  if (Operand.isToken())
    return isSubclass(matchTokenString(Operand.getToken()), Kind) ?
             MCTargetAsmParser::Match_Success :
             MCTargetAsmParser::Match_InvalidOperand;

  // 'Clamp' class
  if (Kind == MCK_Clamp) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'DSOffset1' class
  if (Kind == MCK_DSOffset1) {
    if (Operand.isDSOffset01())
      return MCTargetAsmParser::Match_Success;
  }

  // 'DSOffsetparseDSOffsetOptional' class
  if (Kind == MCK_DSOffsetparseDSOffsetOptional) {
    if (Operand.isDSOffset())
      return MCTargetAsmParser::Match_Success;
  }

  // 'DSOffsetparseDSOptionalOps' class
  if (Kind == MCK_DSOffsetparseDSOptionalOps) {
    if (Operand.isDSOffset())
      return MCTargetAsmParser::Match_Success;
  }

  // 'GDSparseDSOff01OptionalOps' class
  if (Kind == MCK_GDSparseDSOff01OptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'GDSparseDSOptionalOps' class
  if (Kind == MCK_GDSparseDSOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'GLCparseFlatOptionalOps' class
  if (Kind == MCK_GLCparseFlatOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'GLCparseMubufOptionalOps' class
  if (Kind == MCK_GLCparseMubufOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'Imm' class
  if (Kind == MCK_Imm) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'RegWithInputMods' class
  if (Kind == MCK_RegWithInputMods) {
    if (Operand.isRegWithInputMods())
      return MCTargetAsmParser::Match_Success;
  }

  // 'MubufOffset' class
  if (Kind == MCK_MubufOffset) {
    if (Operand.isMubufOffset())
      return MCTargetAsmParser::Match_Success;
  }

  // 'OMod' class
  if (Kind == MCK_OMod) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SLCparseFlatAtomicOptionalOps' class
  if (Kind == MCK_SLCparseFlatAtomicOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SLCparseFlatOptionalOps' class
  if (Kind == MCK_SLCparseFlatOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SLCparseMubufOptionalOps' class
  if (Kind == MCK_SLCparseMubufOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SMRDOffsetisSMRDLiteralOffset' class
  if (Kind == MCK_SMRDOffsetisSMRDLiteralOffset) {
    if (Operand.isSMRDLiteralOffset())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SMRDOffsetisSMRDOffset' class
  if (Kind == MCK_SMRDOffsetisSMRDOffset) {
    if (Operand.isSMRDOffset())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SWaitCnt' class
  if (Kind == MCK_SWaitCnt) {
    if (Operand.isSWaitCnt())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SoppBrTarget' class
  if (Kind == MCK_SoppBrTarget) {
    if (Operand.isSoppBrTarget())
      return MCTargetAsmParser::Match_Success;
  }

  // 'TFEparseFlatAtomicOptionalOps' class
  if (Kind == MCK_TFEparseFlatAtomicOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'TFEparseFlatOptionalOps' class
  if (Kind == MCK_TFEparseFlatOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'TFEparseMubufOptionalOps' class
  if (Kind == MCK_TFEparseMubufOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SSrc32' class
  if (Kind == MCK_SSrc32) {
    if (Operand.isSSrc32())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SSrc64' class
  if (Kind == MCK_SSrc64) {
    if (Operand.isSSrc64())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SCSrc32' class
  if (Kind == MCK_SCSrc32) {
    if (Operand.isSCSrc32())
      return MCTargetAsmParser::Match_Success;
  }

  // 'VSrc32' class
  if (Kind == MCK_VSrc32) {
    if (Operand.isVSrc32())
      return MCTargetAsmParser::Match_Success;
  }

  // 'VSrc64' class
  if (Kind == MCK_VSrc64) {
    if (Operand.isVSrc64())
      return MCTargetAsmParser::Match_Success;
  }

  // 'VCSrc32' class
  if (Kind == MCK_VCSrc32) {
    if (Operand.isVCSrc32())
      return MCTargetAsmParser::Match_Success;
  }

  // 'VCSrc64' class
  if (Kind == MCK_VCSrc64) {
    if (Operand.isVCSrc64())
      return MCTargetAsmParser::Match_Success;
  }

  if (Operand.isReg()) {
    MatchClassKind OpKind;
    switch (Operand.getReg()) {
    default: OpKind = InvalidMatchClass; break;
    case AMDGPU::T0_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T0_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T0_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T0_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T1_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T1_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T1_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T1_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T2_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T2_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T2_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T2_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T3_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T3_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T3_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T3_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T4_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T4_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T4_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T4_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T5_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T5_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T5_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T5_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T6_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T6_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T6_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T6_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T7_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T7_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T7_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T7_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T8_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T8_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T8_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T8_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T9_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T9_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T9_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T9_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T10_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T10_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T10_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T10_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T11_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T11_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T11_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T11_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T12_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T12_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T12_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T12_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T13_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T13_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T13_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T13_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T14_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T14_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T14_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T14_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T15_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T15_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T15_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T15_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T16_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T16_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T16_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T16_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T17_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T17_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T17_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T17_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T18_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T18_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T18_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T18_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T19_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T19_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T19_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T19_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T20_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T20_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T20_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T20_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T21_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T21_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T21_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T21_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T22_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T22_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T22_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T22_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T23_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T23_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T23_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T23_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T24_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T24_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T24_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T24_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T25_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T25_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T25_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T25_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T26_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T26_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T26_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T26_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T27_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T27_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T27_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T27_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T28_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T28_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T28_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T28_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T29_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T29_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T29_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T29_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T30_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T30_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T30_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T30_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T31_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T31_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T31_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T31_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T32_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T32_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T32_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T32_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T33_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T33_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T33_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T33_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T34_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T34_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T34_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T34_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T35_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T35_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T35_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T35_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T36_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T36_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T36_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T36_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T37_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T37_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T37_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T37_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T38_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T38_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T38_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T38_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T39_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T39_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T39_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T39_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T40_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T40_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T40_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T40_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T41_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T41_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T41_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T41_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T42_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T42_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T42_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T42_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T43_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T43_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T43_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T43_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T44_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T44_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T44_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T44_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T45_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T45_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T45_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T45_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T46_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T46_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T46_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T46_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T47_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T47_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T47_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T47_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T48_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T48_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T48_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T48_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T49_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T49_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T49_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T49_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T50_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T50_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T50_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T50_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T51_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T51_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T51_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T51_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T52_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T52_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T52_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T52_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T53_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T53_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T53_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T53_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T54_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T54_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T54_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T54_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T55_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T55_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T55_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T55_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T56_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T56_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T56_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T56_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T57_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T57_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T57_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T57_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T58_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T58_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T58_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T58_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T59_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T59_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T59_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T59_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T60_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T60_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T60_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T60_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T61_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T61_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T61_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T61_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T62_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T62_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T62_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T62_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T63_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T63_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T63_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T63_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T64_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T64_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T64_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T64_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T65_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T65_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T65_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T65_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T66_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T66_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T66_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T66_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T67_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T67_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T67_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T67_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T68_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T68_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T68_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T68_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T69_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T69_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T69_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T69_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T70_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T70_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T70_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T70_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T71_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T71_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T71_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T71_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T72_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T72_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T72_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T72_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T73_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T73_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T73_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T73_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T74_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T74_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T74_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T74_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T75_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T75_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T75_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T75_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T76_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T76_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T76_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T76_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T77_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T77_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T77_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T77_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T78_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T78_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T78_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T78_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T79_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T79_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T79_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T79_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T80_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T80_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T80_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T80_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T81_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T81_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T81_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T81_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T82_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T82_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T82_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T82_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T83_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T83_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T83_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T83_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T84_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T84_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T84_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T84_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T85_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T85_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T85_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T85_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T86_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T86_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T86_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T86_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T87_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T87_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T87_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T87_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T88_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T88_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T88_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T88_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T89_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T89_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T89_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T89_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T90_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T90_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T90_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T90_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T91_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T91_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T91_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T91_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T92_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T92_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T92_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T92_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T93_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T93_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T93_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T93_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T94_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T94_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T94_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T94_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T95_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T95_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T95_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T95_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T96_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T96_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T96_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T96_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T97_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T97_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T97_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T97_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T98_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T98_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T98_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T98_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T99_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T99_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T99_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T99_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T100_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T100_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T100_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T100_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T101_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T101_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T101_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T101_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T102_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T102_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T102_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T102_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T103_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T103_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T103_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T103_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T104_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T104_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T104_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T104_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T105_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T105_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T105_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T105_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T106_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T106_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T106_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T106_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T107_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T107_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T107_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T107_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T108_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T108_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T108_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T108_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T109_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T109_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T109_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T109_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T110_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T110_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T110_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T110_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T111_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T111_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T111_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T111_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T112_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T112_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T112_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T112_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T113_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T113_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T113_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T113_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T114_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T114_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T114_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T114_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T115_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T115_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T115_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T115_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T116_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T116_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T116_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T116_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T117_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T117_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T117_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T117_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T118_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T118_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T118_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T118_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T119_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T119_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T119_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T119_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T120_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T120_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T120_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T120_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T121_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T121_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T121_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T121_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T122_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T122_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T122_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T122_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T123_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T123_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T123_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T123_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T124_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T124_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T124_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T124_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T125_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T125_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T125_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T125_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T126_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T126_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T126_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T126_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T127_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T127_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T127_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T127_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::Addr0_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr0_Y: OpKind = MCK_R600_Addr_Y; break;
    case AMDGPU::Addr0_Z: OpKind = MCK_R600_Addr_Z; break;
    case AMDGPU::Addr0_W: OpKind = MCK_R600_Addr_W; break;
    case AMDGPU::Addr1_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr2_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr3_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr4_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr5_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr6_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr7_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr8_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr9_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr10_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr11_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr12_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr13_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr14_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr15_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr16_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr17_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr18_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr19_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr20_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr21_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr22_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr23_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr24_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr25_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr26_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr27_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr28_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr29_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr30_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr31_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr32_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr33_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr34_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr35_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr36_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr37_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr38_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr39_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr40_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr41_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr42_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr43_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr44_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr45_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr46_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr47_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr48_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr49_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr50_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr51_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr52_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr53_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr54_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr55_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr56_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr57_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr58_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr59_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr60_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr61_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr62_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr63_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr64_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr65_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr66_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr67_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr68_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr69_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr70_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr71_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr72_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr73_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr74_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr75_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr76_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr77_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr78_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr79_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr80_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr81_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr82_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr83_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr84_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr85_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr86_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr87_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr88_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr89_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr90_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr91_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr92_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr93_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr94_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr95_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr96_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr97_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr98_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr99_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr100_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr101_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr102_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr103_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr104_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr105_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr106_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr107_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr108_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr109_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr110_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr111_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr112_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr113_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr114_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr115_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr116_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr117_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr118_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr119_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr120_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr121_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr122_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr123_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr124_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr125_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr126_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr127_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::T0_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T1_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T2_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T3_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T4_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T5_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T6_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T7_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T8_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T9_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T10_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T11_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T12_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T13_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T14_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T15_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T16_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T17_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T18_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T19_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T20_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T21_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T22_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T23_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T24_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T25_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T26_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T27_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T28_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T29_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T30_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T31_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T32_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T33_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T34_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T35_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T36_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T37_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T38_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T39_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T40_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T41_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T42_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T43_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T44_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T45_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T46_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T47_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T48_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T49_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T50_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T51_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T52_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T53_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T54_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T55_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T56_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T57_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T58_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T59_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T60_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T61_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T62_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T63_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T64_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T65_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T66_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T67_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T68_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T69_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T70_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T71_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T72_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T73_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T74_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T75_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T76_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T77_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T78_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T79_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T80_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T81_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T82_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T83_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T84_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T85_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T86_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T87_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T88_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T89_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T90_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T91_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T92_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T93_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T94_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T95_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T96_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T97_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T98_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T99_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T100_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T101_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T102_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T103_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T104_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T105_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T106_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T107_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T108_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T109_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T110_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T111_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T112_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T113_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T114_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T115_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T116_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T117_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T118_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T119_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T120_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T121_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T122_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T123_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T124_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T125_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T126_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T127_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T0_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T1_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T2_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T3_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T4_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T5_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T6_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T7_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T8_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T9_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T10_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T11_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T12_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T13_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T14_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T15_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T16_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T17_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T18_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T19_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T20_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T21_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T22_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T23_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T24_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T25_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T26_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T27_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T28_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T29_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T30_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T31_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T32_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T33_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T34_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T35_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T36_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T37_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T38_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T39_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T40_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T41_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T42_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T43_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T44_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T45_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T46_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T47_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T48_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T49_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T50_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T51_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T52_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T53_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T54_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T55_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T56_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T57_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T58_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T59_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T60_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T61_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T62_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T63_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::V0123_X: OpKind = MCK_Reg12; break;
    case AMDGPU::V0123_Y: OpKind = MCK_Reg14; break;
    case AMDGPU::V0123_Z: OpKind = MCK_Reg15; break;
    case AMDGPU::V0123_W: OpKind = MCK_Reg16; break;
    case AMDGPU::V01_X: OpKind = MCK_Reg18; break;
    case AMDGPU::V01_Y: OpKind = MCK_Reg19; break;
    case AMDGPU::V01_Z: OpKind = MCK_Reg20; break;
    case AMDGPU::V01_W: OpKind = MCK_Reg21; break;
    case AMDGPU::V23_X: OpKind = MCK_Reg18; break;
    case AMDGPU::V23_Y: OpKind = MCK_Reg19; break;
    case AMDGPU::V23_Z: OpKind = MCK_Reg20; break;
    case AMDGPU::V23_W: OpKind = MCK_Reg21; break;
    case AMDGPU::KC0_159_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_159_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_159_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_159_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_158_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_158_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_158_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_158_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_157_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_157_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_157_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_157_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_156_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_156_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_156_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_156_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_155_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_155_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_155_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_155_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_154_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_154_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_154_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_154_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_153_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_153_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_153_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_153_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_152_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_152_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_152_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_152_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_151_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_151_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_151_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_151_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_150_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_150_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_150_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_150_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_149_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_149_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_149_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_149_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_148_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_148_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_148_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_148_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_147_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_147_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_147_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_147_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_146_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_146_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_146_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_146_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_145_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_145_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_145_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_145_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_144_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_144_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_144_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_144_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_143_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_143_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_143_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_143_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_142_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_142_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_142_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_142_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_141_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_141_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_141_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_141_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_140_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_140_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_140_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_140_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_139_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_139_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_139_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_139_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_138_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_138_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_138_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_138_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_137_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_137_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_137_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_137_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_136_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_136_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_136_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_136_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_135_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_135_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_135_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_135_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_134_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_134_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_134_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_134_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_133_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_133_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_133_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_133_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_132_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_132_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_132_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_132_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_131_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_131_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_131_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_131_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_130_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_130_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_130_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_130_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_129_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_129_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_129_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_129_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_128_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_128_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_128_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_128_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC1_191_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_191_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_191_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_191_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_190_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_190_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_190_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_190_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_189_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_189_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_189_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_189_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_188_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_188_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_188_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_188_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_187_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_187_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_187_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_187_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_186_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_186_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_186_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_186_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_185_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_185_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_185_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_185_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_184_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_184_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_184_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_184_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_183_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_183_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_183_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_183_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_182_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_182_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_182_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_182_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_181_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_181_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_181_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_181_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_180_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_180_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_180_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_180_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_179_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_179_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_179_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_179_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_178_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_178_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_178_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_178_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_177_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_177_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_177_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_177_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_176_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_176_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_176_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_176_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_175_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_175_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_175_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_175_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_174_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_174_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_174_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_174_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_173_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_173_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_173_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_173_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_172_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_172_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_172_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_172_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_171_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_171_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_171_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_171_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_170_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_170_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_170_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_170_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_169_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_169_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_169_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_169_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_168_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_168_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_168_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_168_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_167_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_167_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_167_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_167_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_166_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_166_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_166_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_166_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_165_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_165_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_165_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_165_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_164_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_164_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_164_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_164_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_163_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_163_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_163_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_163_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_162_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_162_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_162_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_162_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_161_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_161_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_161_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_161_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_160_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_160_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_160_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_160_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::ArrayBase448: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase449: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase450: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase451: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase452: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase453: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase454: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase455: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase456: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase457: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase458: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase459: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase460: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase461: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase462: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase463: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase464: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase465: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase466: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase467: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase468: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase469: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase470: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase471: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase472: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase473: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase474: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase475: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase476: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase477: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase478: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase479: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase480: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::OQA: OpKind = MCK_R600_LDS_SRC_REG; break;
    case AMDGPU::OQB: OpKind = MCK_R600_LDS_SRC_REG; break;
    case AMDGPU::OQAP: OpKind = MCK_Reg34; break;
    case AMDGPU::OQBP: OpKind = MCK_R600_LDS_SRC_REG; break;
    case AMDGPU::LDS_DIRECT_A: OpKind = MCK_R600_LDS_SRC_REG; break;
    case AMDGPU::LDS_DIRECT_B: OpKind = MCK_R600_LDS_SRC_REG; break;
    case AMDGPU::ZERO: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::ONE: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::NEG_ONE: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::ONE_INT: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::HALF: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::NEG_HALF: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::ALU_LITERAL_X: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::PV_X: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::PREDICATE_BIT: OpKind = MCK_R600_Predicate_Bit; break;
    case AMDGPU::PRED_SEL_OFF: OpKind = MCK_R600_Predicate; break;
    case AMDGPU::PRED_SEL_ZERO: OpKind = MCK_R600_Predicate; break;
    case AMDGPU::PRED_SEL_ONE: OpKind = MCK_R600_Predicate; break;
    case AMDGPU::AR_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::ALU_CONST: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::ALU_PARAM: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::VCC_LO: OpKind = MCK_SReg_32; break;
    case AMDGPU::VCC_HI: OpKind = MCK_SReg_32; break;
    case AMDGPU::VCC: OpKind = MCK_VCC; break;
    case AMDGPU::EXEC_LO: OpKind = MCK_SReg_32; break;
    case AMDGPU::EXEC_HI: OpKind = MCK_SReg_32; break;
    case AMDGPU::EXEC: OpKind = MCK_SReg_64; break;
    case AMDGPU::M0: OpKind = MCK_M0; break;
    case AMDGPU::FLAT_SCR_LO: OpKind = MCK_SReg_32; break;
    case AMDGPU::FLAT_SCR_HI: OpKind = MCK_SReg_32; break;
    case AMDGPU::FLAT_SCR: OpKind = MCK_SReg_64; break;
    case AMDGPU::SGPR0: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR1: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR2: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR3: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR4: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR5: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR6: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR7: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR8: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR9: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR10: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR11: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR12: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR13: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR14: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR15: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR16: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR17: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR18: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR19: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR20: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR21: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR22: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR23: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR24: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR25: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR26: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR27: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR28: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR29: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR30: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR31: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR32: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR33: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR34: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR35: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR36: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR37: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR38: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR39: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR40: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR41: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR42: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR43: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR44: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR45: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR46: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR47: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR48: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR49: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR50: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR51: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR52: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR53: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR54: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR55: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR56: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR57: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR58: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR59: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR60: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR61: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR62: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR63: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR64: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR65: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR66: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR67: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR68: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR69: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR70: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR71: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR72: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR73: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR74: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR75: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR76: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR77: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR78: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR79: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR80: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR81: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR82: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR83: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR84: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR85: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR86: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR87: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR88: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR89: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR90: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR91: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR92: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR93: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR94: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR95: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR96: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR97: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR98: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR99: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR100: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR101: OpKind = MCK_SGPR_32; break;
    case AMDGPU::VGPR0: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR1: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR2: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR3: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR4: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR5: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR6: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR7: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR8: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR9: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR10: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR11: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR12: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR13: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR14: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR15: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR16: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR17: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR18: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR19: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR20: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR21: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR22: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR23: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR24: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR25: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR26: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR27: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR28: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR29: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR30: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR31: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR32: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR33: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR34: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR35: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR36: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR37: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR38: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR39: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR40: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR41: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR42: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR43: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR44: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR45: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR46: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR47: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR48: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR49: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR50: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR51: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR52: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR53: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR54: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR55: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR56: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR57: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR58: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR59: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR60: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR61: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR62: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR63: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR64: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR65: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR66: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR67: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR68: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR69: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR70: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR71: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR72: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR73: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR74: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR75: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR76: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR77: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR78: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR79: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR80: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR81: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR82: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR83: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR84: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR85: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR86: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR87: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR88: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR89: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR90: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR91: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR92: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR93: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR94: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR95: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR96: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR97: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR98: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR99: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR100: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR101: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR102: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR103: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR104: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR105: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR106: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR107: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR108: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR109: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR110: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR111: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR112: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR113: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR114: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR115: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR116: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR117: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR118: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR119: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR120: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR121: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR122: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR123: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR124: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR125: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR126: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR127: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR128: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR129: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR130: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR131: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR132: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR133: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR134: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR135: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR136: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR137: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR138: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR139: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR140: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR141: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR142: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR143: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR144: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR145: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR146: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR147: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR148: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR149: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR150: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR151: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR152: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR153: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR154: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR155: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR156: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR157: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR158: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR159: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR160: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR161: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR162: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR163: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR164: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR165: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR166: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR167: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR168: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR169: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR170: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR171: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR172: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR173: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR174: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR175: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR176: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR177: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR178: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR179: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR180: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR181: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR182: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR183: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR184: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR185: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR186: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR187: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR188: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR189: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR190: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR191: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR192: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR193: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR194: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR195: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR196: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR197: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR198: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR199: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR200: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR201: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR202: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR203: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR204: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR205: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR206: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR207: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR208: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR209: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR210: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR211: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR212: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR213: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR214: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR215: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR216: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR217: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR218: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR219: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR220: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR221: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR222: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR223: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR224: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR225: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR226: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR227: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR228: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR229: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR230: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR231: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR232: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR233: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR234: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR235: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR236: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR237: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR238: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR239: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR240: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR241: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR242: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR243: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR244: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR245: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR246: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR247: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR248: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR249: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR250: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR251: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR252: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR253: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR254: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR255: OpKind = MCK_VGPR_32; break;
    case AMDGPU::SGPR0_SGPR1_SGPR2_SGPR3: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR4_SGPR5_SGPR6_SGPR7: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR8_SGPR9_SGPR10_SGPR11: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR12_SGPR13_SGPR14_SGPR15: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR16_SGPR17_SGPR18_SGPR19: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR20_SGPR21_SGPR22_SGPR23: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR24_SGPR25_SGPR26_SGPR27: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR28_SGPR29_SGPR30_SGPR31: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR32_SGPR33_SGPR34_SGPR35: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR36_SGPR37_SGPR38_SGPR39: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR40_SGPR41_SGPR42_SGPR43: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR44_SGPR45_SGPR46_SGPR47: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR48_SGPR49_SGPR50_SGPR51: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR52_SGPR53_SGPR54_SGPR55: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR56_SGPR57_SGPR58_SGPR59: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR60_SGPR61_SGPR62_SGPR63: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR64_SGPR65_SGPR66_SGPR67: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR68_SGPR69_SGPR70_SGPR71: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR72_SGPR73_SGPR74_SGPR75: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR76_SGPR77_SGPR78_SGPR79: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR80_SGPR81_SGPR82_SGPR83: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR84_SGPR85_SGPR86_SGPR87: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR88_SGPR89_SGPR90_SGPR91: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR92_SGPR93_SGPR94_SGPR95: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR96_SGPR97_SGPR98_SGPR99: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR0_SGPR1_SGPR2_SGPR3_SGPR4_SGPR5_SGPR6_SGPR7: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR4_SGPR5_SGPR6_SGPR7_SGPR8_SGPR9_SGPR10_SGPR11: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR8_SGPR9_SGPR10_SGPR11_SGPR12_SGPR13_SGPR14_SGPR15: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR12_SGPR13_SGPR14_SGPR15_SGPR16_SGPR17_SGPR18_SGPR19: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR16_SGPR17_SGPR18_SGPR19_SGPR20_SGPR21_SGPR22_SGPR23: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR20_SGPR21_SGPR22_SGPR23_SGPR24_SGPR25_SGPR26_SGPR27: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR24_SGPR25_SGPR26_SGPR27_SGPR28_SGPR29_SGPR30_SGPR31: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR28_SGPR29_SGPR30_SGPR31_SGPR32_SGPR33_SGPR34_SGPR35: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR32_SGPR33_SGPR34_SGPR35_SGPR36_SGPR37_SGPR38_SGPR39: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR36_SGPR37_SGPR38_SGPR39_SGPR40_SGPR41_SGPR42_SGPR43: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR40_SGPR41_SGPR42_SGPR43_SGPR44_SGPR45_SGPR46_SGPR47: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR44_SGPR45_SGPR46_SGPR47_SGPR48_SGPR49_SGPR50_SGPR51: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR48_SGPR49_SGPR50_SGPR51_SGPR52_SGPR53_SGPR54_SGPR55: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR52_SGPR53_SGPR54_SGPR55_SGPR56_SGPR57_SGPR58_SGPR59: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR56_SGPR57_SGPR58_SGPR59_SGPR60_SGPR61_SGPR62_SGPR63: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR60_SGPR61_SGPR62_SGPR63_SGPR64_SGPR65_SGPR66_SGPR67: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR64_SGPR65_SGPR66_SGPR67_SGPR68_SGPR69_SGPR70_SGPR71: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR68_SGPR69_SGPR70_SGPR71_SGPR72_SGPR73_SGPR74_SGPR75: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR72_SGPR73_SGPR74_SGPR75_SGPR76_SGPR77_SGPR78_SGPR79: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR76_SGPR77_SGPR78_SGPR79_SGPR80_SGPR81_SGPR82_SGPR83: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR80_SGPR81_SGPR82_SGPR83_SGPR84_SGPR85_SGPR86_SGPR87: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR84_SGPR85_SGPR86_SGPR87_SGPR88_SGPR89_SGPR90_SGPR91: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR88_SGPR89_SGPR90_SGPR91_SGPR92_SGPR93_SGPR94_SGPR95: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR92_SGPR93_SGPR94_SGPR95_SGPR96_SGPR97_SGPR98_SGPR99: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR0_SGPR1_SGPR2_SGPR3_SGPR4_SGPR5_SGPR6_SGPR7_SGPR8_SGPR9_SGPR10_SGPR11_SGPR12_SGPR13_SGPR14_SGPR15: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR4_SGPR5_SGPR6_SGPR7_SGPR8_SGPR9_SGPR10_SGPR11_SGPR12_SGPR13_SGPR14_SGPR15_SGPR16_SGPR17_SGPR18_SGPR19: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR8_SGPR9_SGPR10_SGPR11_SGPR12_SGPR13_SGPR14_SGPR15_SGPR16_SGPR17_SGPR18_SGPR19_SGPR20_SGPR21_SGPR22_SGPR23: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR12_SGPR13_SGPR14_SGPR15_SGPR16_SGPR17_SGPR18_SGPR19_SGPR20_SGPR21_SGPR22_SGPR23_SGPR24_SGPR25_SGPR26_SGPR27: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR16_SGPR17_SGPR18_SGPR19_SGPR20_SGPR21_SGPR22_SGPR23_SGPR24_SGPR25_SGPR26_SGPR27_SGPR28_SGPR29_SGPR30_SGPR31: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR20_SGPR21_SGPR22_SGPR23_SGPR24_SGPR25_SGPR26_SGPR27_SGPR28_SGPR29_SGPR30_SGPR31_SGPR32_SGPR33_SGPR34_SGPR35: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR24_SGPR25_SGPR26_SGPR27_SGPR28_SGPR29_SGPR30_SGPR31_SGPR32_SGPR33_SGPR34_SGPR35_SGPR36_SGPR37_SGPR38_SGPR39: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR28_SGPR29_SGPR30_SGPR31_SGPR32_SGPR33_SGPR34_SGPR35_SGPR36_SGPR37_SGPR38_SGPR39_SGPR40_SGPR41_SGPR42_SGPR43: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR32_SGPR33_SGPR34_SGPR35_SGPR36_SGPR37_SGPR38_SGPR39_SGPR40_SGPR41_SGPR42_SGPR43_SGPR44_SGPR45_SGPR46_SGPR47: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR36_SGPR37_SGPR38_SGPR39_SGPR40_SGPR41_SGPR42_SGPR43_SGPR44_SGPR45_SGPR46_SGPR47_SGPR48_SGPR49_SGPR50_SGPR51: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR40_SGPR41_SGPR42_SGPR43_SGPR44_SGPR45_SGPR46_SGPR47_SGPR48_SGPR49_SGPR50_SGPR51_SGPR52_SGPR53_SGPR54_SGPR55: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR44_SGPR45_SGPR46_SGPR47_SGPR48_SGPR49_SGPR50_SGPR51_SGPR52_SGPR53_SGPR54_SGPR55_SGPR56_SGPR57_SGPR58_SGPR59: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR48_SGPR49_SGPR50_SGPR51_SGPR52_SGPR53_SGPR54_SGPR55_SGPR56_SGPR57_SGPR58_SGPR59_SGPR60_SGPR61_SGPR62_SGPR63: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR52_SGPR53_SGPR54_SGPR55_SGPR56_SGPR57_SGPR58_SGPR59_SGPR60_SGPR61_SGPR62_SGPR63_SGPR64_SGPR65_SGPR66_SGPR67: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR56_SGPR57_SGPR58_SGPR59_SGPR60_SGPR61_SGPR62_SGPR63_SGPR64_SGPR65_SGPR66_SGPR67_SGPR68_SGPR69_SGPR70_SGPR71: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR60_SGPR61_SGPR62_SGPR63_SGPR64_SGPR65_SGPR66_SGPR67_SGPR68_SGPR69_SGPR70_SGPR71_SGPR72_SGPR73_SGPR74_SGPR75: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR64_SGPR65_SGPR66_SGPR67_SGPR68_SGPR69_SGPR70_SGPR71_SGPR72_SGPR73_SGPR74_SGPR75_SGPR76_SGPR77_SGPR78_SGPR79: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR68_SGPR69_SGPR70_SGPR71_SGPR72_SGPR73_SGPR74_SGPR75_SGPR76_SGPR77_SGPR78_SGPR79_SGPR80_SGPR81_SGPR82_SGPR83: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR72_SGPR73_SGPR74_SGPR75_SGPR76_SGPR77_SGPR78_SGPR79_SGPR80_SGPR81_SGPR82_SGPR83_SGPR84_SGPR85_SGPR86_SGPR87: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR76_SGPR77_SGPR78_SGPR79_SGPR80_SGPR81_SGPR82_SGPR83_SGPR84_SGPR85_SGPR86_SGPR87_SGPR88_SGPR89_SGPR90_SGPR91: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR80_SGPR81_SGPR82_SGPR83_SGPR84_SGPR85_SGPR86_SGPR87_SGPR88_SGPR89_SGPR90_SGPR91_SGPR92_SGPR93_SGPR94_SGPR95: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR84_SGPR85_SGPR86_SGPR87_SGPR88_SGPR89_SGPR90_SGPR91_SGPR92_SGPR93_SGPR94_SGPR95_SGPR96_SGPR97_SGPR98_SGPR99: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR0_SGPR1: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR2_SGPR3: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR4_SGPR5: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR6_SGPR7: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR8_SGPR9: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR10_SGPR11: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR12_SGPR13: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR14_SGPR15: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR16_SGPR17: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR18_SGPR19: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR20_SGPR21: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR22_SGPR23: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR24_SGPR25: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR26_SGPR27: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR28_SGPR29: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR30_SGPR31: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR32_SGPR33: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR34_SGPR35: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR36_SGPR37: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR38_SGPR39: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR40_SGPR41: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR42_SGPR43: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR44_SGPR45: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR46_SGPR47: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR48_SGPR49: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR50_SGPR51: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR52_SGPR53: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR54_SGPR55: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR56_SGPR57: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR58_SGPR59: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR60_SGPR61: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR62_SGPR63: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR64_SGPR65: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR66_SGPR67: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR68_SGPR69: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR70_SGPR71: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR72_SGPR73: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR74_SGPR75: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR76_SGPR77: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR78_SGPR79: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR80_SGPR81: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR82_SGPR83: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR84_SGPR85: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR86_SGPR87: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR88_SGPR89: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR90_SGPR91: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR92_SGPR93: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR94_SGPR95: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR96_SGPR97: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR98_SGPR99: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR100_SGPR101: OpKind = MCK_SGPR_64; break;
    case AMDGPU::VGPR0_VGPR1_VGPR2_VGPR3: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR1_VGPR2_VGPR3_VGPR4: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR2_VGPR3_VGPR4_VGPR5: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR3_VGPR4_VGPR5_VGPR6: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR4_VGPR5_VGPR6_VGPR7: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR5_VGPR6_VGPR7_VGPR8: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR6_VGPR7_VGPR8_VGPR9: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR7_VGPR8_VGPR9_VGPR10: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR8_VGPR9_VGPR10_VGPR11: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR9_VGPR10_VGPR11_VGPR12: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR10_VGPR11_VGPR12_VGPR13: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR11_VGPR12_VGPR13_VGPR14: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR12_VGPR13_VGPR14_VGPR15: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR13_VGPR14_VGPR15_VGPR16: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR14_VGPR15_VGPR16_VGPR17: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR15_VGPR16_VGPR17_VGPR18: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR16_VGPR17_VGPR18_VGPR19: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR17_VGPR18_VGPR19_VGPR20: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR18_VGPR19_VGPR20_VGPR21: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR19_VGPR20_VGPR21_VGPR22: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR20_VGPR21_VGPR22_VGPR23: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR21_VGPR22_VGPR23_VGPR24: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR22_VGPR23_VGPR24_VGPR25: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR23_VGPR24_VGPR25_VGPR26: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR24_VGPR25_VGPR26_VGPR27: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR25_VGPR26_VGPR27_VGPR28: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR26_VGPR27_VGPR28_VGPR29: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR27_VGPR28_VGPR29_VGPR30: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR28_VGPR29_VGPR30_VGPR31: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR29_VGPR30_VGPR31_VGPR32: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR30_VGPR31_VGPR32_VGPR33: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR31_VGPR32_VGPR33_VGPR34: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR32_VGPR33_VGPR34_VGPR35: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR33_VGPR34_VGPR35_VGPR36: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR34_VGPR35_VGPR36_VGPR37: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR35_VGPR36_VGPR37_VGPR38: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR36_VGPR37_VGPR38_VGPR39: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR37_VGPR38_VGPR39_VGPR40: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR38_VGPR39_VGPR40_VGPR41: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR39_VGPR40_VGPR41_VGPR42: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR40_VGPR41_VGPR42_VGPR43: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR41_VGPR42_VGPR43_VGPR44: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR42_VGPR43_VGPR44_VGPR45: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR43_VGPR44_VGPR45_VGPR46: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR44_VGPR45_VGPR46_VGPR47: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR45_VGPR46_VGPR47_VGPR48: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR46_VGPR47_VGPR48_VGPR49: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR47_VGPR48_VGPR49_VGPR50: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR48_VGPR49_VGPR50_VGPR51: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR49_VGPR50_VGPR51_VGPR52: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR50_VGPR51_VGPR52_VGPR53: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR51_VGPR52_VGPR53_VGPR54: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR52_VGPR53_VGPR54_VGPR55: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR53_VGPR54_VGPR55_VGPR56: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR54_VGPR55_VGPR56_VGPR57: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR55_VGPR56_VGPR57_VGPR58: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR56_VGPR57_VGPR58_VGPR59: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR57_VGPR58_VGPR59_VGPR60: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR58_VGPR59_VGPR60_VGPR61: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR59_VGPR60_VGPR61_VGPR62: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR60_VGPR61_VGPR62_VGPR63: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR61_VGPR62_VGPR63_VGPR64: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR62_VGPR63_VGPR64_VGPR65: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR63_VGPR64_VGPR65_VGPR66: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR64_VGPR65_VGPR66_VGPR67: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR65_VGPR66_VGPR67_VGPR68: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR66_VGPR67_VGPR68_VGPR69: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR67_VGPR68_VGPR69_VGPR70: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR68_VGPR69_VGPR70_VGPR71: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR69_VGPR70_VGPR71_VGPR72: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR70_VGPR71_VGPR72_VGPR73: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR71_VGPR72_VGPR73_VGPR74: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR72_VGPR73_VGPR74_VGPR75: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR73_VGPR74_VGPR75_VGPR76: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR74_VGPR75_VGPR76_VGPR77: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR75_VGPR76_VGPR77_VGPR78: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR76_VGPR77_VGPR78_VGPR79: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR77_VGPR78_VGPR79_VGPR80: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR78_VGPR79_VGPR80_VGPR81: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR79_VGPR80_VGPR81_VGPR82: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR80_VGPR81_VGPR82_VGPR83: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR81_VGPR82_VGPR83_VGPR84: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR82_VGPR83_VGPR84_VGPR85: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR83_VGPR84_VGPR85_VGPR86: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR84_VGPR85_VGPR86_VGPR87: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR85_VGPR86_VGPR87_VGPR88: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR86_VGPR87_VGPR88_VGPR89: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR87_VGPR88_VGPR89_VGPR90: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR88_VGPR89_VGPR90_VGPR91: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR89_VGPR90_VGPR91_VGPR92: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR90_VGPR91_VGPR92_VGPR93: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR91_VGPR92_VGPR93_VGPR94: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR92_VGPR93_VGPR94_VGPR95: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR93_VGPR94_VGPR95_VGPR96: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR94_VGPR95_VGPR96_VGPR97: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR95_VGPR96_VGPR97_VGPR98: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR96_VGPR97_VGPR98_VGPR99: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR97_VGPR98_VGPR99_VGPR100: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR98_VGPR99_VGPR100_VGPR101: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR99_VGPR100_VGPR101_VGPR102: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR100_VGPR101_VGPR102_VGPR103: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR101_VGPR102_VGPR103_VGPR104: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR102_VGPR103_VGPR104_VGPR105: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR103_VGPR104_VGPR105_VGPR106: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR104_VGPR105_VGPR106_VGPR107: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR105_VGPR106_VGPR107_VGPR108: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR106_VGPR107_VGPR108_VGPR109: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR107_VGPR108_VGPR109_VGPR110: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR108_VGPR109_VGPR110_VGPR111: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR109_VGPR110_VGPR111_VGPR112: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR110_VGPR111_VGPR112_VGPR113: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR111_VGPR112_VGPR113_VGPR114: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR112_VGPR113_VGPR114_VGPR115: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR113_VGPR114_VGPR115_VGPR116: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR114_VGPR115_VGPR116_VGPR117: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR115_VGPR116_VGPR117_VGPR118: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR116_VGPR117_VGPR118_VGPR119: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR117_VGPR118_VGPR119_VGPR120: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR118_VGPR119_VGPR120_VGPR121: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR119_VGPR120_VGPR121_VGPR122: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR120_VGPR121_VGPR122_VGPR123: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR121_VGPR122_VGPR123_VGPR124: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR122_VGPR123_VGPR124_VGPR125: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR123_VGPR124_VGPR125_VGPR126: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR124_VGPR125_VGPR126_VGPR127: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR125_VGPR126_VGPR127_VGPR128: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR126_VGPR127_VGPR128_VGPR129: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR127_VGPR128_VGPR129_VGPR130: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR128_VGPR129_VGPR130_VGPR131: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR129_VGPR130_VGPR131_VGPR132: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR130_VGPR131_VGPR132_VGPR133: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR131_VGPR132_VGPR133_VGPR134: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR132_VGPR133_VGPR134_VGPR135: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR133_VGPR134_VGPR135_VGPR136: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR134_VGPR135_VGPR136_VGPR137: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR135_VGPR136_VGPR137_VGPR138: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR136_VGPR137_VGPR138_VGPR139: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR137_VGPR138_VGPR139_VGPR140: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR138_VGPR139_VGPR140_VGPR141: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR139_VGPR140_VGPR141_VGPR142: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR140_VGPR141_VGPR142_VGPR143: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR141_VGPR142_VGPR143_VGPR144: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR142_VGPR143_VGPR144_VGPR145: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR143_VGPR144_VGPR145_VGPR146: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR144_VGPR145_VGPR146_VGPR147: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR145_VGPR146_VGPR147_VGPR148: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR146_VGPR147_VGPR148_VGPR149: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR147_VGPR148_VGPR149_VGPR150: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR148_VGPR149_VGPR150_VGPR151: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR149_VGPR150_VGPR151_VGPR152: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR150_VGPR151_VGPR152_VGPR153: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR151_VGPR152_VGPR153_VGPR154: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR152_VGPR153_VGPR154_VGPR155: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR153_VGPR154_VGPR155_VGPR156: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR154_VGPR155_VGPR156_VGPR157: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR155_VGPR156_VGPR157_VGPR158: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR156_VGPR157_VGPR158_VGPR159: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR157_VGPR158_VGPR159_VGPR160: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR158_VGPR159_VGPR160_VGPR161: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR159_VGPR160_VGPR161_VGPR162: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR160_VGPR161_VGPR162_VGPR163: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR161_VGPR162_VGPR163_VGPR164: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR162_VGPR163_VGPR164_VGPR165: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR163_VGPR164_VGPR165_VGPR166: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR164_VGPR165_VGPR166_VGPR167: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR165_VGPR166_VGPR167_VGPR168: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR166_VGPR167_VGPR168_VGPR169: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR167_VGPR168_VGPR169_VGPR170: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR168_VGPR169_VGPR170_VGPR171: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR169_VGPR170_VGPR171_VGPR172: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR170_VGPR171_VGPR172_VGPR173: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR171_VGPR172_VGPR173_VGPR174: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR172_VGPR173_VGPR174_VGPR175: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR173_VGPR174_VGPR175_VGPR176: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR174_VGPR175_VGPR176_VGPR177: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR175_VGPR176_VGPR177_VGPR178: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR176_VGPR177_VGPR178_VGPR179: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR177_VGPR178_VGPR179_VGPR180: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR178_VGPR179_VGPR180_VGPR181: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR179_VGPR180_VGPR181_VGPR182: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR180_VGPR181_VGPR182_VGPR183: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR181_VGPR182_VGPR183_VGPR184: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR182_VGPR183_VGPR184_VGPR185: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR183_VGPR184_VGPR185_VGPR186: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR184_VGPR185_VGPR186_VGPR187: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR185_VGPR186_VGPR187_VGPR188: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR186_VGPR187_VGPR188_VGPR189: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR187_VGPR188_VGPR189_VGPR190: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR188_VGPR189_VGPR190_VGPR191: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR189_VGPR190_VGPR191_VGPR192: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR190_VGPR191_VGPR192_VGPR193: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR191_VGPR192_VGPR193_VGPR194: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR192_VGPR193_VGPR194_VGPR195: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR193_VGPR194_VGPR195_VGPR196: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR194_VGPR195_VGPR196_VGPR197: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR195_VGPR196_VGPR197_VGPR198: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR196_VGPR197_VGPR198_VGPR199: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR197_VGPR198_VGPR199_VGPR200: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR198_VGPR199_VGPR200_VGPR201: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR199_VGPR200_VGPR201_VGPR202: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR200_VGPR201_VGPR202_VGPR203: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR201_VGPR202_VGPR203_VGPR204: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR202_VGPR203_VGPR204_VGPR205: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR203_VGPR204_VGPR205_VGPR206: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR204_VGPR205_VGPR206_VGPR207: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR205_VGPR206_VGPR207_VGPR208: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR206_VGPR207_VGPR208_VGPR209: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR207_VGPR208_VGPR209_VGPR210: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR208_VGPR209_VGPR210_VGPR211: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR209_VGPR210_VGPR211_VGPR212: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR210_VGPR211_VGPR212_VGPR213: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR211_VGPR212_VGPR213_VGPR214: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR212_VGPR213_VGPR214_VGPR215: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR213_VGPR214_VGPR215_VGPR216: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR214_VGPR215_VGPR216_VGPR217: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR215_VGPR216_VGPR217_VGPR218: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR216_VGPR217_VGPR218_VGPR219: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR217_VGPR218_VGPR219_VGPR220: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR218_VGPR219_VGPR220_VGPR221: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR219_VGPR220_VGPR221_VGPR222: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR220_VGPR221_VGPR222_VGPR223: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR221_VGPR222_VGPR223_VGPR224: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR222_VGPR223_VGPR224_VGPR225: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR223_VGPR224_VGPR225_VGPR226: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR224_VGPR225_VGPR226_VGPR227: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR225_VGPR226_VGPR227_VGPR228: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR226_VGPR227_VGPR228_VGPR229: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR227_VGPR228_VGPR229_VGPR230: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR228_VGPR229_VGPR230_VGPR231: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR229_VGPR230_VGPR231_VGPR232: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR230_VGPR231_VGPR232_VGPR233: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR231_VGPR232_VGPR233_VGPR234: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR232_VGPR233_VGPR234_VGPR235: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR233_VGPR234_VGPR235_VGPR236: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR234_VGPR235_VGPR236_VGPR237: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR235_VGPR236_VGPR237_VGPR238: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR236_VGPR237_VGPR238_VGPR239: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR237_VGPR238_VGPR239_VGPR240: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR238_VGPR239_VGPR240_VGPR241: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR239_VGPR240_VGPR241_VGPR242: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR240_VGPR241_VGPR242_VGPR243: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR241_VGPR242_VGPR243_VGPR244: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR242_VGPR243_VGPR244_VGPR245: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR243_VGPR244_VGPR245_VGPR246: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR244_VGPR245_VGPR246_VGPR247: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR245_VGPR246_VGPR247_VGPR248: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR246_VGPR247_VGPR248_VGPR249: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR247_VGPR248_VGPR249_VGPR250: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR248_VGPR249_VGPR250_VGPR251: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR249_VGPR250_VGPR251_VGPR252: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR250_VGPR251_VGPR252_VGPR253: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR251_VGPR252_VGPR253_VGPR254: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR252_VGPR253_VGPR254_VGPR255: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR0_VGPR1_VGPR2_VGPR3_VGPR4_VGPR5_VGPR6_VGPR7: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR1_VGPR2_VGPR3_VGPR4_VGPR5_VGPR6_VGPR7_VGPR8: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR2_VGPR3_VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR3_VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251_VGPR252: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251_VGPR252_VGPR253: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR247_VGPR248_VGPR249_VGPR250_VGPR251_VGPR252_VGPR253_VGPR254: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR248_VGPR249_VGPR250_VGPR251_VGPR252_VGPR253_VGPR254_VGPR255: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR0_VGPR1_VGPR2_VGPR3_VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR1_VGPR2_VGPR3_VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR2_VGPR3_VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR3_VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251_VGPR252: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251_VGPR252_VGPR253: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251_VGPR252_VGPR253_VGPR254: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251_VGPR252_VGPR253_VGPR254_VGPR255: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR0_VGPR1: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR1_VGPR2: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR2_VGPR3: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR3_VGPR4: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR4_VGPR5: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR5_VGPR6: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR6_VGPR7: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR7_VGPR8: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR8_VGPR9: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR9_VGPR10: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR10_VGPR11: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR11_VGPR12: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR12_VGPR13: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR13_VGPR14: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR14_VGPR15: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR15_VGPR16: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR16_VGPR17: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR17_VGPR18: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR18_VGPR19: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR19_VGPR20: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR20_VGPR21: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR21_VGPR22: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR22_VGPR23: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR23_VGPR24: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR24_VGPR25: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR25_VGPR26: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR26_VGPR27: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR27_VGPR28: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR28_VGPR29: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR29_VGPR30: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR30_VGPR31: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR31_VGPR32: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR32_VGPR33: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR33_VGPR34: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR34_VGPR35: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR35_VGPR36: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR36_VGPR37: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR37_VGPR38: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR38_VGPR39: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR39_VGPR40: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR40_VGPR41: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR41_VGPR42: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR42_VGPR43: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR43_VGPR44: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR44_VGPR45: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR45_VGPR46: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR46_VGPR47: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR47_VGPR48: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR48_VGPR49: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR49_VGPR50: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR50_VGPR51: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR51_VGPR52: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR52_VGPR53: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR53_VGPR54: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR54_VGPR55: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR55_VGPR56: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR56_VGPR57: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR57_VGPR58: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR58_VGPR59: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR59_VGPR60: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR60_VGPR61: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR61_VGPR62: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR62_VGPR63: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR63_VGPR64: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR64_VGPR65: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR65_VGPR66: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR66_VGPR67: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR67_VGPR68: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR68_VGPR69: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR69_VGPR70: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR70_VGPR71: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR71_VGPR72: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR72_VGPR73: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR73_VGPR74: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR74_VGPR75: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR75_VGPR76: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR76_VGPR77: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR77_VGPR78: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR78_VGPR79: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR79_VGPR80: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR80_VGPR81: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR81_VGPR82: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR82_VGPR83: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR83_VGPR84: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR84_VGPR85: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR85_VGPR86: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR86_VGPR87: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR87_VGPR88: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR88_VGPR89: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR89_VGPR90: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR90_VGPR91: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR91_VGPR92: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR92_VGPR93: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR93_VGPR94: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR94_VGPR95: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR95_VGPR96: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR96_VGPR97: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR97_VGPR98: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR98_VGPR99: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR99_VGPR100: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR100_VGPR101: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR101_VGPR102: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR102_VGPR103: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR103_VGPR104: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR104_VGPR105: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR105_VGPR106: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR106_VGPR107: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR107_VGPR108: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR108_VGPR109: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR109_VGPR110: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR110_VGPR111: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR111_VGPR112: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR112_VGPR113: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR113_VGPR114: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR114_VGPR115: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR115_VGPR116: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR116_VGPR117: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR117_VGPR118: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR118_VGPR119: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR119_VGPR120: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR120_VGPR121: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR121_VGPR122: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR122_VGPR123: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR123_VGPR124: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR124_VGPR125: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR125_VGPR126: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR126_VGPR127: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR127_VGPR128: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR128_VGPR129: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR129_VGPR130: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR130_VGPR131: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR131_VGPR132: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR132_VGPR133: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR133_VGPR134: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR134_VGPR135: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR135_VGPR136: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR136_VGPR137: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR137_VGPR138: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR138_VGPR139: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR139_VGPR140: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR140_VGPR141: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR141_VGPR142: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR142_VGPR143: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR143_VGPR144: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR144_VGPR145: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR145_VGPR146: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR146_VGPR147: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR147_VGPR148: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR148_VGPR149: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR149_VGPR150: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR150_VGPR151: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR151_VGPR152: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR152_VGPR153: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR153_VGPR154: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR154_VGPR155: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR155_VGPR156: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR156_VGPR157: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR157_VGPR158: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR158_VGPR159: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR159_VGPR160: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR160_VGPR161: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR161_VGPR162: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR162_VGPR163: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR163_VGPR164: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR164_VGPR165: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR165_VGPR166: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR166_VGPR167: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR167_VGPR168: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR168_VGPR169: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR169_VGPR170: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR170_VGPR171: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR171_VGPR172: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR172_VGPR173: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR173_VGPR174: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR174_VGPR175: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR175_VGPR176: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR176_VGPR177: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR177_VGPR178: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR178_VGPR179: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR179_VGPR180: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR180_VGPR181: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR181_VGPR182: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR182_VGPR183: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR183_VGPR184: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR184_VGPR185: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR185_VGPR186: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR186_VGPR187: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR187_VGPR188: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR188_VGPR189: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR189_VGPR190: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR190_VGPR191: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR191_VGPR192: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR192_VGPR193: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR193_VGPR194: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR194_VGPR195: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR195_VGPR196: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR196_VGPR197: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR197_VGPR198: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR198_VGPR199: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR199_VGPR200: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR200_VGPR201: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR201_VGPR202: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR202_VGPR203: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR203_VGPR204: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR204_VGPR205: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR205_VGPR206: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR206_VGPR207: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR207_VGPR208: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR208_VGPR209: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR209_VGPR210: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR210_VGPR211: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR211_VGPR212: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR212_VGPR213: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR213_VGPR214: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR214_VGPR215: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR215_VGPR216: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR216_VGPR217: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR217_VGPR218: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR218_VGPR219: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR219_VGPR220: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR220_VGPR221: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR221_VGPR222: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR222_VGPR223: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR223_VGPR224: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR224_VGPR225: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR225_VGPR226: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR226_VGPR227: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR227_VGPR228: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR228_VGPR229: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR229_VGPR230: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR230_VGPR231: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR231_VGPR232: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR232_VGPR233: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR233_VGPR234: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR234_VGPR235: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR235_VGPR236: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR236_VGPR237: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR237_VGPR238: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR238_VGPR239: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR239_VGPR240: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR240_VGPR241: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR241_VGPR242: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR242_VGPR243: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR243_VGPR244: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR244_VGPR245: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR245_VGPR246: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR246_VGPR247: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR247_VGPR248: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR248_VGPR249: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR249_VGPR250: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR250_VGPR251: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR251_VGPR252: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR252_VGPR253: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR253_VGPR254: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR254_VGPR255: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR0_VGPR1_VGPR2: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR1_VGPR2_VGPR3: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR2_VGPR3_VGPR4: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR3_VGPR4_VGPR5: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR4_VGPR5_VGPR6: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR5_VGPR6_VGPR7: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR6_VGPR7_VGPR8: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR7_VGPR8_VGPR9: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR8_VGPR9_VGPR10: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR9_VGPR10_VGPR11: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR10_VGPR11_VGPR12: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR11_VGPR12_VGPR13: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR12_VGPR13_VGPR14: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR13_VGPR14_VGPR15: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR14_VGPR15_VGPR16: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR15_VGPR16_VGPR17: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR16_VGPR17_VGPR18: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR17_VGPR18_VGPR19: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR18_VGPR19_VGPR20: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR19_VGPR20_VGPR21: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR20_VGPR21_VGPR22: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR21_VGPR22_VGPR23: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR22_VGPR23_VGPR24: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR23_VGPR24_VGPR25: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR24_VGPR25_VGPR26: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR25_VGPR26_VGPR27: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR26_VGPR27_VGPR28: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR27_VGPR28_VGPR29: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR28_VGPR29_VGPR30: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR29_VGPR30_VGPR31: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR30_VGPR31_VGPR32: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR31_VGPR32_VGPR33: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR32_VGPR33_VGPR34: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR33_VGPR34_VGPR35: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR34_VGPR35_VGPR36: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR35_VGPR36_VGPR37: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR36_VGPR37_VGPR38: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR37_VGPR38_VGPR39: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR38_VGPR39_VGPR40: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR39_VGPR40_VGPR41: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR40_VGPR41_VGPR42: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR41_VGPR42_VGPR43: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR42_VGPR43_VGPR44: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR43_VGPR44_VGPR45: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR44_VGPR45_VGPR46: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR45_VGPR46_VGPR47: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR46_VGPR47_VGPR48: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR47_VGPR48_VGPR49: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR48_VGPR49_VGPR50: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR49_VGPR50_VGPR51: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR50_VGPR51_VGPR52: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR51_VGPR52_VGPR53: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR52_VGPR53_VGPR54: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR53_VGPR54_VGPR55: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR54_VGPR55_VGPR56: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR55_VGPR56_VGPR57: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR56_VGPR57_VGPR58: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR57_VGPR58_VGPR59: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR58_VGPR59_VGPR60: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR59_VGPR60_VGPR61: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR60_VGPR61_VGPR62: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR61_VGPR62_VGPR63: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR62_VGPR63_VGPR64: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR63_VGPR64_VGPR65: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR64_VGPR65_VGPR66: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR65_VGPR66_VGPR67: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR66_VGPR67_VGPR68: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR67_VGPR68_VGPR69: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR68_VGPR69_VGPR70: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR69_VGPR70_VGPR71: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR70_VGPR71_VGPR72: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR71_VGPR72_VGPR73: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR72_VGPR73_VGPR74: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR73_VGPR74_VGPR75: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR74_VGPR75_VGPR76: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR75_VGPR76_VGPR77: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR76_VGPR77_VGPR78: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR77_VGPR78_VGPR79: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR78_VGPR79_VGPR80: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR79_VGPR80_VGPR81: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR80_VGPR81_VGPR82: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR81_VGPR82_VGPR83: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR82_VGPR83_VGPR84: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR83_VGPR84_VGPR85: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR84_VGPR85_VGPR86: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR85_VGPR86_VGPR87: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR86_VGPR87_VGPR88: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR87_VGPR88_VGPR89: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR88_VGPR89_VGPR90: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR89_VGPR90_VGPR91: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR90_VGPR91_VGPR92: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR91_VGPR92_VGPR93: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR92_VGPR93_VGPR94: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR93_VGPR94_VGPR95: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR94_VGPR95_VGPR96: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR95_VGPR96_VGPR97: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR96_VGPR97_VGPR98: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR97_VGPR98_VGPR99: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR98_VGPR99_VGPR100: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR99_VGPR100_VGPR101: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR100_VGPR101_VGPR102: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR101_VGPR102_VGPR103: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR102_VGPR103_VGPR104: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR103_VGPR104_VGPR105: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR104_VGPR105_VGPR106: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR105_VGPR106_VGPR107: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR106_VGPR107_VGPR108: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR107_VGPR108_VGPR109: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR108_VGPR109_VGPR110: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR109_VGPR110_VGPR111: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR110_VGPR111_VGPR112: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR111_VGPR112_VGPR113: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR112_VGPR113_VGPR114: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR113_VGPR114_VGPR115: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR114_VGPR115_VGPR116: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR115_VGPR116_VGPR117: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR116_VGPR117_VGPR118: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR117_VGPR118_VGPR119: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR118_VGPR119_VGPR120: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR119_VGPR120_VGPR121: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR120_VGPR121_VGPR122: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR121_VGPR122_VGPR123: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR122_VGPR123_VGPR124: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR123_VGPR124_VGPR125: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR124_VGPR125_VGPR126: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR125_VGPR126_VGPR127: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR126_VGPR127_VGPR128: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR127_VGPR128_VGPR129: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR128_VGPR129_VGPR130: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR129_VGPR130_VGPR131: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR130_VGPR131_VGPR132: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR131_VGPR132_VGPR133: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR132_VGPR133_VGPR134: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR133_VGPR134_VGPR135: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR134_VGPR135_VGPR136: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR135_VGPR136_VGPR137: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR136_VGPR137_VGPR138: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR137_VGPR138_VGPR139: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR138_VGPR139_VGPR140: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR139_VGPR140_VGPR141: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR140_VGPR141_VGPR142: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR141_VGPR142_VGPR143: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR142_VGPR143_VGPR144: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR143_VGPR144_VGPR145: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR144_VGPR145_VGPR146: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR145_VGPR146_VGPR147: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR146_VGPR147_VGPR148: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR147_VGPR148_VGPR149: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR148_VGPR149_VGPR150: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR149_VGPR150_VGPR151: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR150_VGPR151_VGPR152: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR151_VGPR152_VGPR153: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR152_VGPR153_VGPR154: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR153_VGPR154_VGPR155: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR154_VGPR155_VGPR156: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR155_VGPR156_VGPR157: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR156_VGPR157_VGPR158: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR157_VGPR158_VGPR159: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR158_VGPR159_VGPR160: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR159_VGPR160_VGPR161: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR160_VGPR161_VGPR162: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR161_VGPR162_VGPR163: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR162_VGPR163_VGPR164: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR163_VGPR164_VGPR165: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR164_VGPR165_VGPR166: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR165_VGPR166_VGPR167: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR166_VGPR167_VGPR168: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR167_VGPR168_VGPR169: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR168_VGPR169_VGPR170: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR169_VGPR170_VGPR171: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR170_VGPR171_VGPR172: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR171_VGPR172_VGPR173: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR172_VGPR173_VGPR174: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR173_VGPR174_VGPR175: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR174_VGPR175_VGPR176: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR175_VGPR176_VGPR177: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR176_VGPR177_VGPR178: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR177_VGPR178_VGPR179: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR178_VGPR179_VGPR180: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR179_VGPR180_VGPR181: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR180_VGPR181_VGPR182: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR181_VGPR182_VGPR183: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR182_VGPR183_VGPR184: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR183_VGPR184_VGPR185: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR184_VGPR185_VGPR186: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR185_VGPR186_VGPR187: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR186_VGPR187_VGPR188: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR187_VGPR188_VGPR189: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR188_VGPR189_VGPR190: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR189_VGPR190_VGPR191: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR190_VGPR191_VGPR192: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR191_VGPR192_VGPR193: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR192_VGPR193_VGPR194: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR193_VGPR194_VGPR195: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR194_VGPR195_VGPR196: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR195_VGPR196_VGPR197: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR196_VGPR197_VGPR198: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR197_VGPR198_VGPR199: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR198_VGPR199_VGPR200: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR199_VGPR200_VGPR201: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR200_VGPR201_VGPR202: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR201_VGPR202_VGPR203: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR202_VGPR203_VGPR204: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR203_VGPR204_VGPR205: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR204_VGPR205_VGPR206: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR205_VGPR206_VGPR207: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR206_VGPR207_VGPR208: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR207_VGPR208_VGPR209: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR208_VGPR209_VGPR210: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR209_VGPR210_VGPR211: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR210_VGPR211_VGPR212: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR211_VGPR212_VGPR213: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR212_VGPR213_VGPR214: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR213_VGPR214_VGPR215: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR214_VGPR215_VGPR216: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR215_VGPR216_VGPR217: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR216_VGPR217_VGPR218: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR217_VGPR218_VGPR219: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR218_VGPR219_VGPR220: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR219_VGPR220_VGPR221: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR220_VGPR221_VGPR222: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR221_VGPR222_VGPR223: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR222_VGPR223_VGPR224: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR223_VGPR224_VGPR225: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR224_VGPR225_VGPR226: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR225_VGPR226_VGPR227: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR226_VGPR227_VGPR228: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR227_VGPR228_VGPR229: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR228_VGPR229_VGPR230: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR229_VGPR230_VGPR231: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR230_VGPR231_VGPR232: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR231_VGPR232_VGPR233: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR232_VGPR233_VGPR234: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR233_VGPR234_VGPR235: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR234_VGPR235_VGPR236: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR235_VGPR236_VGPR237: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR236_VGPR237_VGPR238: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR237_VGPR238_VGPR239: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR238_VGPR239_VGPR240: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR239_VGPR240_VGPR241: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR240_VGPR241_VGPR242: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR241_VGPR242_VGPR243: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR242_VGPR243_VGPR244: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR243_VGPR244_VGPR245: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR244_VGPR245_VGPR246: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR245_VGPR246_VGPR247: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR246_VGPR247_VGPR248: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR247_VGPR248_VGPR249: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR248_VGPR249_VGPR250: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR249_VGPR250_VGPR251: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR250_VGPR251_VGPR252: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR251_VGPR252_VGPR253: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR252_VGPR253_VGPR254: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR253_VGPR254_VGPR255: OpKind = MCK_VReg_96; break;
    }
    return isSubclass(OpKind, Kind) ? MCTargetAsmParser::Match_Success :
                                      MCTargetAsmParser::Match_InvalidOperand;
  }

  return MCTargetAsmParser::Match_InvalidOperand;
}

uint64_t AMDGPUAsmParser::
ComputeAvailableFeatures(const FeatureBitset& FB) const {
  uint64_t Features = 0;
  if ((FB[AMDGPU::FeatureGCN1Encoding]))
    Features |= Feature_isSICI;
  if ((FB[AMDGPU::FeatureSeaIslands]))
    Features |= Feature_isCIOnly;
  if ((FB[AMDGPU::FeatureGCN3Encoding]))
    Features |= Feature_isVI;
  if ((FB[AMDGPU::FeatureDisable]))
    Features |= Feature_DisableInst;
  if ((FB[AMDGPU::FeatureGCN]))
    Features |= Feature_isGCN;
  if ((FB[AMDGPU::FeatureCIInsts]))
    Features |= Feature_isCIVI;
  return Features;
}

static const char *const MnemonicTable =
    "\007CALL_FS\006CF_END\010CONTINUE\004ELSE\010END_LOOP\013INTERP_LOAD\016"
    "INTERP_PAIR_XY\016INTERP_PAIR_ZW\004JUMP\nLOOP_BREAK\017LOOP_START_DX10"
    "\nMASK_WRITE\003PAD\003POP\004PUSH\tPUSH_ELSE\003TEX\003VTX\021buffer_a"
    "tomic_add\021buffer_atomic_and\020buffer_atomic_or\022buffer_atomic_sma"
    "x\022buffer_atomic_smin\021buffer_atomic_sub\022buffer_atomic_swap\022b"
    "uffer_atomic_umax\022buffer_atomic_umin\021buffer_atomic_xor\021buffer_"
    "load_dword\023buffer_load_dwordx2\023buffer_load_dwordx4\024buffer_load"
    "_format_x\025buffer_load_format_xy\026buffer_load_format_xyz\027buffer_"
    "load_format_xyzw\021buffer_load_sbyte\022buffer_load_sshort\021buffer_l"
    "oad_ubyte\022buffer_load_ushort\021buffer_store_byte\022buffer_store_dw"
    "ord\024buffer_store_dwordx2\024buffer_store_dwordx4\025buffer_store_for"
    "mat_x\026buffer_store_format_xy\027buffer_store_format_xyz\030buffer_st"
    "ore_format_xyzw\022buffer_store_short\016ds_add_rtn_u32\016ds_add_rtn_u"
    "64\017ds_add_src2_u32\017ds_add_src2_u64\nds_add_u32\nds_add_u64\nds_an"
    "d_b32\nds_and_b64\016ds_and_rtn_b32\016ds_and_rtn_b64\017ds_and_src2_b6"
    "4\016ds_and_src_b32\tds_append\014ds_cmpst_b32\014ds_cmpst_b64\014ds_cm"
    "pst_f32\014ds_cmpst_f64\020ds_cmpst_rtn_b32\020ds_cmpst_rtn_b64\020ds_c"
    "mpst_rtn_f32\020ds_cmpst_rtn_f64\nds_consume\016ds_dec_rtn_u32\016ds_de"
    "c_rtn_u64\017ds_dec_src2_u32\017ds_dec_src2_u64\nds_dec_u32\nds_dec_u64"
    "\016ds_gws_barrier\013ds_gws_init\016ds_gws_sema_br\015ds_gws_sema_p\015"
    "ds_gws_sema_v\016ds_inc_rtn_u32\016ds_inc_rtn_u64\017ds_inc_src2_u32\017"
    "ds_inc_src2_u64\nds_inc_u32\nds_inc_u64\nds_max_f32\nds_max_f64\nds_max"
    "_i32\nds_max_i64\016ds_max_rtn_f32\016ds_max_rtn_f64\016ds_max_rtn_i32\016"
    "ds_max_rtn_i64\016ds_max_rtn_u32\016ds_max_rtn_u64\017ds_max_src2_f32\017"
    "ds_max_src2_f64\017ds_max_src2_i32\017ds_max_src2_i64\017ds_max_src2_u3"
    "2\017ds_max_src2_u64\nds_max_u32\nds_max_u64\nds_min_f32\nds_min_f64\nd"
    "s_min_i32\nds_min_i64\016ds_min_rtn_f32\016ds_min_rtn_f64\016ds_min_rtn"
    "_i32\016ds_min_rtn_i64\016ds_min_rtn_u32\016ds_min_rtn_u64\017ds_min_sr"
    "c2_f32\017ds_min_src2_f64\017ds_min_src2_i32\017ds_min_src2_i64\017ds_m"
    "in_src2_u32\017ds_min_src2_u64\nds_min_u32\nds_min_u64\014ds_mskor_b32\014"
    "ds_mskor_b64\020ds_mskor_rtn_b32\020ds_mskor_rtn_b64\tds_or_b32\tds_or_"
    "b64\015ds_or_rtn_b32\015ds_or_rtn_b64\016ds_or_src2_b32\016ds_or_src2_b"
    "64\020ds_ordered_count\014ds_read2_b32\014ds_read2_b64\020ds_read2st64_"
    "b32\020ds_read2st64_b64\013ds_read_b32\013ds_read_b64\013ds_read_i16\nd"
    "s_read_i8\013ds_read_u16\nds_read_u8\017ds_rsub_rtn_u32\017ds_rsub_rtn_"
    "u64\020ds_rsub_src2_u32\020ds_rsub_src2_u64\013ds_rsub_u32\013ds_rsub_u"
    "64\016ds_sub_rtn_u32\016ds_sub_rtn_u64\017ds_sub_src2_u32\017ds_sub_src"
    "2_u64\nds_sub_u32\nds_sub_u64\016ds_swizzle_b32\017ds_wrap_rtn_f32\015d"
    "s_write2_b32\015ds_write2_b64\021ds_write2st64_b32\021ds_write2st64_b64"
    "\014ds_write_b16\014ds_write_b32\014ds_write_b64\013ds_write_b8\021ds_w"
    "rite_src2_b32\021ds_write_src2_b64\022ds_wrxchg2_rtn_b32\022ds_wrxchg2_"
    "rtn_b64\026ds_wrxchg2st64_rtn_b32\026ds_wrxchg2st64_rtn_b64\021ds_wrxch"
    "g_rtn_b32\021ds_wrxchg_rtn_b64\nds_xor_b32\nds_xor_b64\016ds_xor_rtn_b3"
    "2\016ds_xor_rtn_b64\017ds_xor_src2_b32\017ds_xor_src2_b64\003exp\017fla"
    "t_atomic_add\022flat_atomic_add_x2\017flat_atomic_and\022flat_atomic_an"
    "d_x2\023flat_atomic_cmpswap\026flat_atomic_cmpswap_x2\017flat_atomic_de"
    "c\022flat_atomic_dec_x2\024flat_atomic_fcmpswap\027flat_atomic_fcmpswap"
    "_x2\020flat_atomic_fmax\023flat_atomic_fmax_x2\020flat_atomic_fmin\023f"
    "lat_atomic_fmin_x2\017flat_atomic_inc\022flat_atomic_inc_x2\016flat_ato"
    "mic_or\021flat_atomic_or_x2\020flat_atomic_rsub\023flat_atomic_rsub_x2\020"
    "flat_atomic_smax\023flat_atomic_smax_x2\020flat_atomic_smin\023flat_ato"
    "mic_smin_x2\017flat_atomic_sub\022flat_atomic_sub_x2\020flat_atomic_swa"
    "p\023flat_atomic_swap_x2\020flat_atomic_umax\023flat_atomic_umax_x2\020"
    "flat_atomic_umin\023flat_atomic_umin_x2\017flat_atomic_xor\022flat_atom"
    "ic_xor_x2\017flat_load_dword\021flat_load_dwordx2\021flat_load_dwordx3\021"
    "flat_load_dwordx4\017flat_load_sbyte\020flat_load_sshort\017flat_load_u"
    "byte\020flat_load_ushort\017flat_store_byte\020flat_store_dword\022flat"
    "_store_dwordx2\022flat_store_dwordx3\022flat_store_dwordx4\020flat_stor"
    "e_short\015image_gather4\017image_gather4_b\022image_gather4_b_cl\024im"
    "age_gather4_b_cl_o\021image_gather4_b_o\017image_gather4_c\021image_gat"
    "her4_c_b\024image_gather4_c_b_cl\026image_gather4_c_b_cl_o\023image_gat"
    "her4_c_b_o\022image_gather4_c_cl\024image_gather4_c_cl_o\021image_gathe"
    "r4_c_l\023image_gather4_c_l_o\022image_gather4_c_lz\024image_gather4_c_"
    "lz_o\021image_gather4_c_o\020image_gather4_cl\022image_gather4_cl_o\017"
    "image_gather4_l\021image_gather4_l_o\020image_gather4_lz\022image_gathe"
    "r4_lz_o\017image_gather4_o\015image_get_lod\021image_get_resinfo\nimage"
    "_load\016image_load_mip\014image_sample\016image_sample_b\021image_samp"
    "le_b_cl\023image_sample_b_cl_o\020image_sample_b_o\016image_sample_c\020"
    "image_sample_c_b\023image_sample_c_b_cl\025image_sample_c_b_cl_o\022ima"
    "ge_sample_c_b_o\021image_sample_c_cd\024image_sample_c_cd_cl\026image_s"
    "ample_c_cd_cl_o\023image_sample_c_cd_o\021image_sample_c_cl\023image_sa"
    "mple_c_cl_o\020image_sample_c_d\023image_sample_c_d_cl\025image_sample_"
    "c_d_cl_o\022image_sample_c_d_o\020image_sample_c_l\022image_sample_c_l_"
    "o\021image_sample_c_lz\023image_sample_c_lz_o\020image_sample_c_o\017im"
    "age_sample_cd\022image_sample_cd_cl\024image_sample_cd_cl_o\021image_sa"
    "mple_cd_o\017image_sample_cl\021image_sample_cl_o\016image_sample_d\021"
    "image_sample_d_cl\023image_sample_d_cl_o\020image_sample_d_o\016image_s"
    "ample_l\020image_sample_l_o\017image_sample_lz\021image_sample_lz_o\016"
    "image_sample_o\ts_abs_i32\015s_absdiff_i32\ts_add_i32\ts_add_u32\ns_add"
    "c_u32\ns_addk_i32\ts_and_b32\ts_and_b64\022s_and_saveexec_b64\013s_andn"
    "2_b32\013s_andn2_b64\024s_andn2_saveexec_b64\ns_ashr_i32\ns_ashr_i64\ts"
    "_barrier\017s_bcnt0_i32_b32\017s_bcnt0_i32_b64\017s_bcnt1_i32_b32\017s_"
    "bcnt1_i32_b64\ts_bfe_i32\ts_bfe_i64\ts_bfe_u32\ts_bfe_u64\ts_bfm_b32\ts"
    "_bfm_b64\015s_bitset0_b32\015s_bitset0_b64\015s_bitset1_b32\015s_bitset"
    "1_b64\010s_branch\ns_brev_b32\ns_brev_b64\023s_buffer_load_dword\026s_b"
    "uffer_load_dwordx16\025s_buffer_load_dwordx2\025s_buffer_load_dwordx4\025"
    "s_buffer_load_dwordx8\020s_cbranch_execnz\017s_cbranch_execz\020s_cbran"
    "ch_g_fork\020s_cbranch_i_fork\016s_cbranch_join\016s_cbranch_scc0\016s_"
    "cbranch_scc1\017s_cbranch_vccnz\016s_cbranch_vccz\ns_cmov_b32\ns_cmov_b"
    "64\013s_cmovk_i32\014s_cmp_eq_i32\014s_cmp_eq_u32\014s_cmp_ge_i32\014s_"
    "cmp_ge_u32\014s_cmp_gt_i32\014s_cmp_gt_u32\014s_cmp_le_i32\014s_cmp_le_"
    "u32\014s_cmp_lg_i32\014s_cmp_lg_u32\014s_cmp_lt_i32\014s_cmp_lt_u32\015"
    "s_cmpk_eq_i32\015s_cmpk_eq_u32\015s_cmpk_ge_i32\015s_cmpk_ge_u32\015s_c"
    "mpk_gt_i32\015s_cmpk_gt_u32\015s_cmpk_le_i32\015s_cmpk_le_u32\015s_cmpk"
    "_lg_i32\015s_cmpk_lg_u32\015s_cmpk_lt_i32\015s_cmpk_lt_u32\015s_cselect"
    "_b32\015s_cselect_b64\016s_decperflevel\010s_endpgm\015s_ff0_i32_b32\015"
    "s_ff0_i32_b64\015s_ff1_i32_b32\015s_ff1_i32_b64\013s_flbit_i32\017s_flb"
    "it_i32_b32\017s_flbit_i32_b64\017s_flbit_i32_i64\013s_getpc_b64\014s_ge"
    "treg_b32\014s_icache_inv\016s_incperflevel\014s_load_dword\017s_load_dw"
    "ordx16\016s_load_dwordx2\016s_load_dwordx4\016s_load_dwordx8\ns_lshl_b3"
    "2\ns_lshl_b64\ns_lshr_b32\ns_lshr_b64\ts_max_i32\ts_max_u32\ts_min_i32\t"
    "s_min_u32\ts_mov_b32\ts_mov_b64\015s_mov_fed_b32\017s_mov_regrd_b32\ns_"
    "movk_i32\015s_movreld_b32\015s_movreld_b64\015s_movrels_b32\015s_movrel"
    "s_b64\ts_mul_i32\ns_mulk_i32\ns_nand_b32\ns_nand_b64\023s_nand_saveexec"
    "_b64\005s_nop\ts_nor_b32\ts_nor_b64\022s_nor_saveexec_b64\ts_not_b32\ts"
    "_not_b64\010s_or_b32\010s_or_b64\021s_or_saveexec_b64\ns_orn2_b32\ns_or"
    "n2_b64\023s_orn2_saveexec_b64\016s_quadmask_b32\016s_quadmask_b64\ts_rf"
    "e_b64\ts_sendmsg\015s_sendmsghalt\ts_sethalt\013s_setpc_b64\ts_setprio\014"
    "s_setreg_b32\022s_setreg_imm32_b32\016s_sext_i32_i16\015s_sext_i32_i8\007"
    "s_sleep\ts_sub_i32\ts_sub_u32\ns_subb_u32\014s_swappc_b64\006s_trap\014"
    "s_ttracedata\ts_waitcnt\ts_wqm_b32\ts_wqm_b64\ns_xnor_b32\ns_xnor_b64\023"
    "s_xnor_saveexec_b64\ts_xor_b32\ts_xor_b64\022s_xor_saveexec_b64\030tbuf"
    "fer_load_format_xyzw\026tbuffer_store_format_x\027tbuffer_store_format_"
    "xy\030tbuffer_store_format_xyz\031tbuffer_store_format_xyzw\tv_add_f16\t"
    "v_add_f32\tv_add_f64\tv_add_i32\tv_add_u16\nv_addc_u32\016v_alignbit_b3"
    "2\017v_alignbyte_b32\tv_and_b32\nv_ashr_i32\nv_ashr_i64\015v_ashrrev_b1"
    "6\015v_ashrrev_i32\015v_ashrrev_i64\016v_bcnt_u32_b32\tv_bfe_i32\tv_bfe"
    "_u32\tv_bfi_b32\tv_bfm_b32\013v_bfrev_b32\nv_ceil_f16\nv_ceil_f32\nv_ce"
    "il_f64\tv_clrexcp\017v_cmp_class_f32\023v_cmp_class_f32_e32\017v_cmp_cl"
    "ass_f64\023v_cmp_class_f64_e32\014v_cmp_eq_f32\020v_cmp_eq_f32_e32\014v"
    "_cmp_eq_f64\020v_cmp_eq_f64_e32\014v_cmp_eq_i32\020v_cmp_eq_i32_e32\014"
    "v_cmp_eq_i64\020v_cmp_eq_i64_e32\014v_cmp_eq_u32\020v_cmp_eq_u32_e32\014"
    "v_cmp_eq_u64\020v_cmp_eq_u64_e32\013v_cmp_f_f32\017v_cmp_f_f32_e32\013v"
    "_cmp_f_f64\017v_cmp_f_f64_e32\013v_cmp_f_i32\017v_cmp_f_i32_e32\013v_cm"
    "p_f_i64\017v_cmp_f_i64_e32\013v_cmp_f_u32\017v_cmp_f_u32_e32\013v_cmp_f"
    "_u64\017v_cmp_f_u64_e32\014v_cmp_ge_f32\020v_cmp_ge_f32_e32\014v_cmp_ge"
    "_f64\020v_cmp_ge_f64_e32\014v_cmp_ge_i32\020v_cmp_ge_i32_e32\014v_cmp_g"
    "e_i64\020v_cmp_ge_i64_e32\014v_cmp_ge_u32\020v_cmp_ge_u32_e32\014v_cmp_"
    "ge_u64\020v_cmp_ge_u64_e32\014v_cmp_gt_f32\020v_cmp_gt_f32_e32\014v_cmp"
    "_gt_f64\020v_cmp_gt_f64_e32\014v_cmp_gt_i32\020v_cmp_gt_i32_e32\014v_cm"
    "p_gt_i64\020v_cmp_gt_i64_e32\014v_cmp_gt_u32\020v_cmp_gt_u32_e32\014v_c"
    "mp_gt_u64\020v_cmp_gt_u64_e32\014v_cmp_le_f32\020v_cmp_le_f32_e32\014v_"
    "cmp_le_f64\020v_cmp_le_f64_e32\014v_cmp_le_i32\020v_cmp_le_i32_e32\014v"
    "_cmp_le_i64\020v_cmp_le_i64_e32\014v_cmp_le_u32\020v_cmp_le_u32_e32\014"
    "v_cmp_le_u64\020v_cmp_le_u64_e32\014v_cmp_lg_f32\020v_cmp_lg_f32_e32\014"
    "v_cmp_lg_f64\020v_cmp_lg_f64_e32\014v_cmp_lt_f32\020v_cmp_lt_f32_e32\014"
    "v_cmp_lt_f64\020v_cmp_lt_f64_e32\014v_cmp_lt_i32\020v_cmp_lt_i32_e32\014"
    "v_cmp_lt_i64\020v_cmp_lt_i64_e32\014v_cmp_lt_u32\020v_cmp_lt_u32_e32\014"
    "v_cmp_lt_u64\020v_cmp_lt_u64_e32\014v_cmp_ne_i32\020v_cmp_ne_i32_e32\014"
    "v_cmp_ne_i64\020v_cmp_ne_i64_e32\014v_cmp_ne_u32\020v_cmp_ne_u32_e32\014"
    "v_cmp_ne_u64\020v_cmp_ne_u64_e32\015v_cmp_neq_f32\021v_cmp_neq_f32_e32\015"
    "v_cmp_neq_f64\021v_cmp_neq_f64_e32\015v_cmp_nge_f32\021v_cmp_nge_f32_e3"
    "2\015v_cmp_nge_f64\021v_cmp_nge_f64_e32\015v_cmp_ngt_f32\021v_cmp_ngt_f"
    "32_e32\015v_cmp_ngt_f64\021v_cmp_ngt_f64_e32\015v_cmp_nle_f32\021v_cmp_"
    "nle_f32_e32\015v_cmp_nle_f64\021v_cmp_nle_f64_e32\015v_cmp_nlg_f32\021v"
    "_cmp_nlg_f32_e32\015v_cmp_nlg_f64\021v_cmp_nlg_f64_e32\015v_cmp_nlt_f32"
    "\021v_cmp_nlt_f32_e32\015v_cmp_nlt_f64\021v_cmp_nlt_f64_e32\013v_cmp_o_"
    "f32\017v_cmp_o_f32_e32\013v_cmp_o_f64\017v_cmp_o_f64_e32\013v_cmp_t_i32"
    "\017v_cmp_t_i32_e32\013v_cmp_t_i64\017v_cmp_t_i64_e32\013v_cmp_t_u32\017"
    "v_cmp_t_u32_e32\013v_cmp_t_u64\017v_cmp_t_u64_e32\015v_cmp_tru_f32\021v"
    "_cmp_tru_f32_e32\015v_cmp_tru_f64\021v_cmp_tru_f64_e32\013v_cmp_u_f32\017"
    "v_cmp_u_f32_e32\013v_cmp_u_f64\017v_cmp_u_f64_e32\015v_cmps_eq_f32\021v"
    "_cmps_eq_f32_e32\015v_cmps_eq_f64\021v_cmps_eq_f64_e32\014v_cmps_f_f32\020"
    "v_cmps_f_f32_e32\014v_cmps_f_f64\020v_cmps_f_f64_e32\015v_cmps_ge_f32\021"
    "v_cmps_ge_f32_e32\015v_cmps_ge_f64\021v_cmps_ge_f64_e32\015v_cmps_gt_f3"
    "2\021v_cmps_gt_f32_e32\015v_cmps_gt_f64\021v_cmps_gt_f64_e32\015v_cmps_"
    "le_f32\021v_cmps_le_f32_e32\015v_cmps_le_f64\021v_cmps_le_f64_e32\015v_"
    "cmps_lg_f32\021v_cmps_lg_f32_e32\015v_cmps_lg_f64\021v_cmps_lg_f64_e32\015"
    "v_cmps_lt_f32\021v_cmps_lt_f32_e32\015v_cmps_lt_f64\021v_cmps_lt_f64_e3"
    "2\016v_cmps_neq_f32\022v_cmps_neq_f32_e32\016v_cmps_neq_f64\022v_cmps_n"
    "eq_f64_e32\016v_cmps_nge_f32\022v_cmps_nge_f32_e32\016v_cmps_nge_f64\022"
    "v_cmps_nge_f64_e32\016v_cmps_ngt_f32\022v_cmps_ngt_f32_e32\016v_cmps_ng"
    "t_f64\022v_cmps_ngt_f64_e32\016v_cmps_nle_f32\022v_cmps_nle_f32_e32\016"
    "v_cmps_nle_f64\022v_cmps_nle_f64_e32\016v_cmps_nlg_f32\022v_cmps_nlg_f3"
    "2_e32\016v_cmps_nlg_f64\022v_cmps_nlg_f64_e32\016v_cmps_nlt_f32\022v_cm"
    "ps_nlt_f32_e32\016v_cmps_nlt_f64\022v_cmps_nlt_f64_e32\014v_cmps_o_f32\020"
    "v_cmps_o_f32_e32\014v_cmps_o_f64\020v_cmps_o_f64_e32\016v_cmps_tru_f32\022"
    "v_cmps_tru_f32_e32\016v_cmps_tru_f64\022v_cmps_tru_f64_e32\014v_cmps_u_"
    "f32\020v_cmps_u_f32_e32\014v_cmps_u_f64\020v_cmps_u_f64_e32\016v_cmpsx_"
    "eq_f32\022v_cmpsx_eq_f32_e32\016v_cmpsx_eq_f64\022v_cmpsx_eq_f64_e32\015"
    "v_cmpsx_f_f32\021v_cmpsx_f_f32_e32\015v_cmpsx_f_f64\021v_cmpsx_f_f64_e3"
    "2\016v_cmpsx_ge_f32\022v_cmpsx_ge_f32_e32\016v_cmpsx_ge_f64\022v_cmpsx_"
    "ge_f64_e32\016v_cmpsx_gt_f32\022v_cmpsx_gt_f32_e32\016v_cmpsx_gt_f64\022"
    "v_cmpsx_gt_f64_e32\016v_cmpsx_le_f32\022v_cmpsx_le_f32_e32\016v_cmpsx_l"
    "e_f64\022v_cmpsx_le_f64_e32\016v_cmpsx_lg_f32\022v_cmpsx_lg_f32_e32\016"
    "v_cmpsx_lg_f64\022v_cmpsx_lg_f64_e32\016v_cmpsx_lt_f32\022v_cmpsx_lt_f3"
    "2_e32\016v_cmpsx_lt_f64\022v_cmpsx_lt_f64_e32\017v_cmpsx_neq_f32\023v_c"
    "mpsx_neq_f32_e32\017v_cmpsx_neq_f64\023v_cmpsx_neq_f64_e32\017v_cmpsx_n"
    "ge_f32\023v_cmpsx_nge_f32_e32\017v_cmpsx_nge_f64\023v_cmpsx_nge_f64_e32"
    "\017v_cmpsx_ngt_f32\023v_cmpsx_ngt_f32_e32\017v_cmpsx_ngt_f64\023v_cmps"
    "x_ngt_f64_e32\017v_cmpsx_nle_f32\023v_cmpsx_nle_f32_e32\017v_cmpsx_nle_"
    "f64\023v_cmpsx_nle_f64_e32\017v_cmpsx_nlg_f32\023v_cmpsx_nlg_f32_e32\017"
    "v_cmpsx_nlg_f64\023v_cmpsx_nlg_f64_e32\017v_cmpsx_nlt_f32\023v_cmpsx_nl"
    "t_f32_e32\017v_cmpsx_nlt_f64\023v_cmpsx_nlt_f64_e32\015v_cmpsx_o_f32\021"
    "v_cmpsx_o_f32_e32\015v_cmpsx_o_f64\021v_cmpsx_o_f64_e32\017v_cmpsx_tru_"
    "f32\023v_cmpsx_tru_f32_e32\017v_cmpsx_tru_f64\023v_cmpsx_tru_f64_e32\015"
    "v_cmpsx_u_f32\021v_cmpsx_u_f32_e32\015v_cmpsx_u_f64\021v_cmpsx_u_f64_e3"
    "2\020v_cmpx_class_f32\024v_cmpx_class_f32_e32\020v_cmpx_class_f64\024v_"
    "cmpx_class_f64_e32\015v_cmpx_eq_f32\021v_cmpx_eq_f32_e32\015v_cmpx_eq_f"
    "64\021v_cmpx_eq_f64_e32\015v_cmpx_eq_i32\021v_cmpx_eq_i32_e32\015v_cmpx"
    "_eq_i64\021v_cmpx_eq_i64_e32\015v_cmpx_eq_u32\021v_cmpx_eq_u32_e32\015v"
    "_cmpx_eq_u64\021v_cmpx_eq_u64_e32\014v_cmpx_f_f32\020v_cmpx_f_f32_e32\014"
    "v_cmpx_f_f64\020v_cmpx_f_f64_e32\014v_cmpx_f_i32\020v_cmpx_f_i32_e32\014"
    "v_cmpx_f_i64\020v_cmpx_f_i64_e32\014v_cmpx_f_u32\020v_cmpx_f_u32_e32\014"
    "v_cmpx_f_u64\020v_cmpx_f_u64_e32\015v_cmpx_ge_f32\021v_cmpx_ge_f32_e32\015"
    "v_cmpx_ge_f64\021v_cmpx_ge_f64_e32\015v_cmpx_ge_i32\021v_cmpx_ge_i32_e3"
    "2\015v_cmpx_ge_i64\021v_cmpx_ge_i64_e32\015v_cmpx_ge_u32\021v_cmpx_ge_u"
    "32_e32\015v_cmpx_ge_u64\021v_cmpx_ge_u64_e32\015v_cmpx_gt_f32\021v_cmpx"
    "_gt_f32_e32\015v_cmpx_gt_f64\021v_cmpx_gt_f64_e32\015v_cmpx_gt_i32\021v"
    "_cmpx_gt_i32_e32\015v_cmpx_gt_i64\021v_cmpx_gt_i64_e32\015v_cmpx_gt_u32"
    "\021v_cmpx_gt_u32_e32\015v_cmpx_gt_u64\021v_cmpx_gt_u64_e32\015v_cmpx_l"
    "e_f32\021v_cmpx_le_f32_e32\015v_cmpx_le_f64\021v_cmpx_le_f64_e32\015v_c"
    "mpx_le_i32\021v_cmpx_le_i32_e32\015v_cmpx_le_i64\021v_cmpx_le_i64_e32\015"
    "v_cmpx_le_u32\021v_cmpx_le_u32_e32\015v_cmpx_le_u64\021v_cmpx_le_u64_e3"
    "2\015v_cmpx_lg_f32\021v_cmpx_lg_f32_e32\015v_cmpx_lg_f64\021v_cmpx_lg_f"
    "64_e32\015v_cmpx_lt_f32\021v_cmpx_lt_f32_e32\015v_cmpx_lt_f64\021v_cmpx"
    "_lt_f64_e32\015v_cmpx_lt_i32\021v_cmpx_lt_i32_e32\015v_cmpx_lt_i64\021v"
    "_cmpx_lt_i64_e32\015v_cmpx_lt_u32\021v_cmpx_lt_u32_e32\015v_cmpx_lt_u64"
    "\021v_cmpx_lt_u64_e32\015v_cmpx_ne_i32\021v_cmpx_ne_i32_e32\015v_cmpx_n"
    "e_i64\021v_cmpx_ne_i64_e32\015v_cmpx_ne_u32\021v_cmpx_ne_u32_e32\015v_c"
    "mpx_ne_u64\021v_cmpx_ne_u64_e32\016v_cmpx_neq_f32\022v_cmpx_neq_f32_e32"
    "\016v_cmpx_neq_f64\022v_cmpx_neq_f64_e32\016v_cmpx_nge_f32\022v_cmpx_ng"
    "e_f32_e32\016v_cmpx_nge_f64\022v_cmpx_nge_f64_e32\016v_cmpx_ngt_f32\022"
    "v_cmpx_ngt_f32_e32\016v_cmpx_ngt_f64\022v_cmpx_ngt_f64_e32\016v_cmpx_nl"
    "e_f32\022v_cmpx_nle_f32_e32\016v_cmpx_nle_f64\022v_cmpx_nle_f64_e32\016"
    "v_cmpx_nlg_f32\022v_cmpx_nlg_f32_e32\016v_cmpx_nlg_f64\022v_cmpx_nlg_f6"
    "4_e32\016v_cmpx_nlt_f32\022v_cmpx_nlt_f32_e32\016v_cmpx_nlt_f64\022v_cm"
    "px_nlt_f64_e32\014v_cmpx_o_f32\020v_cmpx_o_f32_e32\014v_cmpx_o_f64\020v"
    "_cmpx_o_f64_e32\014v_cmpx_t_i32\020v_cmpx_t_i32_e32\014v_cmpx_t_i64\020"
    "v_cmpx_t_i64_e32\014v_cmpx_t_u32\020v_cmpx_t_u32_e32\014v_cmpx_t_u64\020"
    "v_cmpx_t_u64_e32\016v_cmpx_tru_f32\022v_cmpx_tru_f32_e32\016v_cmpx_tru_"
    "f64\022v_cmpx_tru_f64_e32\014v_cmpx_u_f32\020v_cmpx_u_f32_e32\014v_cmpx"
    "_u_f64\020v_cmpx_u_f64_e32\015v_cndmask_b32\tv_cos_f16\tv_cos_f32\014v_"
    "cubeid_f32\014v_cubema_f32\014v_cubesc_f32\014v_cubetc_f32\015v_cvt_f16"
    "_f32\015v_cvt_f16_i16\015v_cvt_f16_u16\015v_cvt_f32_f16\015v_cvt_f32_f6"
    "4\015v_cvt_f32_i32\015v_cvt_f32_u32\020v_cvt_f32_ubyte0\020v_cvt_f32_ub"
    "yte1\020v_cvt_f32_ubyte2\020v_cvt_f32_ubyte3\015v_cvt_f64_f32\015v_cvt_"
    "f64_i32\015v_cvt_f64_u32\021v_cvt_flr_i32_f32\015v_cvt_i16_f16\015v_cvt"
    "_i32_f32\015v_cvt_i32_f64\020v_cvt_off_f32_i4\020v_cvt_pk_i16_i32\020v_"
    "cvt_pk_u16_u32\024v_cvt_pkaccum_u8_f32\024v_cvt_pknorm_i16_f32\024v_cvt"
    "_pknorm_u16_f32\023v_cvt_pkrtz_f16_f32\021v_cvt_rpi_i32_f32\015v_cvt_u1"
    "6_f16\015v_cvt_u32_f32\015v_cvt_u32_f64\017v_div_fixup_f32\017v_div_fix"
    "up_f64\016v_div_fmas_f32\016v_div_fmas_f64\017v_div_scale_f32\017v_div_"
    "scale_f64\tv_exp_f16\tv_exp_f32\020v_exp_legacy_f32\nv_ffbh_i32\nv_ffbh"
    "_u32\nv_ffbl_b32\013v_floor_f16\013v_floor_f32\013v_floor_f64\tv_fma_f3"
    "2\tv_fma_f64\013v_fract_f16\013v_fract_f32\013v_fract_f64\023v_frexp_ex"
    "p_i16_f16\023v_frexp_exp_i32_f32\023v_frexp_exp_i32_f64\020v_frexp_mant"
    "_f16\020v_frexp_mant_f32\020v_frexp_mant_f64\020v_interp_mov_f32\017v_i"
    "nterp_p1_f32\017v_interp_p2_f32\013v_ldexp_f16\013v_ldexp_f32\013v_ldex"
    "p_f64\017v_log_clamp_f32\tv_log_f16\tv_log_f32\020v_log_legacy_f32\nv_l"
    "shl_b32\nv_lshl_b64\015v_lshlrev_b16\015v_lshlrev_b32\015v_lshlrev_b64\n"
    "v_lshr_b32\nv_lshr_b64\015v_lshrrev_b16\015v_lshrrev_b32\015v_lshrrev_b"
    "64\tv_mac_f16\tv_mac_f32\020v_mac_legacy_f32\tv_mad_f32\015v_mad_i32_i2"
    "4\015v_mad_i64_i32\020v_mad_legacy_f32\015v_mad_u32_u24\015v_mad_u64_u3"
    "2\013v_madak_f16\013v_madak_f32\013v_madmk_f16\013v_madmk_f32\nv_max3_f"
    "32\nv_max3_i32\nv_max3_u32\tv_max_f16\tv_max_f32\tv_max_f64\tv_max_i16\t"
    "v_max_i32\020v_max_legacy_f32\tv_max_u16\tv_max_u32\022v_mbcnt_hi_u32_b"
    "32\022v_mbcnt_lo_u32_b32\nv_med3_f32\nv_med3_i32\nv_med3_u32\nv_min3_f3"
    "2\nv_min3_i32\nv_min3_u32\tv_min_f16\tv_min_f32\tv_min_f64\tv_min_i16\t"
    "v_min_i32\020v_min_legacy_f32\tv_min_u16\tv_min_u32\tv_mov_b32\015v_mov"
    "_fed_b32\015v_movreld_b32\015v_movrels_b32\016v_movrelsd_b32\016v_mqsad"
    "_u16_u8\016v_mqsad_u32_u8\tv_mul_f16\tv_mul_f32\tv_mul_f64\014v_mul_hi_"
    "i32\020v_mul_hi_i32_i24\014v_mul_hi_u32\020v_mul_hi_u32_u24\015v_mul_i3"
    "2_i24\020v_mul_legacy_f32\014v_mul_lo_i32\014v_mul_lo_u16\014v_mul_lo_u"
    "32\015v_mul_u32_u24\014v_mullit_f32\005v_nop\tv_not_b32\010v_or_b32\020"
    "v_qsad_pk_u16_u8\017v_rcp_clamp_f32\017v_rcp_clamp_f64\tv_rcp_f16\tv_rc"
    "p_f32\tv_rcp_f64\017v_rcp_iflag_f32\020v_rcp_legacy_f32\023v_readfirstl"
    "ane_b32\016v_readlane_b32\013v_rndne_f16\013v_rndne_f32\013v_rndne_f64\017"
    "v_rsq_clamp_f32\017v_rsq_clamp_f64\tv_rsq_f16\tv_rsq_f32\tv_rsq_f64\020"
    "v_rsq_legacy_f32\tv_sad_u32\tv_sin_f16\tv_sin_f32\nv_sqrt_f16\nv_sqrt_f"
    "32\nv_sqrt_f64\tv_sub_f16\tv_sub_f32\tv_sub_i32\tv_sub_u16\nv_subb_u32\015"
    "v_subbrev_u32\014v_subrev_f16\014v_subrev_f32\014v_subrev_i32\014v_subr"
    "ev_u16\020v_trig_preop_f64\013v_trunc_f16\013v_trunc_f32\013v_trunc_f64"
    "\017v_writelane_b32\tv_xor_b32";

namespace {
  struct MatchEntry {
    uint16_t Mnemonic;
    uint16_t Opcode;
    uint16_t ConvertFn;
    uint8_t RequiredFeatures;
    uint8_t Classes[13];
    StringRef getMnemonic() const {
      return StringRef(MnemonicTable + Mnemonic + 1,
                       MnemonicTable[Mnemonic]);
    }
  };

  // Predicate for searching for an opcode.
  struct LessOpcode {
    bool operator()(const MatchEntry &LHS, StringRef RHS) {
      return LHS.getMnemonic() < RHS;
    }
    bool operator()(StringRef LHS, const MatchEntry &RHS) {
      return LHS < RHS.getMnemonic();
    }
    bool operator()(const MatchEntry &LHS, const MatchEntry &RHS) {
      return LHS.getMnemonic() < RHS.getMnemonic();
    }
  };
} // end anonymous namespace.

static const MatchEntry MatchTable0[] = {
  { 0 /* CALL_FS */, AMDGPU::CF_CALL_FS_EG, Convert_NoOperands, 0, {  }, },
  { 0 /* CALL_FS */, AMDGPU::CF_CALL_FS_R600, Convert_NoOperands, 0, {  }, },
  { 8 /* CF_END */, AMDGPU::CF_END_CM, Convert_NoOperands, 0, {  }, },
  { 8 /* CF_END */, AMDGPU::CF_END_EG, Convert_NoOperands, 0, {  }, },
  { 8 /* CF_END */, AMDGPU::CF_END_R600, Convert_NoOperands, 0, {  }, },
  { 15 /* CONTINUE */, AMDGPU::CF_CONTINUE_EG, Convert__Imm1_1, 0, { MCK__64_, MCK_Imm }, },
  { 15 /* CONTINUE */, AMDGPU::CF_CONTINUE_R600, Convert__Imm1_1, 0, { MCK__64_, MCK_Imm }, },
  { 24 /* ELSE */, AMDGPU::CF_ELSE_EG, Convert__Imm1_1__Imm1_3, 0, { MCK__64_, MCK_Imm, MCK_POP_COLON_, MCK_Imm }, },
  { 24 /* ELSE */, AMDGPU::CF_ELSE_R600, Convert__Imm1_1__Imm1_3, 0, { MCK__64_, MCK_Imm, MCK_POP_COLON_, MCK_Imm }, },
  { 29 /* END_LOOP */, AMDGPU::END_LOOP_EG, Convert__Imm1_1, 0, { MCK__64_, MCK_Imm }, },
  { 29 /* END_LOOP */, AMDGPU::END_LOOP_R600, Convert__Imm1_1, 0, { MCK__64_, MCK_Imm }, },
  { 38 /* INTERP_LOAD */, AMDGPU::INTERP_VEC_LOAD, Convert__Reg1_2__Imm1_0, 0, { MCK_Imm, MCK__COLON_, MCK_R600_Reg128 }, },
  { 50 /* INTERP_PAIR_XY */, AMDGPU::INTERP_PAIR_XY, Convert__Reg1_4__imm_95_0__Imm1_0__Reg1_1__Reg1_2, 0, { MCK_Imm, MCK_R600_TReg32_Y, MCK_R600_TReg32_X, MCK__COLON_, MCK_R600_TReg32_X, MCK_dst1 }, },
  { 65 /* INTERP_PAIR_ZW */, AMDGPU::INTERP_PAIR_ZW, Convert__Reg1_4__imm_95_0__Imm1_0__Reg1_1__Reg1_2, 0, { MCK_Imm, MCK_R600_TReg32_Y, MCK_R600_TReg32_X, MCK__COLON_, MCK_R600_TReg32_Z, MCK_dst1 }, },
  { 80 /* JUMP */, AMDGPU::CF_JUMP_EG, Convert__Imm1_1__Imm1_3, 0, { MCK__64_, MCK_Imm, MCK_POP_COLON_, MCK_Imm }, },
  { 80 /* JUMP */, AMDGPU::CF_JUMP_R600, Convert__Imm1_1__Imm1_3, 0, { MCK__64_, MCK_Imm, MCK_POP_COLON_, MCK_Imm }, },
  { 85 /* LOOP_BREAK */, AMDGPU::LOOP_BREAK_EG, Convert__Imm1_1, 0, { MCK__64_, MCK_Imm }, },
  { 85 /* LOOP_BREAK */, AMDGPU::LOOP_BREAK_R600, Convert__Imm1_1, 0, { MCK__64_, MCK_Imm }, },
  { 96 /* LOOP_START_DX10 */, AMDGPU::WHILE_LOOP_EG, Convert__Imm1_1, 0, { MCK__64_, MCK_Imm }, },
  { 96 /* LOOP_START_DX10 */, AMDGPU::WHILE_LOOP_R600, Convert__Imm1_1, 0, { MCK__64_, MCK_Imm }, },
  { 112 /* MASK_WRITE */, AMDGPU::MASK_WRITE, Convert__Reg1_0, 0, { MCK_R600_Reg32 }, },
  { 123 /* PAD */, AMDGPU::PAD, Convert_NoOperands, 0, {  }, },
  { 127 /* POP */, AMDGPU::POP_EG, Convert__Imm1_1__Imm1_3, 0, { MCK__64_, MCK_Imm, MCK_POP_COLON_, MCK_Imm }, },
  { 127 /* POP */, AMDGPU::POP_R600, Convert__Imm1_1__Imm1_3, 0, { MCK__64_, MCK_Imm, MCK_POP_COLON_, MCK_Imm }, },
  { 131 /* PUSH */, AMDGPU::CF_PUSH_EG, Convert__Imm1_1__Imm1_3, 0, { MCK__64_, MCK_Imm, MCK_POP_COLON_, MCK_Imm }, },
  { 136 /* PUSH_ELSE */, AMDGPU::CF_PUSH_ELSE_R600, Convert__Imm1_1, 0, { MCK__64_, MCK_Imm }, },
  { 146 /* TEX */, AMDGPU::CF_TC_EG, Convert__Imm1_2__Imm1_0, 0, { MCK_Imm, MCK__64_, MCK_Imm }, },
  { 146 /* TEX */, AMDGPU::CF_TC_R600, Convert__Imm1_2__Imm1_0, 0, { MCK_Imm, MCK__64_, MCK_Imm }, },
  { 150 /* VTX */, AMDGPU::CF_VC_EG, Convert__Imm1_2__Imm1_0, 0, { MCK_Imm, MCK__64_, MCK_Imm }, },
  { 150 /* VTX */, AMDGPU::CF_VC_R600, Convert__Imm1_2__Imm1_0, 0, { MCK_Imm, MCK__64_, MCK_Imm }, },
  { 154 /* buffer_atomic_add */, AMDGPU::BUFFER_ATOMIC_ADD_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 154 /* buffer_atomic_add */, AMDGPU::BUFFER_ATOMIC_ADD_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 154 /* buffer_atomic_add */, AMDGPU::BUFFER_ATOMIC_ADD_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 154 /* buffer_atomic_add */, AMDGPU::BUFFER_ATOMIC_ADD_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 154 /* buffer_atomic_add */, AMDGPU::BUFFER_ATOMIC_ADD_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 154 /* buffer_atomic_add */, AMDGPU::BUFFER_ATOMIC_ADD_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 172 /* buffer_atomic_and */, AMDGPU::BUFFER_ATOMIC_AND_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 172 /* buffer_atomic_and */, AMDGPU::BUFFER_ATOMIC_AND_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 172 /* buffer_atomic_and */, AMDGPU::BUFFER_ATOMIC_AND_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 172 /* buffer_atomic_and */, AMDGPU::BUFFER_ATOMIC_AND_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 172 /* buffer_atomic_and */, AMDGPU::BUFFER_ATOMIC_AND_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 172 /* buffer_atomic_and */, AMDGPU::BUFFER_ATOMIC_AND_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 190 /* buffer_atomic_or */, AMDGPU::BUFFER_ATOMIC_OR_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 190 /* buffer_atomic_or */, AMDGPU::BUFFER_ATOMIC_OR_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 190 /* buffer_atomic_or */, AMDGPU::BUFFER_ATOMIC_OR_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 190 /* buffer_atomic_or */, AMDGPU::BUFFER_ATOMIC_OR_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 190 /* buffer_atomic_or */, AMDGPU::BUFFER_ATOMIC_OR_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 190 /* buffer_atomic_or */, AMDGPU::BUFFER_ATOMIC_OR_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 207 /* buffer_atomic_smax */, AMDGPU::BUFFER_ATOMIC_SMAX_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 207 /* buffer_atomic_smax */, AMDGPU::BUFFER_ATOMIC_SMAX_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 207 /* buffer_atomic_smax */, AMDGPU::BUFFER_ATOMIC_SMAX_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 207 /* buffer_atomic_smax */, AMDGPU::BUFFER_ATOMIC_SMAX_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 207 /* buffer_atomic_smax */, AMDGPU::BUFFER_ATOMIC_SMAX_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 207 /* buffer_atomic_smax */, AMDGPU::BUFFER_ATOMIC_SMAX_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 226 /* buffer_atomic_smin */, AMDGPU::BUFFER_ATOMIC_SMIN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 226 /* buffer_atomic_smin */, AMDGPU::BUFFER_ATOMIC_SMIN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 226 /* buffer_atomic_smin */, AMDGPU::BUFFER_ATOMIC_SMIN_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 226 /* buffer_atomic_smin */, AMDGPU::BUFFER_ATOMIC_SMIN_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 226 /* buffer_atomic_smin */, AMDGPU::BUFFER_ATOMIC_SMIN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 226 /* buffer_atomic_smin */, AMDGPU::BUFFER_ATOMIC_SMIN_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 245 /* buffer_atomic_sub */, AMDGPU::BUFFER_ATOMIC_SUB_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 245 /* buffer_atomic_sub */, AMDGPU::BUFFER_ATOMIC_SUB_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 245 /* buffer_atomic_sub */, AMDGPU::BUFFER_ATOMIC_SUB_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 245 /* buffer_atomic_sub */, AMDGPU::BUFFER_ATOMIC_SUB_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 245 /* buffer_atomic_sub */, AMDGPU::BUFFER_ATOMIC_SUB_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 245 /* buffer_atomic_sub */, AMDGPU::BUFFER_ATOMIC_SUB_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 263 /* buffer_atomic_swap */, AMDGPU::BUFFER_ATOMIC_SWAP_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 263 /* buffer_atomic_swap */, AMDGPU::BUFFER_ATOMIC_SWAP_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 263 /* buffer_atomic_swap */, AMDGPU::BUFFER_ATOMIC_SWAP_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 263 /* buffer_atomic_swap */, AMDGPU::BUFFER_ATOMIC_SWAP_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 263 /* buffer_atomic_swap */, AMDGPU::BUFFER_ATOMIC_SWAP_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 263 /* buffer_atomic_swap */, AMDGPU::BUFFER_ATOMIC_SWAP_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 282 /* buffer_atomic_umax */, AMDGPU::BUFFER_ATOMIC_UMAX_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 282 /* buffer_atomic_umax */, AMDGPU::BUFFER_ATOMIC_UMAX_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 282 /* buffer_atomic_umax */, AMDGPU::BUFFER_ATOMIC_UMAX_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 282 /* buffer_atomic_umax */, AMDGPU::BUFFER_ATOMIC_UMAX_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 282 /* buffer_atomic_umax */, AMDGPU::BUFFER_ATOMIC_UMAX_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 282 /* buffer_atomic_umax */, AMDGPU::BUFFER_ATOMIC_UMAX_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 301 /* buffer_atomic_umin */, AMDGPU::BUFFER_ATOMIC_UMIN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 301 /* buffer_atomic_umin */, AMDGPU::BUFFER_ATOMIC_UMIN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 301 /* buffer_atomic_umin */, AMDGPU::BUFFER_ATOMIC_UMIN_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 301 /* buffer_atomic_umin */, AMDGPU::BUFFER_ATOMIC_UMIN_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 301 /* buffer_atomic_umin */, AMDGPU::BUFFER_ATOMIC_UMIN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 301 /* buffer_atomic_umin */, AMDGPU::BUFFER_ATOMIC_UMIN_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 320 /* buffer_atomic_xor */, AMDGPU::BUFFER_ATOMIC_XOR_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 320 /* buffer_atomic_xor */, AMDGPU::BUFFER_ATOMIC_XOR_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 320 /* buffer_atomic_xor */, AMDGPU::BUFFER_ATOMIC_XOR_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 320 /* buffer_atomic_xor */, AMDGPU::BUFFER_ATOMIC_XOR_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 320 /* buffer_atomic_xor */, AMDGPU::BUFFER_ATOMIC_XOR_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 320 /* buffer_atomic_xor */, AMDGPU::BUFFER_ATOMIC_XOR_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTEanonymous_781_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTEanonymous_781_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORDanonymous_781_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORDanonymous_781_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2anonymous_781_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2anonymous_781_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4anonymous_781_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4anonymous_781_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_Xanonymous_781_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_Xanonymous_781_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XYanonymous_781_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XYanonymous_781_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZanonymous_781_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZanonymous_781_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_96, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZWanonymous_781_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZWanonymous_781_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORTanonymous_781_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORTanonymous_781_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 752 /* ds_add_rtn_u32 */, AMDGPU::DS_ADD_RTN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 752 /* ds_add_rtn_u32 */, AMDGPU::DS_ADD_RTN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 767 /* ds_add_rtn_u64 */, AMDGPU::DS_ADD_RTN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 767 /* ds_add_rtn_u64 */, AMDGPU::DS_ADD_RTN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 782 /* ds_add_src2_u32 */, AMDGPU::DS_ADD_SRC2_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 782 /* ds_add_src2_u32 */, AMDGPU::DS_ADD_SRC2_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 798 /* ds_add_src2_u64 */, AMDGPU::DS_ADD_SRC2_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 798 /* ds_add_src2_u64 */, AMDGPU::DS_ADD_SRC2_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 814 /* ds_add_u32 */, AMDGPU::DS_ADD_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 814 /* ds_add_u32 */, AMDGPU::DS_ADD_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 825 /* ds_add_u64 */, AMDGPU::DS_ADD_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 825 /* ds_add_u64 */, AMDGPU::DS_ADD_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 836 /* ds_and_b32 */, AMDGPU::DS_AND_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 836 /* ds_and_b32 */, AMDGPU::DS_AND_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 847 /* ds_and_b64 */, AMDGPU::DS_AND_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 847 /* ds_and_b64 */, AMDGPU::DS_AND_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 858 /* ds_and_rtn_b32 */, AMDGPU::DS_AND_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 858 /* ds_and_rtn_b32 */, AMDGPU::DS_AND_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 873 /* ds_and_rtn_b64 */, AMDGPU::DS_AND_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 873 /* ds_and_rtn_b64 */, AMDGPU::DS_AND_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 888 /* ds_and_src2_b64 */, AMDGPU::DS_AND_SRC2_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 888 /* ds_and_src2_b64 */, AMDGPU::DS_AND_SRC2_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 904 /* ds_and_src_b32 */, AMDGPU::DS_AND_SRC2_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 904 /* ds_and_src_b32 */, AMDGPU::DS_AND_SRC2_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 919 /* ds_append */, AMDGPU::DS_APPEND_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 919 /* ds_append */, AMDGPU::DS_APPEND_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 929 /* ds_cmpst_b32 */, AMDGPU::DS_CMPST_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 929 /* ds_cmpst_b32 */, AMDGPU::DS_CMPST_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 942 /* ds_cmpst_b64 */, AMDGPU::DS_CMPST_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 942 /* ds_cmpst_b64 */, AMDGPU::DS_CMPST_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 955 /* ds_cmpst_f32 */, AMDGPU::DS_CMPST_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 955 /* ds_cmpst_f32 */, AMDGPU::DS_CMPST_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 968 /* ds_cmpst_f64 */, AMDGPU::DS_CMPST_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 968 /* ds_cmpst_f64 */, AMDGPU::DS_CMPST_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 981 /* ds_cmpst_rtn_b32 */, AMDGPU::DS_CMPST_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 981 /* ds_cmpst_rtn_b32 */, AMDGPU::DS_CMPST_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 998 /* ds_cmpst_rtn_b64 */, AMDGPU::DS_CMPST_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 998 /* ds_cmpst_rtn_b64 */, AMDGPU::DS_CMPST_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1015 /* ds_cmpst_rtn_f32 */, AMDGPU::DS_CMPST_RTN_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1015 /* ds_cmpst_rtn_f32 */, AMDGPU::DS_CMPST_RTN_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1032 /* ds_cmpst_rtn_f64 */, AMDGPU::DS_CMPST_RTN_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1032 /* ds_cmpst_rtn_f64 */, AMDGPU::DS_CMPST_RTN_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1049 /* ds_consume */, AMDGPU::DS_CONSUME_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1049 /* ds_consume */, AMDGPU::DS_CONSUME_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1060 /* ds_dec_rtn_u32 */, AMDGPU::DS_DEC_RTN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1060 /* ds_dec_rtn_u32 */, AMDGPU::DS_DEC_RTN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1075 /* ds_dec_rtn_u64 */, AMDGPU::DS_DEC_RTN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1075 /* ds_dec_rtn_u64 */, AMDGPU::DS_DEC_RTN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1090 /* ds_dec_src2_u32 */, AMDGPU::DS_DEC_SRC2_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1090 /* ds_dec_src2_u32 */, AMDGPU::DS_DEC_SRC2_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1106 /* ds_dec_src2_u64 */, AMDGPU::DS_DEC_SRC2_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1106 /* ds_dec_src2_u64 */, AMDGPU::DS_DEC_SRC2_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1122 /* ds_dec_u32 */, AMDGPU::DS_DEC_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1122 /* ds_dec_u32 */, AMDGPU::DS_DEC_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1133 /* ds_dec_u64 */, AMDGPU::DS_DEC_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1133 /* ds_dec_u64 */, AMDGPU::DS_DEC_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1144 /* ds_gws_barrier */, AMDGPU::DS_GWS_BARRIER_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_gds }, },
  { 1144 /* ds_gws_barrier */, AMDGPU::DS_GWS_BARRIER_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_gds }, },
  { 1159 /* ds_gws_init */, AMDGPU::DS_GWS_INIT_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_gds }, },
  { 1159 /* ds_gws_init */, AMDGPU::DS_GWS_INIT_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_gds }, },
  { 1171 /* ds_gws_sema_br */, AMDGPU::DS_GWS_SEMA_BR_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_gds }, },
  { 1171 /* ds_gws_sema_br */, AMDGPU::DS_GWS_SEMA_BR_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_gds }, },
  { 1186 /* ds_gws_sema_p */, AMDGPU::DS_GWS_SEMA_P_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_gds }, },
  { 1186 /* ds_gws_sema_p */, AMDGPU::DS_GWS_SEMA_P_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_gds }, },
  { 1200 /* ds_gws_sema_v */, AMDGPU::DS_GWS_SEMA_V_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_gds }, },
  { 1200 /* ds_gws_sema_v */, AMDGPU::DS_GWS_SEMA_V_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_gds }, },
  { 1214 /* ds_inc_rtn_u32 */, AMDGPU::DS_INC_RTN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1214 /* ds_inc_rtn_u32 */, AMDGPU::DS_INC_RTN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1229 /* ds_inc_rtn_u64 */, AMDGPU::DS_INC_RTN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1229 /* ds_inc_rtn_u64 */, AMDGPU::DS_INC_RTN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1244 /* ds_inc_src2_u32 */, AMDGPU::DS_INC_SRC2_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1244 /* ds_inc_src2_u32 */, AMDGPU::DS_INC_SRC2_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1260 /* ds_inc_src2_u64 */, AMDGPU::DS_INC_SRC2_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1260 /* ds_inc_src2_u64 */, AMDGPU::DS_INC_SRC2_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1276 /* ds_inc_u32 */, AMDGPU::DS_INC_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1276 /* ds_inc_u32 */, AMDGPU::DS_INC_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1287 /* ds_inc_u64 */, AMDGPU::DS_INC_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1287 /* ds_inc_u64 */, AMDGPU::DS_INC_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1298 /* ds_max_f32 */, AMDGPU::DS_MAX_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1298 /* ds_max_f32 */, AMDGPU::DS_MAX_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1309 /* ds_max_f64 */, AMDGPU::DS_MAX_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1309 /* ds_max_f64 */, AMDGPU::DS_MAX_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1320 /* ds_max_i32 */, AMDGPU::DS_MAX_I32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1320 /* ds_max_i32 */, AMDGPU::DS_MAX_I32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1331 /* ds_max_i64 */, AMDGPU::DS_MAX_I64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1331 /* ds_max_i64 */, AMDGPU::DS_MAX_I64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1342 /* ds_max_rtn_f32 */, AMDGPU::DS_MAX_RTN_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1342 /* ds_max_rtn_f32 */, AMDGPU::DS_MAX_RTN_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1357 /* ds_max_rtn_f64 */, AMDGPU::DS_MAX_RTN_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1357 /* ds_max_rtn_f64 */, AMDGPU::DS_MAX_RTN_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1372 /* ds_max_rtn_i32 */, AMDGPU::DS_MAX_RTN_I32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1372 /* ds_max_rtn_i32 */, AMDGPU::DS_MAX_RTN_I32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1387 /* ds_max_rtn_i64 */, AMDGPU::DS_MAX_RTN_I64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1387 /* ds_max_rtn_i64 */, AMDGPU::DS_MAX_RTN_I64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1402 /* ds_max_rtn_u32 */, AMDGPU::DS_MAX_RTN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1402 /* ds_max_rtn_u32 */, AMDGPU::DS_MAX_RTN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1417 /* ds_max_rtn_u64 */, AMDGPU::DS_MAX_RTN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1417 /* ds_max_rtn_u64 */, AMDGPU::DS_MAX_RTN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1432 /* ds_max_src2_f32 */, AMDGPU::DS_MAX_SRC2_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1432 /* ds_max_src2_f32 */, AMDGPU::DS_MAX_SRC2_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1448 /* ds_max_src2_f64 */, AMDGPU::DS_MAX_SRC2_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1448 /* ds_max_src2_f64 */, AMDGPU::DS_MAX_SRC2_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1464 /* ds_max_src2_i32 */, AMDGPU::DS_MAX_SRC2_I32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1464 /* ds_max_src2_i32 */, AMDGPU::DS_MAX_SRC2_I32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1480 /* ds_max_src2_i64 */, AMDGPU::DS_MAX_SRC2_I64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1480 /* ds_max_src2_i64 */, AMDGPU::DS_MAX_SRC2_I64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1496 /* ds_max_src2_u32 */, AMDGPU::DS_MAX_SRC2_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1496 /* ds_max_src2_u32 */, AMDGPU::DS_MAX_SRC2_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1512 /* ds_max_src2_u64 */, AMDGPU::DS_MAX_SRC2_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1512 /* ds_max_src2_u64 */, AMDGPU::DS_MAX_SRC2_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1528 /* ds_max_u32 */, AMDGPU::DS_MAX_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1528 /* ds_max_u32 */, AMDGPU::DS_MAX_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1539 /* ds_max_u64 */, AMDGPU::DS_MAX_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1539 /* ds_max_u64 */, AMDGPU::DS_MAX_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1550 /* ds_min_f32 */, AMDGPU::DS_MIN_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1550 /* ds_min_f32 */, AMDGPU::DS_MIN_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1561 /* ds_min_f64 */, AMDGPU::DS_MIN_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1561 /* ds_min_f64 */, AMDGPU::DS_MIN_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1572 /* ds_min_i32 */, AMDGPU::DS_MIN_I32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1572 /* ds_min_i32 */, AMDGPU::DS_MIN_I32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1583 /* ds_min_i64 */, AMDGPU::DS_MIN_I64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1583 /* ds_min_i64 */, AMDGPU::DS_MIN_I64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1594 /* ds_min_rtn_f32 */, AMDGPU::DS_MIN_RTN_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1594 /* ds_min_rtn_f32 */, AMDGPU::DS_MIN_RTN_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1609 /* ds_min_rtn_f64 */, AMDGPU::DS_MIN_RTN_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1609 /* ds_min_rtn_f64 */, AMDGPU::DS_MIN_RTN_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1624 /* ds_min_rtn_i32 */, AMDGPU::DS_MIN_RTN_I32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1624 /* ds_min_rtn_i32 */, AMDGPU::DS_MIN_RTN_I32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1639 /* ds_min_rtn_i64 */, AMDGPU::DS_MIN_RTN_I64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1639 /* ds_min_rtn_i64 */, AMDGPU::DS_MIN_RTN_I64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1654 /* ds_min_rtn_u32 */, AMDGPU::DS_MIN_RTN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1654 /* ds_min_rtn_u32 */, AMDGPU::DS_MIN_RTN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1669 /* ds_min_rtn_u64 */, AMDGPU::DS_MIN_RTN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1669 /* ds_min_rtn_u64 */, AMDGPU::DS_MIN_RTN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1684 /* ds_min_src2_f32 */, AMDGPU::DS_MIN_SRC2_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1684 /* ds_min_src2_f32 */, AMDGPU::DS_MIN_SRC2_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1700 /* ds_min_src2_f64 */, AMDGPU::DS_MIN_SRC2_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1700 /* ds_min_src2_f64 */, AMDGPU::DS_MIN_SRC2_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1716 /* ds_min_src2_i32 */, AMDGPU::DS_MIN_SRC2_I32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1716 /* ds_min_src2_i32 */, AMDGPU::DS_MIN_SRC2_I32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1732 /* ds_min_src2_i64 */, AMDGPU::DS_MIN_SRC2_I64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1732 /* ds_min_src2_i64 */, AMDGPU::DS_MIN_SRC2_I64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1748 /* ds_min_src2_u32 */, AMDGPU::DS_MIN_SRC2_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1748 /* ds_min_src2_u32 */, AMDGPU::DS_MIN_SRC2_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1764 /* ds_min_src2_u64 */, AMDGPU::DS_MIN_SRC2_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1764 /* ds_min_src2_u64 */, AMDGPU::DS_MIN_SRC2_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1780 /* ds_min_u32 */, AMDGPU::DS_MIN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1780 /* ds_min_u32 */, AMDGPU::DS_MIN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1791 /* ds_min_u64 */, AMDGPU::DS_MIN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1791 /* ds_min_u64 */, AMDGPU::DS_MIN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1802 /* ds_mskor_b32 */, AMDGPU::DS_MSKOR_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1802 /* ds_mskor_b32 */, AMDGPU::DS_MSKOR_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1815 /* ds_mskor_b64 */, AMDGPU::DS_MSKOR_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1815 /* ds_mskor_b64 */, AMDGPU::DS_MSKOR_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1828 /* ds_mskor_rtn_b32 */, AMDGPU::DS_MSKOR_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1828 /* ds_mskor_rtn_b32 */, AMDGPU::DS_MSKOR_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1845 /* ds_mskor_rtn_b64 */, AMDGPU::DS_MSKOR_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1845 /* ds_mskor_rtn_b64 */, AMDGPU::DS_MSKOR_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1862 /* ds_or_b32 */, AMDGPU::DS_OR_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1862 /* ds_or_b32 */, AMDGPU::DS_OR_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1872 /* ds_or_b64 */, AMDGPU::DS_OR_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1872 /* ds_or_b64 */, AMDGPU::DS_OR_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1882 /* ds_or_rtn_b32 */, AMDGPU::DS_OR_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1882 /* ds_or_rtn_b32 */, AMDGPU::DS_OR_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1896 /* ds_or_rtn_b64 */, AMDGPU::DS_OR_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1896 /* ds_or_rtn_b64 */, AMDGPU::DS_OR_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1910 /* ds_or_src2_b32 */, AMDGPU::DS_OR_SRC2_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1910 /* ds_or_src2_b32 */, AMDGPU::DS_OR_SRC2_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1925 /* ds_or_src2_b64 */, AMDGPU::DS_OR_SRC2_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1925 /* ds_or_src2_b64 */, AMDGPU::DS_OR_SRC2_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1940 /* ds_ordered_count */, AMDGPU::DS_ORDERED_COUNT_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOffsetOptional, MCK_gds }, },
  { 1940 /* ds_ordered_count */, AMDGPU::DS_ORDERED_COUNT_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOffsetOptional, MCK_gds }, },
  { 1957 /* ds_read2_b32 */, AMDGPU::DS_READ2_B32_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 1957 /* ds_read2_b32 */, AMDGPU::DS_READ2_B32_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 1970 /* ds_read2_b64 */, AMDGPU::DS_READ2_B64_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 1970 /* ds_read2_b64 */, AMDGPU::DS_READ2_B64_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 1983 /* ds_read2st64_b32 */, AMDGPU::DS_READ2ST64_B32_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 1983 /* ds_read2st64_b32 */, AMDGPU::DS_READ2ST64_B32_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2000 /* ds_read2st64_b64 */, AMDGPU::DS_READ2ST64_B64_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2000 /* ds_read2st64_b64 */, AMDGPU::DS_READ2ST64_B64_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2017 /* ds_read_b32 */, AMDGPU::DS_READ_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2017 /* ds_read_b32 */, AMDGPU::DS_READ_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2029 /* ds_read_b64 */, AMDGPU::DS_READ_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2029 /* ds_read_b64 */, AMDGPU::DS_READ_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2041 /* ds_read_i16 */, AMDGPU::DS_READ_I16_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2041 /* ds_read_i16 */, AMDGPU::DS_READ_I16_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2053 /* ds_read_i8 */, AMDGPU::DS_READ_I8_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2053 /* ds_read_i8 */, AMDGPU::DS_READ_I8_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2064 /* ds_read_u16 */, AMDGPU::DS_READ_U16_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2064 /* ds_read_u16 */, AMDGPU::DS_READ_U16_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2076 /* ds_read_u8 */, AMDGPU::DS_READ_U8_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2076 /* ds_read_u8 */, AMDGPU::DS_READ_U8_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2087 /* ds_rsub_rtn_u32 */, AMDGPU::DS_RSUB_RTN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2087 /* ds_rsub_rtn_u32 */, AMDGPU::DS_RSUB_RTN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2103 /* ds_rsub_rtn_u64 */, AMDGPU::DS_RSUB_RTN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2103 /* ds_rsub_rtn_u64 */, AMDGPU::DS_RSUB_RTN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2119 /* ds_rsub_src2_u32 */, AMDGPU::DS_RSUB_SRC2_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2119 /* ds_rsub_src2_u32 */, AMDGPU::DS_RSUB_SRC2_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2136 /* ds_rsub_src2_u64 */, AMDGPU::DS_RSUB_SRC2_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2136 /* ds_rsub_src2_u64 */, AMDGPU::DS_RSUB_SRC2_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2153 /* ds_rsub_u32 */, AMDGPU::DS_RSUB_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2153 /* ds_rsub_u32 */, AMDGPU::DS_RSUB_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2165 /* ds_rsub_u64 */, AMDGPU::DS_RSUB_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2165 /* ds_rsub_u64 */, AMDGPU::DS_RSUB_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2177 /* ds_sub_rtn_u32 */, AMDGPU::DS_SUB_RTN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2177 /* ds_sub_rtn_u32 */, AMDGPU::DS_SUB_RTN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2192 /* ds_sub_rtn_u64 */, AMDGPU::DS_SUB_RTN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2192 /* ds_sub_rtn_u64 */, AMDGPU::DS_SUB_RTN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2207 /* ds_sub_src2_u32 */, AMDGPU::DS_SUB_SRC2_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2207 /* ds_sub_src2_u32 */, AMDGPU::DS_SUB_SRC2_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2223 /* ds_sub_src2_u64 */, AMDGPU::DS_SUB_SRC2_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2223 /* ds_sub_src2_u64 */, AMDGPU::DS_SUB_SRC2_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2239 /* ds_sub_u32 */, AMDGPU::DS_SUB_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2239 /* ds_sub_u32 */, AMDGPU::DS_SUB_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2250 /* ds_sub_u64 */, AMDGPU::DS_SUB_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2250 /* ds_sub_u64 */, AMDGPU::DS_SUB_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2261 /* ds_swizzle_b32 */, AMDGPU::DS_SWIZZLE_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2261 /* ds_swizzle_b32 */, AMDGPU::DS_SWIZZLE_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2276 /* ds_wrap_rtn_f32 */, AMDGPU::DS_WRAP_RTN_F32_si, ConvertCustom_cvtDS, Feature_isCIVI, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2276 /* ds_wrap_rtn_f32 */, AMDGPU::DS_WRAP_RTN_F32_vi, ConvertCustom_cvtDS, Feature_isCIVI, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2292 /* ds_write2_b32 */, AMDGPU::DS_WRITE2_B32_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2292 /* ds_write2_b32 */, AMDGPU::DS_WRITE2_B32_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2306 /* ds_write2_b64 */, AMDGPU::DS_WRITE2_B64_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2306 /* ds_write2_b64 */, AMDGPU::DS_WRITE2_B64_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2320 /* ds_write2st64_b32 */, AMDGPU::DS_WRITE2ST64_B32_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2320 /* ds_write2st64_b32 */, AMDGPU::DS_WRITE2ST64_B32_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2338 /* ds_write2st64_b64 */, AMDGPU::DS_WRITE2ST64_B64_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2338 /* ds_write2st64_b64 */, AMDGPU::DS_WRITE2ST64_B64_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2356 /* ds_write_b16 */, AMDGPU::DS_WRITE_B16_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2356 /* ds_write_b16 */, AMDGPU::DS_WRITE_B16_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2369 /* ds_write_b32 */, AMDGPU::DS_WRITE_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2369 /* ds_write_b32 */, AMDGPU::DS_WRITE_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2382 /* ds_write_b64 */, AMDGPU::DS_WRITE_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2382 /* ds_write_b64 */, AMDGPU::DS_WRITE_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2395 /* ds_write_b8 */, AMDGPU::DS_WRITE_B8_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2395 /* ds_write_b8 */, AMDGPU::DS_WRITE_B8_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2407 /* ds_write_src2_b32 */, AMDGPU::DS_WRITE_SRC2_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2407 /* ds_write_src2_b32 */, AMDGPU::DS_WRITE_SRC2_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2425 /* ds_write_src2_b64 */, AMDGPU::DS_WRITE_SRC2_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2425 /* ds_write_src2_b64 */, AMDGPU::DS_WRITE_SRC2_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2443 /* ds_wrxchg2_rtn_b32 */, AMDGPU::DS_WRXCHG2_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2443 /* ds_wrxchg2_rtn_b32 */, AMDGPU::DS_WRXCHG2_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2462 /* ds_wrxchg2_rtn_b64 */, AMDGPU::DS_WRXCHG2_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2462 /* ds_wrxchg2_rtn_b64 */, AMDGPU::DS_WRXCHG2_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2481 /* ds_wrxchg2st64_rtn_b32 */, AMDGPU::DS_WRXCHG2ST64_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2481 /* ds_wrxchg2st64_rtn_b32 */, AMDGPU::DS_WRXCHG2ST64_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2504 /* ds_wrxchg2st64_rtn_b64 */, AMDGPU::DS_WRXCHG2ST64_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2504 /* ds_wrxchg2st64_rtn_b64 */, AMDGPU::DS_WRXCHG2ST64_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_128, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2527 /* ds_wrxchg_rtn_b32 */, AMDGPU::DS_WRXCHG_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2527 /* ds_wrxchg_rtn_b32 */, AMDGPU::DS_WRXCHG_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2545 /* ds_wrxchg_rtn_b64 */, AMDGPU::DS_WRXCHG_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2545 /* ds_wrxchg_rtn_b64 */, AMDGPU::DS_WRXCHG_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2563 /* ds_xor_b32 */, AMDGPU::DS_XOR_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2563 /* ds_xor_b32 */, AMDGPU::DS_XOR_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2574 /* ds_xor_b64 */, AMDGPU::DS_XOR_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2574 /* ds_xor_b64 */, AMDGPU::DS_XOR_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2585 /* ds_xor_rtn_b32 */, AMDGPU::DS_XOR_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2585 /* ds_xor_rtn_b32 */, AMDGPU::DS_XOR_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2600 /* ds_xor_rtn_b64 */, AMDGPU::DS_XOR_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2600 /* ds_xor_rtn_b64 */, AMDGPU::DS_XOR_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2615 /* ds_xor_src2_b32 */, AMDGPU::DS_XOR_SRC2_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2615 /* ds_xor_src2_b32 */, AMDGPU::DS_XOR_SRC2_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2631 /* ds_xor_src2_b64 */, AMDGPU::DS_XOR_SRC2_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2631 /* ds_xor_src2_b64 */, AMDGPU::DS_XOR_SRC2_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2647 /* exp */, AMDGPU::EXP_si, Convert__Imm1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_8, Feature_isGCN, { MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32 }, },
  { 2647 /* exp */, AMDGPU::EXP_vi, Convert__Imm1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_8, Feature_isGCN, { MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32 }, },
  { 2651 /* flat_atomic_add */, AMDGPU::FLAT_ATOMIC_ADD, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2651 /* flat_atomic_add */, AMDGPU::FLAT_ATOMIC_ADD_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2667 /* flat_atomic_add_x2 */, AMDGPU::FLAT_ATOMIC_ADD_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2667 /* flat_atomic_add_x2 */, AMDGPU::FLAT_ATOMIC_ADD_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2686 /* flat_atomic_and */, AMDGPU::FLAT_ATOMIC_AND, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2686 /* flat_atomic_and */, AMDGPU::FLAT_ATOMIC_AND_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2702 /* flat_atomic_and_x2 */, AMDGPU::FLAT_ATOMIC_AND_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2702 /* flat_atomic_and_x2 */, AMDGPU::FLAT_ATOMIC_AND_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2721 /* flat_atomic_cmpswap */, AMDGPU::FLAT_ATOMIC_CMPSWAP, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2721 /* flat_atomic_cmpswap */, AMDGPU::FLAT_ATOMIC_CMPSWAP_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2741 /* flat_atomic_cmpswap_x2 */, AMDGPU::FLAT_ATOMIC_CMPSWAP_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_128, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2741 /* flat_atomic_cmpswap_x2 */, AMDGPU::FLAT_ATOMIC_CMPSWAP_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_128, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2764 /* flat_atomic_dec */, AMDGPU::FLAT_ATOMIC_DEC, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2764 /* flat_atomic_dec */, AMDGPU::FLAT_ATOMIC_DEC_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2780 /* flat_atomic_dec_x2 */, AMDGPU::FLAT_ATOMIC_DEC_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2780 /* flat_atomic_dec_x2 */, AMDGPU::FLAT_ATOMIC_DEC_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2799 /* flat_atomic_fcmpswap */, AMDGPU::FLAT_ATOMIC_FCMPSWAP, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2799 /* flat_atomic_fcmpswap */, AMDGPU::FLAT_ATOMIC_FCMPSWAP_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2820 /* flat_atomic_fcmpswap_x2 */, AMDGPU::FLAT_ATOMIC_FCMPSWAP_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_128, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2820 /* flat_atomic_fcmpswap_x2 */, AMDGPU::FLAT_ATOMIC_FCMPSWAP_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_128, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2844 /* flat_atomic_fmax */, AMDGPU::FLAT_ATOMIC_FMAX, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2844 /* flat_atomic_fmax */, AMDGPU::FLAT_ATOMIC_FMAX_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2861 /* flat_atomic_fmax_x2 */, AMDGPU::FLAT_ATOMIC_FMAX_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2861 /* flat_atomic_fmax_x2 */, AMDGPU::FLAT_ATOMIC_FMAX_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2881 /* flat_atomic_fmin */, AMDGPU::FLAT_ATOMIC_FMIN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2881 /* flat_atomic_fmin */, AMDGPU::FLAT_ATOMIC_FMIN_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2898 /* flat_atomic_fmin_x2 */, AMDGPU::FLAT_ATOMIC_FMIN_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2898 /* flat_atomic_fmin_x2 */, AMDGPU::FLAT_ATOMIC_FMIN_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2918 /* flat_atomic_inc */, AMDGPU::FLAT_ATOMIC_INC, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2918 /* flat_atomic_inc */, AMDGPU::FLAT_ATOMIC_INC_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2934 /* flat_atomic_inc_x2 */, AMDGPU::FLAT_ATOMIC_INC_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2934 /* flat_atomic_inc_x2 */, AMDGPU::FLAT_ATOMIC_INC_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2953 /* flat_atomic_or */, AMDGPU::FLAT_ATOMIC_OR, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2953 /* flat_atomic_or */, AMDGPU::FLAT_ATOMIC_OR_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2968 /* flat_atomic_or_x2 */, AMDGPU::FLAT_ATOMIC_OR_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2968 /* flat_atomic_or_x2 */, AMDGPU::FLAT_ATOMIC_OR_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2986 /* flat_atomic_rsub */, AMDGPU::FLAT_ATOMIC_RSUB, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2986 /* flat_atomic_rsub */, AMDGPU::FLAT_ATOMIC_RSUB_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3003 /* flat_atomic_rsub_x2 */, AMDGPU::FLAT_ATOMIC_RSUB_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3003 /* flat_atomic_rsub_x2 */, AMDGPU::FLAT_ATOMIC_RSUB_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3023 /* flat_atomic_smax */, AMDGPU::FLAT_ATOMIC_SMAX, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3023 /* flat_atomic_smax */, AMDGPU::FLAT_ATOMIC_SMAX_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3040 /* flat_atomic_smax_x2 */, AMDGPU::FLAT_ATOMIC_SMAX_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3040 /* flat_atomic_smax_x2 */, AMDGPU::FLAT_ATOMIC_SMAX_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3060 /* flat_atomic_smin */, AMDGPU::FLAT_ATOMIC_SMIN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3060 /* flat_atomic_smin */, AMDGPU::FLAT_ATOMIC_SMIN_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3077 /* flat_atomic_smin_x2 */, AMDGPU::FLAT_ATOMIC_SMIN_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3077 /* flat_atomic_smin_x2 */, AMDGPU::FLAT_ATOMIC_SMIN_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3097 /* flat_atomic_sub */, AMDGPU::FLAT_ATOMIC_SUB, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3097 /* flat_atomic_sub */, AMDGPU::FLAT_ATOMIC_SUB_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3113 /* flat_atomic_sub_x2 */, AMDGPU::FLAT_ATOMIC_SUB_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3113 /* flat_atomic_sub_x2 */, AMDGPU::FLAT_ATOMIC_SUB_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3132 /* flat_atomic_swap */, AMDGPU::FLAT_ATOMIC_SWAP, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3132 /* flat_atomic_swap */, AMDGPU::FLAT_ATOMIC_SWAP_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3149 /* flat_atomic_swap_x2 */, AMDGPU::FLAT_ATOMIC_SWAP_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3149 /* flat_atomic_swap_x2 */, AMDGPU::FLAT_ATOMIC_SWAP_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3169 /* flat_atomic_umax */, AMDGPU::FLAT_ATOMIC_UMAX, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3169 /* flat_atomic_umax */, AMDGPU::FLAT_ATOMIC_UMAX_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3186 /* flat_atomic_umax_x2 */, AMDGPU::FLAT_ATOMIC_UMAX_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3186 /* flat_atomic_umax_x2 */, AMDGPU::FLAT_ATOMIC_UMAX_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3206 /* flat_atomic_umin */, AMDGPU::FLAT_ATOMIC_UMIN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3206 /* flat_atomic_umin */, AMDGPU::FLAT_ATOMIC_UMIN_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3223 /* flat_atomic_umin_x2 */, AMDGPU::FLAT_ATOMIC_UMIN_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3223 /* flat_atomic_umin_x2 */, AMDGPU::FLAT_ATOMIC_UMIN_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3243 /* flat_atomic_xor */, AMDGPU::FLAT_ATOMIC_XOR, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3243 /* flat_atomic_xor */, AMDGPU::FLAT_ATOMIC_XOR_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3259 /* flat_atomic_xor_x2 */, AMDGPU::FLAT_ATOMIC_XOR_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3259 /* flat_atomic_xor_x2 */, AMDGPU::FLAT_ATOMIC_XOR_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3278 /* flat_load_dword */, AMDGPU::FLAT_LOAD_DWORD, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3294 /* flat_load_dwordx2 */, AMDGPU::FLAT_LOAD_DWORDX2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3312 /* flat_load_dwordx3 */, AMDGPU::FLAT_LOAD_DWORDX3, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_96, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3330 /* flat_load_dwordx4 */, AMDGPU::FLAT_LOAD_DWORDX4, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_128, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3348 /* flat_load_sbyte */, AMDGPU::FLAT_LOAD_SBYTE, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3364 /* flat_load_sshort */, AMDGPU::FLAT_LOAD_SSHORT, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3381 /* flat_load_ubyte */, AMDGPU::FLAT_LOAD_UBYTE, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3397 /* flat_load_ushort */, AMDGPU::FLAT_LOAD_USHORT, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3414 /* flat_store_byte */, AMDGPU::FLAT_STORE_BYTE, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3430 /* flat_store_dword */, AMDGPU::FLAT_STORE_DWORD, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3447 /* flat_store_dwordx2 */, AMDGPU::FLAT_STORE_DWORDX2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_64, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3466 /* flat_store_dwordx3 */, AMDGPU::FLAT_STORE_DWORDX3, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_96, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3485 /* flat_store_dwordx4 */, AMDGPU::FLAT_STORE_DWORDX4, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VReg_128, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3504 /* flat_store_short */, AMDGPU::FLAT_STORE_SHORT, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3521 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3535 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3551 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3570 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3591 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3609 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3625 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3664 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3687 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3707 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3726 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3747 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3765 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3785 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3804 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3825 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3843 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3860 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3879 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3913 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3930 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3949 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3979 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 3979 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 3979 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 3979 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 3979 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 3979 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 3979 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 3979 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 3979 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 3979 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 3979 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 3979 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 3997 /* image_load */, AMDGPU::IMAGE_LOAD_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 3997 /* image_load */, AMDGPU::IMAGE_LOAD_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 3997 /* image_load */, AMDGPU::IMAGE_LOAD_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 3997 /* image_load */, AMDGPU::IMAGE_LOAD_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 3997 /* image_load */, AMDGPU::IMAGE_LOAD_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 3997 /* image_load */, AMDGPU::IMAGE_LOAD_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 3997 /* image_load */, AMDGPU::IMAGE_LOAD_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 3997 /* image_load */, AMDGPU::IMAGE_LOAD_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 3997 /* image_load */, AMDGPU::IMAGE_LOAD_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 3997 /* image_load */, AMDGPU::IMAGE_LOAD_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 3997 /* image_load */, AMDGPU::IMAGE_LOAD_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 3997 /* image_load */, AMDGPU::IMAGE_LOAD_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4008 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4008 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4008 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4008 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4008 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4008 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4008 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4008 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4008 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4008 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4008 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4008 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4023 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4036 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4051 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4069 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4089 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4106 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4138 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4180 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4199 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4217 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4238 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4261 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4281 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4299 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4319 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4336 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4356 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4378 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4397 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4414 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4433 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4451 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4471 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4488 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4504 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4544 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4562 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4578 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4611 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4629 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4649 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4666 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4698 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4714 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V1_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V1_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V1_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V1_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V1_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V4_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V4_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V4_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V4_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V4_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V2_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V2_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V2_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V2_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V2_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V3_V1, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V3_V4, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V3_V8, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V3_V16, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4732 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V3_V2, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4747 /* s_abs_i32 */, AMDGPU::S_ABS_I32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 4747 /* s_abs_i32 */, AMDGPU::S_ABS_I32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 4757 /* s_absdiff_i32 */, AMDGPU::S_ABSDIFF_I32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4757 /* s_absdiff_i32 */, AMDGPU::S_ABSDIFF_I32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4771 /* s_add_i32 */, AMDGPU::S_ADD_I32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4771 /* s_add_i32 */, AMDGPU::S_ADD_I32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4781 /* s_add_u32 */, AMDGPU::S_ADD_U32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4781 /* s_add_u32 */, AMDGPU::S_ADD_U32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4791 /* s_addc_u32 */, AMDGPU::S_ADDC_U32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4791 /* s_addc_u32 */, AMDGPU::S_ADDC_U32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4802 /* s_addk_i32 */, AMDGPU::S_ADDK_I32_si, Convert__Reg1_0__Tie0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 4802 /* s_addk_i32 */, AMDGPU::S_ADDK_I32_vi, Convert__Reg1_0__Tie0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 4813 /* s_and_b32 */, AMDGPU::S_AND_B32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4813 /* s_and_b32 */, AMDGPU::S_AND_B32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4823 /* s_and_b64 */, AMDGPU::S_AND_B64_si, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 4823 /* s_and_b64 */, AMDGPU::S_AND_B64_vi, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 4833 /* s_and_saveexec_b64 */, AMDGPU::S_AND_SAVEEXEC_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 4833 /* s_and_saveexec_b64 */, AMDGPU::S_AND_SAVEEXEC_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 4852 /* s_andn2_b32 */, AMDGPU::S_ANDN2_B32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4852 /* s_andn2_b32 */, AMDGPU::S_ANDN2_B32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4864 /* s_andn2_b64 */, AMDGPU::S_ANDN2_B64_si, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 4864 /* s_andn2_b64 */, AMDGPU::S_ANDN2_B64_vi, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 4876 /* s_andn2_saveexec_b64 */, AMDGPU::S_ANDN2_SAVEEXEC_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 4876 /* s_andn2_saveexec_b64 */, AMDGPU::S_ANDN2_SAVEEXEC_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 4897 /* s_ashr_i32 */, AMDGPU::S_ASHR_I32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4897 /* s_ashr_i32 */, AMDGPU::S_ASHR_I32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4908 /* s_ashr_i64 */, AMDGPU::S_ASHR_I64_si, Convert__Reg1_0__SSrc641_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 4908 /* s_ashr_i64 */, AMDGPU::S_ASHR_I64_vi, Convert__Reg1_0__SSrc641_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 4919 /* s_barrier */, AMDGPU::S_BARRIER, Convert_NoOperands, Feature_isGCN, {  }, },
  { 4929 /* s_bcnt0_i32_b32 */, AMDGPU::S_BCNT0_I32_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 4929 /* s_bcnt0_i32_b32 */, AMDGPU::S_BCNT0_I32_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 4945 /* s_bcnt0_i32_b64 */, AMDGPU::S_BCNT0_I32_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc64 }, },
  { 4945 /* s_bcnt0_i32_b64 */, AMDGPU::S_BCNT0_I32_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc64 }, },
  { 4961 /* s_bcnt1_i32_b32 */, AMDGPU::S_BCNT1_I32_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 4961 /* s_bcnt1_i32_b32 */, AMDGPU::S_BCNT1_I32_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 4977 /* s_bcnt1_i32_b64 */, AMDGPU::S_BCNT1_I32_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc64 }, },
  { 4977 /* s_bcnt1_i32_b64 */, AMDGPU::S_BCNT1_I32_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc64 }, },
  { 4993 /* s_bfe_i32 */, AMDGPU::S_BFE_I32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4993 /* s_bfe_i32 */, AMDGPU::S_BFE_I32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5003 /* s_bfe_i64 */, AMDGPU::S_BFE_I64_si, Convert__Reg1_0__SSrc641_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 5003 /* s_bfe_i64 */, AMDGPU::S_BFE_I64_vi, Convert__Reg1_0__SSrc641_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 5013 /* s_bfe_u32 */, AMDGPU::S_BFE_U32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5013 /* s_bfe_u32 */, AMDGPU::S_BFE_U32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5023 /* s_bfe_u64 */, AMDGPU::S_BFE_U64_si, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 5023 /* s_bfe_u64 */, AMDGPU::S_BFE_U64_vi, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 5033 /* s_bfm_b32 */, AMDGPU::S_BFM_B32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5033 /* s_bfm_b32 */, AMDGPU::S_BFM_B32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5043 /* s_bfm_b64 */, AMDGPU::S_BFM_B64_si, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 5043 /* s_bfm_b64 */, AMDGPU::S_BFM_B64_vi, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 5053 /* s_bitset0_b32 */, AMDGPU::S_BITSET0_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5053 /* s_bitset0_b32 */, AMDGPU::S_BITSET0_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5067 /* s_bitset0_b64 */, AMDGPU::S_BITSET0_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 5067 /* s_bitset0_b64 */, AMDGPU::S_BITSET0_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 5081 /* s_bitset1_b32 */, AMDGPU::S_BITSET1_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5081 /* s_bitset1_b32 */, AMDGPU::S_BITSET1_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5095 /* s_bitset1_b64 */, AMDGPU::S_BITSET1_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 5095 /* s_bitset1_b64 */, AMDGPU::S_BITSET1_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 5109 /* s_branch */, AMDGPU::S_BRANCH, Convert__SoppBrTarget1_0, Feature_isGCN, { MCK_SoppBrTarget }, },
  { 5118 /* s_brev_b32 */, AMDGPU::S_BREV_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5118 /* s_brev_b32 */, AMDGPU::S_BREV_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5129 /* s_brev_b64 */, AMDGPU::S_BREV_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 5129 /* s_brev_b64 */, AMDGPU::S_BREV_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 5140 /* s_buffer_load_dword */, AMDGPU::S_BUFFER_LOAD_DWORD_SGPR_si, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_SGPR_32, MCK_SReg_128, MCK_SReg_32 }, },
  { 5140 /* s_buffer_load_dword */, AMDGPU::S_BUFFER_LOAD_DWORD_SGPR_vi, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_SGPR_32, MCK_SReg_128, MCK_SReg_32 }, },
  { 5140 /* s_buffer_load_dword */, AMDGPU::S_BUFFER_LOAD_DWORD_IMM_ci, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDLiteralOffset1_2, Feature_isGCN|Feature_isCIOnly, { MCK_SGPR_32, MCK_SReg_128, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 5140 /* s_buffer_load_dword */, AMDGPU::S_BUFFER_LOAD_DWORD_IMM_si, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isSICI, { MCK_SGPR_32, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5140 /* s_buffer_load_dword */, AMDGPU::S_BUFFER_LOAD_DWORD_IMM_vi, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isVI, { MCK_SGPR_32, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5160 /* s_buffer_load_dwordx16 */, AMDGPU::S_BUFFER_LOAD_DWORDX16_SGPR_si, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_512, MCK_SReg_128, MCK_SReg_32 }, },
  { 5160 /* s_buffer_load_dwordx16 */, AMDGPU::S_BUFFER_LOAD_DWORDX16_SGPR_vi, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_512, MCK_SReg_128, MCK_SReg_32 }, },
  { 5160 /* s_buffer_load_dwordx16 */, AMDGPU::S_BUFFER_LOAD_DWORDX16_IMM_ci, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDLiteralOffset1_2, Feature_isGCN|Feature_isCIOnly, { MCK_SReg_512, MCK_SReg_128, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 5160 /* s_buffer_load_dwordx16 */, AMDGPU::S_BUFFER_LOAD_DWORDX16_IMM_si, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_512, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5160 /* s_buffer_load_dwordx16 */, AMDGPU::S_BUFFER_LOAD_DWORDX16_IMM_vi, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_512, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5183 /* s_buffer_load_dwordx2 */, AMDGPU::S_BUFFER_LOAD_DWORDX2_SGPR_si, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SReg_128, MCK_SReg_32 }, },
  { 5183 /* s_buffer_load_dwordx2 */, AMDGPU::S_BUFFER_LOAD_DWORDX2_SGPR_vi, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SReg_128, MCK_SReg_32 }, },
  { 5183 /* s_buffer_load_dwordx2 */, AMDGPU::S_BUFFER_LOAD_DWORDX2_IMM_ci, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDLiteralOffset1_2, Feature_isGCN|Feature_isCIOnly, { MCK_SReg_64, MCK_SReg_128, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 5183 /* s_buffer_load_dwordx2 */, AMDGPU::S_BUFFER_LOAD_DWORDX2_IMM_si, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5183 /* s_buffer_load_dwordx2 */, AMDGPU::S_BUFFER_LOAD_DWORDX2_IMM_vi, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5205 /* s_buffer_load_dwordx4 */, AMDGPU::S_BUFFER_LOAD_DWORDX4_SGPR_si, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_128, MCK_SReg_128, MCK_SReg_32 }, },
  { 5205 /* s_buffer_load_dwordx4 */, AMDGPU::S_BUFFER_LOAD_DWORDX4_SGPR_vi, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_128, MCK_SReg_128, MCK_SReg_32 }, },
  { 5205 /* s_buffer_load_dwordx4 */, AMDGPU::S_BUFFER_LOAD_DWORDX4_IMM_ci, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDLiteralOffset1_2, Feature_isGCN|Feature_isCIOnly, { MCK_SReg_128, MCK_SReg_128, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 5205 /* s_buffer_load_dwordx4 */, AMDGPU::S_BUFFER_LOAD_DWORDX4_IMM_si, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_128, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5205 /* s_buffer_load_dwordx4 */, AMDGPU::S_BUFFER_LOAD_DWORDX4_IMM_vi, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_128, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5227 /* s_buffer_load_dwordx8 */, AMDGPU::S_BUFFER_LOAD_DWORDX8_SGPR_si, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_256, MCK_SReg_128, MCK_SReg_32 }, },
  { 5227 /* s_buffer_load_dwordx8 */, AMDGPU::S_BUFFER_LOAD_DWORDX8_SGPR_vi, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_256, MCK_SReg_128, MCK_SReg_32 }, },
  { 5227 /* s_buffer_load_dwordx8 */, AMDGPU::S_BUFFER_LOAD_DWORDX8_IMM_ci, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDLiteralOffset1_2, Feature_isGCN|Feature_isCIOnly, { MCK_SReg_256, MCK_SReg_128, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 5227 /* s_buffer_load_dwordx8 */, AMDGPU::S_BUFFER_LOAD_DWORDX8_IMM_si, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_256, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5227 /* s_buffer_load_dwordx8 */, AMDGPU::S_BUFFER_LOAD_DWORDX8_IMM_vi, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_256, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5249 /* s_cbranch_execnz */, AMDGPU::S_CBRANCH_EXECNZ, Convert__SoppBrTarget1_0, Feature_isGCN, { MCK_SoppBrTarget }, },
  { 5266 /* s_cbranch_execz */, AMDGPU::S_CBRANCH_EXECZ, Convert__SoppBrTarget1_0, Feature_isGCN, { MCK_SoppBrTarget }, },
  { 5282 /* s_cbranch_g_fork */, AMDGPU::S_CBRANCH_G_FORK_si, Convert__Reg1_0__Reg1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SReg_64 }, },
  { 5282 /* s_cbranch_g_fork */, AMDGPU::S_CBRANCH_G_FORK_vi, Convert__Reg1_0__Reg1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SReg_64 }, },
  { 5299 /* s_cbranch_i_fork */, AMDGPU::S_CBRANCH_I_FORK_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_Imm }, },
  { 5299 /* s_cbranch_i_fork */, AMDGPU::S_CBRANCH_I_FORK_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_Imm }, },
  { 5316 /* s_cbranch_join */, AMDGPU::S_CBRANCH_JOIN_si, Convert__Reg1_0, Feature_isGCN|Feature_isSICI, { MCK_SReg_64 }, },
  { 5316 /* s_cbranch_join */, AMDGPU::S_CBRANCH_JOIN_vi, Convert__Reg1_0, Feature_isGCN|Feature_isVI, { MCK_SReg_64 }, },
  { 5331 /* s_cbranch_scc0 */, AMDGPU::S_CBRANCH_SCC0, Convert__SoppBrTarget1_0, Feature_isGCN, { MCK_SoppBrTarget }, },
  { 5346 /* s_cbranch_scc1 */, AMDGPU::S_CBRANCH_SCC1, Convert__SoppBrTarget1_0, Feature_isGCN, { MCK_SoppBrTarget }, },
  { 5361 /* s_cbranch_vccnz */, AMDGPU::S_CBRANCH_VCCNZ, Convert__SoppBrTarget1_0, Feature_isGCN, { MCK_SoppBrTarget }, },
  { 5377 /* s_cbranch_vccz */, AMDGPU::S_CBRANCH_VCCZ, Convert__SoppBrTarget1_0, Feature_isGCN, { MCK_SoppBrTarget }, },
  { 5392 /* s_cmov_b32 */, AMDGPU::S_CMOV_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5392 /* s_cmov_b32 */, AMDGPU::S_CMOV_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5403 /* s_cmov_b64 */, AMDGPU::S_CMOV_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 5403 /* s_cmov_b64 */, AMDGPU::S_CMOV_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 5414 /* s_cmovk_i32 */, AMDGPU::S_CMOVK_I32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 5414 /* s_cmovk_i32 */, AMDGPU::S_CMOVK_I32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 5426 /* s_cmp_eq_i32 */, AMDGPU::S_CMP_EQ_I32, Convert__SSrc321_0__SSrc321_1, Feature_isGCN, { MCK_SSrc32, MCK_SSrc32 }, },
  { 5439 /* s_cmp_eq_u32 */, AMDGPU::S_CMP_EQ_U32, Convert__SSrc321_0__SSrc321_1, Feature_isGCN, { MCK_SSrc32, MCK_SSrc32 }, },
  { 5452 /* s_cmp_ge_i32 */, AMDGPU::S_CMP_GE_I32, Convert__SSrc321_0__SSrc321_1, Feature_isGCN, { MCK_SSrc32, MCK_SSrc32 }, },
  { 5465 /* s_cmp_ge_u32 */, AMDGPU::S_CMP_GE_U32, Convert__SSrc321_0__SSrc321_1, Feature_isGCN, { MCK_SSrc32, MCK_SSrc32 }, },
  { 5478 /* s_cmp_gt_i32 */, AMDGPU::S_CMP_GT_I32, Convert__SSrc321_0__SSrc321_1, Feature_isGCN, { MCK_SSrc32, MCK_SSrc32 }, },
  { 5491 /* s_cmp_gt_u32 */, AMDGPU::S_CMP_GT_U32, Convert__SSrc321_0__SSrc321_1, Feature_isGCN, { MCK_SSrc32, MCK_SSrc32 }, },
  { 5504 /* s_cmp_le_i32 */, AMDGPU::S_CMP_LE_I32, Convert__SSrc321_0__SSrc321_1, Feature_isGCN, { MCK_SSrc32, MCK_SSrc32 }, },
  { 5517 /* s_cmp_le_u32 */, AMDGPU::S_CMP_LE_U32, Convert__SSrc321_0__SSrc321_1, Feature_isGCN, { MCK_SSrc32, MCK_SSrc32 }, },
  { 5530 /* s_cmp_lg_i32 */, AMDGPU::S_CMP_LG_I32, Convert__SSrc321_0__SSrc321_1, Feature_isGCN, { MCK_SSrc32, MCK_SSrc32 }, },
  { 5543 /* s_cmp_lg_u32 */, AMDGPU::S_CMP_LG_U32, Convert__SSrc321_0__SSrc321_1, Feature_isGCN, { MCK_SSrc32, MCK_SSrc32 }, },
  { 5556 /* s_cmp_lt_i32 */, AMDGPU::S_CMP_LT_I32, Convert__SSrc321_0__SSrc321_1, Feature_isGCN, { MCK_SSrc32, MCK_SSrc32 }, },
  { 5569 /* s_cmp_lt_u32 */, AMDGPU::S_CMP_LT_U32, Convert__SSrc321_0__SSrc321_1, Feature_isGCN, { MCK_SSrc32, MCK_SSrc32 }, },
  { 5582 /* s_cmpk_eq_i32 */, AMDGPU::S_CMPK_EQ_I32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 5582 /* s_cmpk_eq_i32 */, AMDGPU::S_CMPK_EQ_I32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 5596 /* s_cmpk_eq_u32 */, AMDGPU::S_CMPK_EQ_U32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 5596 /* s_cmpk_eq_u32 */, AMDGPU::S_CMPK_EQ_U32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 5610 /* s_cmpk_ge_i32 */, AMDGPU::S_CMPK_GE_I32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 5610 /* s_cmpk_ge_i32 */, AMDGPU::S_CMPK_GE_I32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 5624 /* s_cmpk_ge_u32 */, AMDGPU::S_CMPK_GE_U32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 5624 /* s_cmpk_ge_u32 */, AMDGPU::S_CMPK_GE_U32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 5638 /* s_cmpk_gt_i32 */, AMDGPU::S_CMPK_GT_I32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 5638 /* s_cmpk_gt_i32 */, AMDGPU::S_CMPK_GT_I32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 5652 /* s_cmpk_gt_u32 */, AMDGPU::S_CMPK_GT_U32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 5652 /* s_cmpk_gt_u32 */, AMDGPU::S_CMPK_GT_U32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 5666 /* s_cmpk_le_i32 */, AMDGPU::S_CMPK_LE_I32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 5666 /* s_cmpk_le_i32 */, AMDGPU::S_CMPK_LE_I32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 5680 /* s_cmpk_le_u32 */, AMDGPU::S_CMPK_LE_U32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 5680 /* s_cmpk_le_u32 */, AMDGPU::S_CMPK_LE_U32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 5694 /* s_cmpk_lg_i32 */, AMDGPU::S_CMPK_LG_I32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 5694 /* s_cmpk_lg_i32 */, AMDGPU::S_CMPK_LG_I32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 5708 /* s_cmpk_lg_u32 */, AMDGPU::S_CMPK_LG_U32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 5708 /* s_cmpk_lg_u32 */, AMDGPU::S_CMPK_LG_U32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 5722 /* s_cmpk_lt_i32 */, AMDGPU::S_CMPK_LT_I32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 5722 /* s_cmpk_lt_i32 */, AMDGPU::S_CMPK_LT_I32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 5736 /* s_cmpk_lt_u32 */, AMDGPU::S_CMPK_LT_U32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 5736 /* s_cmpk_lt_u32 */, AMDGPU::S_CMPK_LT_U32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 5750 /* s_cselect_b32 */, AMDGPU::S_CSELECT_B32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5750 /* s_cselect_b32 */, AMDGPU::S_CSELECT_B32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5764 /* s_cselect_b64 */, AMDGPU::S_CSELECT_B64_si, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 5764 /* s_cselect_b64 */, AMDGPU::S_CSELECT_B64_vi, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 5778 /* s_decperflevel */, AMDGPU::S_DECPERFLEVEL, Convert__Imm1_0, Feature_isGCN, { MCK_Imm }, },
  { 5793 /* s_endpgm */, AMDGPU::S_ENDPGM, Convert_NoOperands, Feature_isGCN, {  }, },
  { 5802 /* s_ff0_i32_b32 */, AMDGPU::S_FF0_I32_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5802 /* s_ff0_i32_b32 */, AMDGPU::S_FF0_I32_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5816 /* s_ff0_i32_b64 */, AMDGPU::S_FF0_I32_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc64 }, },
  { 5816 /* s_ff0_i32_b64 */, AMDGPU::S_FF0_I32_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc64 }, },
  { 5830 /* s_ff1_i32_b32 */, AMDGPU::S_FF1_I32_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5830 /* s_ff1_i32_b32 */, AMDGPU::S_FF1_I32_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5844 /* s_ff1_i32_b64 */, AMDGPU::S_FF1_I32_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc64 }, },
  { 5844 /* s_ff1_i32_b64 */, AMDGPU::S_FF1_I32_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc64 }, },
  { 5858 /* s_flbit_i32 */, AMDGPU::S_FLBIT_I32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5858 /* s_flbit_i32 */, AMDGPU::S_FLBIT_I32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5870 /* s_flbit_i32_b32 */, AMDGPU::S_FLBIT_I32_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5870 /* s_flbit_i32_b32 */, AMDGPU::S_FLBIT_I32_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 5886 /* s_flbit_i32_b64 */, AMDGPU::S_FLBIT_I32_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc64 }, },
  { 5886 /* s_flbit_i32_b64 */, AMDGPU::S_FLBIT_I32_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc64 }, },
  { 5902 /* s_flbit_i32_i64 */, AMDGPU::S_FLBIT_I32_I64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc64 }, },
  { 5902 /* s_flbit_i32_i64 */, AMDGPU::S_FLBIT_I32_I64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc64 }, },
  { 5918 /* s_getpc_b64 */, AMDGPU::S_GETPC_B64_si, Convert__Reg1_0, Feature_isGCN|Feature_isSICI, { MCK_SReg_64 }, },
  { 5918 /* s_getpc_b64 */, AMDGPU::S_GETPC_B64_vi, Convert__Reg1_0, Feature_isGCN|Feature_isVI, { MCK_SReg_64 }, },
  { 5930 /* s_getreg_b32 */, AMDGPU::S_GETREG_B32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 5930 /* s_getreg_b32 */, AMDGPU::S_GETREG_B32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 5943 /* s_icache_inv */, AMDGPU::S_ICACHE_INV, Convert_NoOperands, Feature_isGCN, {  }, },
  { 5956 /* s_incperflevel */, AMDGPU::S_INCPERFLEVEL, Convert__Imm1_0, Feature_isGCN, { MCK_Imm }, },
  { 5971 /* s_load_dword */, AMDGPU::S_LOAD_DWORD_SGPR_si, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_SGPR_32, MCK_SReg_64, MCK_SReg_32 }, },
  { 5971 /* s_load_dword */, AMDGPU::S_LOAD_DWORD_SGPR_vi, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_SGPR_32, MCK_SReg_64, MCK_SReg_32 }, },
  { 5971 /* s_load_dword */, AMDGPU::S_LOAD_DWORD_IMM_ci, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDLiteralOffset1_2, Feature_isGCN|Feature_isCIOnly, { MCK_SGPR_32, MCK_SReg_64, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 5971 /* s_load_dword */, AMDGPU::S_LOAD_DWORD_IMM_si, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isSICI, { MCK_SGPR_32, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 5971 /* s_load_dword */, AMDGPU::S_LOAD_DWORD_IMM_vi, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isVI, { MCK_SGPR_32, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 5984 /* s_load_dwordx16 */, AMDGPU::S_LOAD_DWORDX16_SGPR_si, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_512, MCK_SReg_64, MCK_SReg_32 }, },
  { 5984 /* s_load_dwordx16 */, AMDGPU::S_LOAD_DWORDX16_SGPR_vi, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_512, MCK_SReg_64, MCK_SReg_32 }, },
  { 5984 /* s_load_dwordx16 */, AMDGPU::S_LOAD_DWORDX16_IMM_ci, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDLiteralOffset1_2, Feature_isGCN|Feature_isCIOnly, { MCK_SReg_512, MCK_SReg_64, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 5984 /* s_load_dwordx16 */, AMDGPU::S_LOAD_DWORDX16_IMM_si, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_512, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 5984 /* s_load_dwordx16 */, AMDGPU::S_LOAD_DWORDX16_IMM_vi, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_512, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6000 /* s_load_dwordx2 */, AMDGPU::S_LOAD_DWORDX2_SGPR_si, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SReg_64, MCK_SReg_32 }, },
  { 6000 /* s_load_dwordx2 */, AMDGPU::S_LOAD_DWORDX2_SGPR_vi, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SReg_64, MCK_SReg_32 }, },
  { 6000 /* s_load_dwordx2 */, AMDGPU::S_LOAD_DWORDX2_IMM_ci, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDLiteralOffset1_2, Feature_isGCN|Feature_isCIOnly, { MCK_SReg_64, MCK_SReg_64, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 6000 /* s_load_dwordx2 */, AMDGPU::S_LOAD_DWORDX2_IMM_si, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6000 /* s_load_dwordx2 */, AMDGPU::S_LOAD_DWORDX2_IMM_vi, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6015 /* s_load_dwordx4 */, AMDGPU::S_LOAD_DWORDX4_SGPR_si, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_128, MCK_SReg_64, MCK_SReg_32 }, },
  { 6015 /* s_load_dwordx4 */, AMDGPU::S_LOAD_DWORDX4_SGPR_vi, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_128, MCK_SReg_64, MCK_SReg_32 }, },
  { 6015 /* s_load_dwordx4 */, AMDGPU::S_LOAD_DWORDX4_IMM_ci, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDLiteralOffset1_2, Feature_isGCN|Feature_isCIOnly, { MCK_SReg_128, MCK_SReg_64, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 6015 /* s_load_dwordx4 */, AMDGPU::S_LOAD_DWORDX4_IMM_si, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_128, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6015 /* s_load_dwordx4 */, AMDGPU::S_LOAD_DWORDX4_IMM_vi, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_128, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6030 /* s_load_dwordx8 */, AMDGPU::S_LOAD_DWORDX8_SGPR_si, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_256, MCK_SReg_64, MCK_SReg_32 }, },
  { 6030 /* s_load_dwordx8 */, AMDGPU::S_LOAD_DWORDX8_SGPR_vi, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_256, MCK_SReg_64, MCK_SReg_32 }, },
  { 6030 /* s_load_dwordx8 */, AMDGPU::S_LOAD_DWORDX8_IMM_ci, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDLiteralOffset1_2, Feature_isGCN|Feature_isCIOnly, { MCK_SReg_256, MCK_SReg_64, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 6030 /* s_load_dwordx8 */, AMDGPU::S_LOAD_DWORDX8_IMM_si, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_256, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6030 /* s_load_dwordx8 */, AMDGPU::S_LOAD_DWORDX8_IMM_vi, Convert__Reg1_0__Reg1_1__SMRDOffsetisSMRDOffset1_2, Feature_isGCN|Feature_isVI, { MCK_SReg_256, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6045 /* s_lshl_b32 */, AMDGPU::S_LSHL_B32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6045 /* s_lshl_b32 */, AMDGPU::S_LSHL_B32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6056 /* s_lshl_b64 */, AMDGPU::S_LSHL_B64_si, Convert__Reg1_0__SSrc641_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 6056 /* s_lshl_b64 */, AMDGPU::S_LSHL_B64_vi, Convert__Reg1_0__SSrc641_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 6067 /* s_lshr_b32 */, AMDGPU::S_LSHR_B32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6067 /* s_lshr_b32 */, AMDGPU::S_LSHR_B32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6078 /* s_lshr_b64 */, AMDGPU::S_LSHR_B64_si, Convert__Reg1_0__SSrc641_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 6078 /* s_lshr_b64 */, AMDGPU::S_LSHR_B64_vi, Convert__Reg1_0__SSrc641_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 6089 /* s_max_i32 */, AMDGPU::S_MAX_I32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6089 /* s_max_i32 */, AMDGPU::S_MAX_I32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6099 /* s_max_u32 */, AMDGPU::S_MAX_U32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6099 /* s_max_u32 */, AMDGPU::S_MAX_U32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6109 /* s_min_i32 */, AMDGPU::S_MIN_I32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6109 /* s_min_i32 */, AMDGPU::S_MIN_I32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6119 /* s_min_u32 */, AMDGPU::S_MIN_U32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6119 /* s_min_u32 */, AMDGPU::S_MIN_U32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6129 /* s_mov_b32 */, AMDGPU::S_MOV_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6129 /* s_mov_b32 */, AMDGPU::S_MOV_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6139 /* s_mov_b64 */, AMDGPU::S_MOV_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6139 /* s_mov_b64 */, AMDGPU::S_MOV_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6149 /* s_mov_fed_b32 */, AMDGPU::S_MOV_FED_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6149 /* s_mov_fed_b32 */, AMDGPU::S_MOV_FED_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6163 /* s_mov_regrd_b32 */, AMDGPU::S_MOV_REGRD_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6163 /* s_mov_regrd_b32 */, AMDGPU::S_MOV_REGRD_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6179 /* s_movk_i32 */, AMDGPU::S_MOVK_I32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 6179 /* s_movk_i32 */, AMDGPU::S_MOVK_I32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 6190 /* s_movreld_b32 */, AMDGPU::S_MOVRELD_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6190 /* s_movreld_b32 */, AMDGPU::S_MOVRELD_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6204 /* s_movreld_b64 */, AMDGPU::S_MOVRELD_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6204 /* s_movreld_b64 */, AMDGPU::S_MOVRELD_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6218 /* s_movrels_b32 */, AMDGPU::S_MOVRELS_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6218 /* s_movrels_b32 */, AMDGPU::S_MOVRELS_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6232 /* s_movrels_b64 */, AMDGPU::S_MOVRELS_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6232 /* s_movrels_b64 */, AMDGPU::S_MOVRELS_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6246 /* s_mul_i32 */, AMDGPU::S_MUL_I32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6246 /* s_mul_i32 */, AMDGPU::S_MUL_I32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6256 /* s_mulk_i32 */, AMDGPU::S_MULK_I32_si, Convert__Reg1_0__Tie0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 6256 /* s_mulk_i32 */, AMDGPU::S_MULK_I32_vi, Convert__Reg1_0__Tie0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 6267 /* s_nand_b32 */, AMDGPU::S_NAND_B32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6267 /* s_nand_b32 */, AMDGPU::S_NAND_B32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6278 /* s_nand_b64 */, AMDGPU::S_NAND_B64_si, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6278 /* s_nand_b64 */, AMDGPU::S_NAND_B64_vi, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6289 /* s_nand_saveexec_b64 */, AMDGPU::S_NAND_SAVEEXEC_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6289 /* s_nand_saveexec_b64 */, AMDGPU::S_NAND_SAVEEXEC_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6309 /* s_nop */, AMDGPU::S_NOP, Convert__Imm1_0, Feature_isGCN, { MCK_Imm }, },
  { 6315 /* s_nor_b32 */, AMDGPU::S_NOR_B32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6315 /* s_nor_b32 */, AMDGPU::S_NOR_B32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6325 /* s_nor_b64 */, AMDGPU::S_NOR_B64_si, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6325 /* s_nor_b64 */, AMDGPU::S_NOR_B64_vi, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6335 /* s_nor_saveexec_b64 */, AMDGPU::S_NOR_SAVEEXEC_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6335 /* s_nor_saveexec_b64 */, AMDGPU::S_NOR_SAVEEXEC_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6354 /* s_not_b32 */, AMDGPU::S_NOT_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6354 /* s_not_b32 */, AMDGPU::S_NOT_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6364 /* s_not_b64 */, AMDGPU::S_NOT_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6364 /* s_not_b64 */, AMDGPU::S_NOT_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6374 /* s_or_b32 */, AMDGPU::S_OR_B32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6374 /* s_or_b32 */, AMDGPU::S_OR_B32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6383 /* s_or_b64 */, AMDGPU::S_OR_B64_si, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6383 /* s_or_b64 */, AMDGPU::S_OR_B64_vi, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6392 /* s_or_saveexec_b64 */, AMDGPU::S_OR_SAVEEXEC_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6392 /* s_or_saveexec_b64 */, AMDGPU::S_OR_SAVEEXEC_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6410 /* s_orn2_b32 */, AMDGPU::S_ORN2_B32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6410 /* s_orn2_b32 */, AMDGPU::S_ORN2_B32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6421 /* s_orn2_b64 */, AMDGPU::S_ORN2_B64_si, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6421 /* s_orn2_b64 */, AMDGPU::S_ORN2_B64_vi, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6432 /* s_orn2_saveexec_b64 */, AMDGPU::S_ORN2_SAVEEXEC_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6432 /* s_orn2_saveexec_b64 */, AMDGPU::S_ORN2_SAVEEXEC_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6452 /* s_quadmask_b32 */, AMDGPU::S_QUADMASK_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6452 /* s_quadmask_b32 */, AMDGPU::S_QUADMASK_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6467 /* s_quadmask_b64 */, AMDGPU::S_QUADMASK_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6467 /* s_quadmask_b64 */, AMDGPU::S_QUADMASK_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6482 /* s_rfe_b64 */, AMDGPU::S_RFE_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6482 /* s_rfe_b64 */, AMDGPU::S_RFE_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6492 /* s_sendmsg */, AMDGPU::S_SENDMSG, Convert__Imm1_0, Feature_isGCN, { MCK_Imm }, },
  { 6502 /* s_sendmsghalt */, AMDGPU::S_SENDMSGHALT, Convert__Imm1_0, Feature_isGCN, { MCK_Imm }, },
  { 6516 /* s_sethalt */, AMDGPU::S_SETHALT, Convert__Imm1_0, Feature_isGCN, { MCK_Imm }, },
  { 6526 /* s_setpc_b64 */, AMDGPU::S_SETPC_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6526 /* s_setpc_b64 */, AMDGPU::S_SETPC_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6538 /* s_setprio */, AMDGPU::S_SETPRIO, Convert__Imm1_0, Feature_isGCN, { MCK_Imm }, },
  { 6548 /* s_setreg_b32 */, AMDGPU::S_SETREG_B32_si, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_Imm }, },
  { 6548 /* s_setreg_b32 */, AMDGPU::S_SETREG_B32_vi, Convert__Reg1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_Imm }, },
  { 6561 /* s_setreg_imm32_b32 */, AMDGPU::S_SETREG_IMM32_B32_si, Convert__Imm1_0__Imm1_1, Feature_isGCN|Feature_isSICI, { MCK_Imm, MCK_Imm }, },
  { 6561 /* s_setreg_imm32_b32 */, AMDGPU::S_SETREG_IMM32_B32_vi, Convert__Imm1_0__Imm1_1, Feature_isGCN|Feature_isVI, { MCK_Imm, MCK_Imm }, },
  { 6580 /* s_sext_i32_i16 */, AMDGPU::S_SEXT_I32_I16_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6580 /* s_sext_i32_i16 */, AMDGPU::S_SEXT_I32_I16_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6595 /* s_sext_i32_i8 */, AMDGPU::S_SEXT_I32_I8_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6595 /* s_sext_i32_i8 */, AMDGPU::S_SEXT_I32_I8_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6609 /* s_sleep */, AMDGPU::S_SLEEP, Convert__Imm1_0, Feature_isGCN, { MCK_Imm }, },
  { 6617 /* s_sub_i32 */, AMDGPU::S_SUB_I32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6617 /* s_sub_i32 */, AMDGPU::S_SUB_I32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6627 /* s_sub_u32 */, AMDGPU::S_SUB_U32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6627 /* s_sub_u32 */, AMDGPU::S_SUB_U32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6637 /* s_subb_u32 */, AMDGPU::S_SUBB_U32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6637 /* s_subb_u32 */, AMDGPU::S_SUBB_U32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6648 /* s_swappc_b64 */, AMDGPU::S_SWAPPC_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6648 /* s_swappc_b64 */, AMDGPU::S_SWAPPC_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6661 /* s_trap */, AMDGPU::S_TRAP, Convert__Imm1_0, Feature_isGCN, { MCK_Imm }, },
  { 6668 /* s_ttracedata */, AMDGPU::S_TTRACEDATA, Convert_NoOperands, Feature_isGCN, {  }, },
  { 6681 /* s_waitcnt */, AMDGPU::S_WAITCNT, Convert__SWaitCnt1_0, Feature_isGCN, { MCK_SWaitCnt }, },
  { 6691 /* s_wqm_b32 */, AMDGPU::S_WQM_B32_si, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6691 /* s_wqm_b32 */, AMDGPU::S_WQM_B32_vi, Convert__Reg1_0__SSrc321_1, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32 }, },
  { 6701 /* s_wqm_b64 */, AMDGPU::S_WQM_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6701 /* s_wqm_b64 */, AMDGPU::S_WQM_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6711 /* s_xnor_b32 */, AMDGPU::S_XNOR_B32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6711 /* s_xnor_b32 */, AMDGPU::S_XNOR_B32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6722 /* s_xnor_b64 */, AMDGPU::S_XNOR_B64_si, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6722 /* s_xnor_b64 */, AMDGPU::S_XNOR_B64_vi, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6733 /* s_xnor_saveexec_b64 */, AMDGPU::S_XNOR_SAVEEXEC_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6733 /* s_xnor_saveexec_b64 */, AMDGPU::S_XNOR_SAVEEXEC_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6753 /* s_xor_b32 */, AMDGPU::S_XOR_B32_si, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6753 /* s_xor_b32 */, AMDGPU::S_XOR_B32_vi, Convert__Reg1_0__SSrc321_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6763 /* s_xor_b64 */, AMDGPU::S_XOR_B64_si, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6763 /* s_xor_b64 */, AMDGPU::S_XOR_B64_vi, Convert__Reg1_0__SSrc641_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6773 /* s_xor_saveexec_b64 */, AMDGPU::S_XOR_SAVEEXEC_B64_si, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6773 /* s_xor_saveexec_b64 */, AMDGPU::S_XOR_SAVEEXEC_B64_vi, Convert__Reg1_0__SSrc641_1, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_SSrc64 }, },
  { 6792 /* tbuffer_load_format_xyzw */, AMDGPU::TBUFFER_LOAD_FORMAT_XYZW_si, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Reg1_8__Reg1_9__Imm1_10__Imm1_11__SCSrc321_12, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6792 /* tbuffer_load_format_xyzw */, AMDGPU::TBUFFER_LOAD_FORMAT_XYZW_vi, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Reg1_8__Reg1_9__Imm1_10__Imm1_11__SCSrc321_12, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6817 /* tbuffer_store_format_x */, AMDGPU::TBUFFER_STORE_FORMAT_X_si, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Reg1_8__Reg1_9__Imm1_10__Imm1_11__SCSrc321_12, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6817 /* tbuffer_store_format_x */, AMDGPU::TBUFFER_STORE_FORMAT_X_vi, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Reg1_8__Reg1_9__Imm1_10__Imm1_11__SCSrc321_12, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6840 /* tbuffer_store_format_xy */, AMDGPU::TBUFFER_STORE_FORMAT_XY_si, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Reg1_8__Reg1_9__Imm1_10__Imm1_11__SCSrc321_12, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6840 /* tbuffer_store_format_xy */, AMDGPU::TBUFFER_STORE_FORMAT_XY_vi, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Reg1_8__Reg1_9__Imm1_10__Imm1_11__SCSrc321_12, Feature_isGCN, { MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6864 /* tbuffer_store_format_xyz */, AMDGPU::TBUFFER_STORE_FORMAT_XYZ_si, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Reg1_8__Reg1_9__Imm1_10__Imm1_11__SCSrc321_12, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6864 /* tbuffer_store_format_xyz */, AMDGPU::TBUFFER_STORE_FORMAT_XYZ_vi, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Reg1_8__Reg1_9__Imm1_10__Imm1_11__SCSrc321_12, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6889 /* tbuffer_store_format_xyzw */, AMDGPU::TBUFFER_STORE_FORMAT_XYZW_si, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Reg1_8__Reg1_9__Imm1_10__Imm1_11__SCSrc321_12, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6889 /* tbuffer_store_format_xyzw */, AMDGPU::TBUFFER_STORE_FORMAT_XYZW_vi, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Reg1_8__Reg1_9__Imm1_10__Imm1_11__SCSrc321_12, Feature_isGCN, { MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6915 /* v_add_f16 */, AMDGPU::V_ADD_F16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 6915 /* v_add_f16 */, AMDGPU::V_ADD_F16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 6915 /* v_add_f16 */, AMDGPU::V_ADD_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 6915 /* v_add_f16 */, AMDGPU::V_ADD_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 6925 /* v_add_f32 */, AMDGPU::V_ADD_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 6925 /* v_add_f32 */, AMDGPU::V_ADD_F32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 6925 /* v_add_f32 */, AMDGPU::V_ADD_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 6925 /* v_add_f32 */, AMDGPU::V_ADD_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 6935 /* v_add_f64 */, AMDGPU::V_ADD_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 6935 /* v_add_f64 */, AMDGPU::V_ADD_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 6945 /* v_add_i32 */, AMDGPU::V_ADD_I32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 6945 /* v_add_i32 */, AMDGPU::V_ADD_I32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 6945 /* v_add_i32 */, AMDGPU::V_ADD_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 6945 /* v_add_i32 */, AMDGPU::V_ADD_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 6955 /* v_add_u16 */, AMDGPU::V_ADD_U16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 6955 /* v_add_u16 */, AMDGPU::V_ADD_U16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 6955 /* v_add_u16 */, AMDGPU::V_ADD_U16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 6955 /* v_add_u16 */, AMDGPU::V_ADD_U16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 6965 /* v_addc_u32 */, AMDGPU::V_ADDC_U32_e32_si, Convert__Reg1_0__VCSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32 }, },
  { 6965 /* v_addc_u32 */, AMDGPU::V_ADDC_U32_e32_vi, Convert__Reg1_0__VCSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32 }, },
  { 6965 /* v_addc_u32 */, AMDGPU::V_ADDC_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 6965 /* v_addc_u32 */, AMDGPU::V_ADDC_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 6976 /* v_alignbit_b32 */, AMDGPU::V_ALIGNBIT_B32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 6976 /* v_alignbit_b32 */, AMDGPU::V_ALIGNBIT_B32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 6991 /* v_alignbyte_b32 */, AMDGPU::V_ALIGNBYTE_B32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 6991 /* v_alignbyte_b32 */, AMDGPU::V_ALIGNBYTE_B32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7007 /* v_and_b32 */, AMDGPU::V_AND_B32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7007 /* v_and_b32 */, AMDGPU::V_AND_B32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7007 /* v_and_b32 */, AMDGPU::V_AND_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7007 /* v_and_b32 */, AMDGPU::V_AND_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7017 /* v_ashr_i32 */, AMDGPU::V_ASHR_I32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7017 /* v_ashr_i32 */, AMDGPU::V_ASHR_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7028 /* v_ashr_i64 */, AMDGPU::V_ASHR_I64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VReg_64, MCK_VCSrc64, MCK_VCSrc32 }, },
  { 7028 /* v_ashr_i64 */, AMDGPU::V_ASHR_I64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_VReg_64, MCK_VCSrc64, MCK_VCSrc32 }, },
  { 7039 /* v_ashrrev_b16 */, AMDGPU::V_ASHRREV_B16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7039 /* v_ashrrev_b16 */, AMDGPU::V_ASHRREV_B16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7039 /* v_ashrrev_b16 */, AMDGPU::V_ASHRREV_B16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7039 /* v_ashrrev_b16 */, AMDGPU::V_ASHRREV_B16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7053 /* v_ashrrev_i32 */, AMDGPU::V_ASHRREV_I32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7053 /* v_ashrrev_i32 */, AMDGPU::V_ASHRREV_I32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7053 /* v_ashrrev_i32 */, AMDGPU::V_ASHRREV_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7053 /* v_ashrrev_i32 */, AMDGPU::V_ASHRREV_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7067 /* v_ashrrev_i64 */, AMDGPU::V_ASHRREV_I64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 7067 /* v_ashrrev_i64 */, AMDGPU::V_ASHRREV_I64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 7081 /* v_bcnt_u32_b32 */, AMDGPU::V_BCNT_U32_B32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7081 /* v_bcnt_u32_b32 */, AMDGPU::V_BCNT_U32_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7081 /* v_bcnt_u32_b32 */, AMDGPU::V_BCNT_U32_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7096 /* v_bfe_i32 */, AMDGPU::V_BFE_I32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7096 /* v_bfe_i32 */, AMDGPU::V_BFE_I32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7106 /* v_bfe_u32 */, AMDGPU::V_BFE_U32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7106 /* v_bfe_u32 */, AMDGPU::V_BFE_U32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7116 /* v_bfi_b32 */, AMDGPU::V_BFI_B32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7116 /* v_bfi_b32 */, AMDGPU::V_BFI_B32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7126 /* v_bfm_b32 */, AMDGPU::V_BFM_B32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7126 /* v_bfm_b32 */, AMDGPU::V_BFM_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7126 /* v_bfm_b32 */, AMDGPU::V_BFM_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7136 /* v_bfrev_b32 */, AMDGPU::V_BFREV_B32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 7136 /* v_bfrev_b32 */, AMDGPU::V_BFREV_B32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 7136 /* v_bfrev_b32 */, AMDGPU::V_BFREV_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 7136 /* v_bfrev_b32 */, AMDGPU::V_BFREV_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 7148 /* v_ceil_f16 */, AMDGPU::V_CEIL_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 7148 /* v_ceil_f16 */, AMDGPU::V_CEIL_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 7148 /* v_ceil_f16 */, AMDGPU::V_CEIL_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 7148 /* v_ceil_f16 */, AMDGPU::V_CEIL_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 7159 /* v_ceil_f32 */, AMDGPU::V_CEIL_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 7159 /* v_ceil_f32 */, AMDGPU::V_CEIL_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 7159 /* v_ceil_f32 */, AMDGPU::V_CEIL_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7159 /* v_ceil_f32 */, AMDGPU::V_CEIL_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7170 /* v_ceil_f64 */, AMDGPU::V_CEIL_F64_e32_si, Convert__Reg1_0__VSrc641_1, Feature_isCIVI|Feature_isSICI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 7170 /* v_ceil_f64 */, AMDGPU::V_CEIL_F64_e32_vi, Convert__Reg1_0__VSrc641_1, Feature_isCIVI|Feature_isVI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 7170 /* v_ceil_f64 */, AMDGPU::V_CEIL_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7170 /* v_ceil_f64 */, AMDGPU::V_CEIL_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7181 /* v_clrexcp */, AMDGPU::V_CLREXCP_si, Convert_NoOperands, Feature_isGCN|Feature_isSICI, {  }, },
  { 7181 /* v_clrexcp */, AMDGPU::V_CLREXCP_vi, Convert_NoOperands, Feature_isGCN|Feature_isVI, {  }, },
  { 7191 /* v_cmp_class_f32 */, AMDGPU::V_CMP_CLASS_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7191 /* v_cmp_class_f32 */, AMDGPU::V_CMP_CLASS_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7191 /* v_cmp_class_f32 */, AMDGPU::V_CMP_CLASS_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 7191 /* v_cmp_class_f32 */, AMDGPU::V_CMP_CLASS_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 7207 /* v_cmp_class_f32_e32 */, AMDGPU::V_CMP_CLASS_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7207 /* v_cmp_class_f32_e32 */, AMDGPU::V_CMP_CLASS_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7227 /* v_cmp_class_f64 */, AMDGPU::V_CMP_CLASS_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 7227 /* v_cmp_class_f64 */, AMDGPU::V_CMP_CLASS_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 7227 /* v_cmp_class_f64 */, AMDGPU::V_CMP_CLASS_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 7227 /* v_cmp_class_f64 */, AMDGPU::V_CMP_CLASS_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 7243 /* v_cmp_class_f64_e32 */, AMDGPU::V_CMP_CLASS_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 7243 /* v_cmp_class_f64_e32 */, AMDGPU::V_CMP_CLASS_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 7263 /* v_cmp_eq_f32 */, AMDGPU::V_CMP_EQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7263 /* v_cmp_eq_f32 */, AMDGPU::V_CMP_EQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7263 /* v_cmp_eq_f32 */, AMDGPU::V_CMP_EQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7263 /* v_cmp_eq_f32 */, AMDGPU::V_CMP_EQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7276 /* v_cmp_eq_f32_e32 */, AMDGPU::V_CMP_EQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7276 /* v_cmp_eq_f32_e32 */, AMDGPU::V_CMP_EQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7293 /* v_cmp_eq_f64 */, AMDGPU::V_CMP_EQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7293 /* v_cmp_eq_f64 */, AMDGPU::V_CMP_EQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7293 /* v_cmp_eq_f64 */, AMDGPU::V_CMP_EQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7293 /* v_cmp_eq_f64 */, AMDGPU::V_CMP_EQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7306 /* v_cmp_eq_f64_e32 */, AMDGPU::V_CMP_EQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7306 /* v_cmp_eq_f64_e32 */, AMDGPU::V_CMP_EQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7323 /* v_cmp_eq_i32 */, AMDGPU::V_CMP_EQ_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7323 /* v_cmp_eq_i32 */, AMDGPU::V_CMP_EQ_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7323 /* v_cmp_eq_i32 */, AMDGPU::V_CMP_EQ_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7323 /* v_cmp_eq_i32 */, AMDGPU::V_CMP_EQ_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7336 /* v_cmp_eq_i32_e32 */, AMDGPU::V_CMP_EQ_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7336 /* v_cmp_eq_i32_e32 */, AMDGPU::V_CMP_EQ_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7353 /* v_cmp_eq_i64 */, AMDGPU::V_CMP_EQ_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7353 /* v_cmp_eq_i64 */, AMDGPU::V_CMP_EQ_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7353 /* v_cmp_eq_i64 */, AMDGPU::V_CMP_EQ_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7353 /* v_cmp_eq_i64 */, AMDGPU::V_CMP_EQ_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7366 /* v_cmp_eq_i64_e32 */, AMDGPU::V_CMP_EQ_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7366 /* v_cmp_eq_i64_e32 */, AMDGPU::V_CMP_EQ_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7383 /* v_cmp_eq_u32 */, AMDGPU::V_CMP_EQ_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7383 /* v_cmp_eq_u32 */, AMDGPU::V_CMP_EQ_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7383 /* v_cmp_eq_u32 */, AMDGPU::V_CMP_EQ_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7383 /* v_cmp_eq_u32 */, AMDGPU::V_CMP_EQ_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7396 /* v_cmp_eq_u32_e32 */, AMDGPU::V_CMP_EQ_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7396 /* v_cmp_eq_u32_e32 */, AMDGPU::V_CMP_EQ_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7413 /* v_cmp_eq_u64 */, AMDGPU::V_CMP_EQ_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7413 /* v_cmp_eq_u64 */, AMDGPU::V_CMP_EQ_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7413 /* v_cmp_eq_u64 */, AMDGPU::V_CMP_EQ_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7413 /* v_cmp_eq_u64 */, AMDGPU::V_CMP_EQ_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7426 /* v_cmp_eq_u64_e32 */, AMDGPU::V_CMP_EQ_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7426 /* v_cmp_eq_u64_e32 */, AMDGPU::V_CMP_EQ_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7443 /* v_cmp_f_f32 */, AMDGPU::V_CMP_F_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7443 /* v_cmp_f_f32 */, AMDGPU::V_CMP_F_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7443 /* v_cmp_f_f32 */, AMDGPU::V_CMP_F_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7443 /* v_cmp_f_f32 */, AMDGPU::V_CMP_F_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7455 /* v_cmp_f_f32_e32 */, AMDGPU::V_CMP_F_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7455 /* v_cmp_f_f32_e32 */, AMDGPU::V_CMP_F_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7471 /* v_cmp_f_f64 */, AMDGPU::V_CMP_F_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7471 /* v_cmp_f_f64 */, AMDGPU::V_CMP_F_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7471 /* v_cmp_f_f64 */, AMDGPU::V_CMP_F_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7471 /* v_cmp_f_f64 */, AMDGPU::V_CMP_F_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7483 /* v_cmp_f_f64_e32 */, AMDGPU::V_CMP_F_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7483 /* v_cmp_f_f64_e32 */, AMDGPU::V_CMP_F_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7499 /* v_cmp_f_i32 */, AMDGPU::V_CMP_F_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7499 /* v_cmp_f_i32 */, AMDGPU::V_CMP_F_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7499 /* v_cmp_f_i32 */, AMDGPU::V_CMP_F_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7499 /* v_cmp_f_i32 */, AMDGPU::V_CMP_F_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7511 /* v_cmp_f_i32_e32 */, AMDGPU::V_CMP_F_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7511 /* v_cmp_f_i32_e32 */, AMDGPU::V_CMP_F_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7527 /* v_cmp_f_i64 */, AMDGPU::V_CMP_F_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7527 /* v_cmp_f_i64 */, AMDGPU::V_CMP_F_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7527 /* v_cmp_f_i64 */, AMDGPU::V_CMP_F_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7527 /* v_cmp_f_i64 */, AMDGPU::V_CMP_F_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7539 /* v_cmp_f_i64_e32 */, AMDGPU::V_CMP_F_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7539 /* v_cmp_f_i64_e32 */, AMDGPU::V_CMP_F_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7555 /* v_cmp_f_u32 */, AMDGPU::V_CMP_F_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7555 /* v_cmp_f_u32 */, AMDGPU::V_CMP_F_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7555 /* v_cmp_f_u32 */, AMDGPU::V_CMP_F_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7555 /* v_cmp_f_u32 */, AMDGPU::V_CMP_F_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7567 /* v_cmp_f_u32_e32 */, AMDGPU::V_CMP_F_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7567 /* v_cmp_f_u32_e32 */, AMDGPU::V_CMP_F_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7583 /* v_cmp_f_u64 */, AMDGPU::V_CMP_F_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7583 /* v_cmp_f_u64 */, AMDGPU::V_CMP_F_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7583 /* v_cmp_f_u64 */, AMDGPU::V_CMP_F_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7583 /* v_cmp_f_u64 */, AMDGPU::V_CMP_F_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7595 /* v_cmp_f_u64_e32 */, AMDGPU::V_CMP_F_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7595 /* v_cmp_f_u64_e32 */, AMDGPU::V_CMP_F_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7611 /* v_cmp_ge_f32 */, AMDGPU::V_CMP_GE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7611 /* v_cmp_ge_f32 */, AMDGPU::V_CMP_GE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7611 /* v_cmp_ge_f32 */, AMDGPU::V_CMP_GE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7611 /* v_cmp_ge_f32 */, AMDGPU::V_CMP_GE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7624 /* v_cmp_ge_f32_e32 */, AMDGPU::V_CMP_GE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7624 /* v_cmp_ge_f32_e32 */, AMDGPU::V_CMP_GE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7641 /* v_cmp_ge_f64 */, AMDGPU::V_CMP_GE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7641 /* v_cmp_ge_f64 */, AMDGPU::V_CMP_GE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7641 /* v_cmp_ge_f64 */, AMDGPU::V_CMP_GE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7641 /* v_cmp_ge_f64 */, AMDGPU::V_CMP_GE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7654 /* v_cmp_ge_f64_e32 */, AMDGPU::V_CMP_GE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7654 /* v_cmp_ge_f64_e32 */, AMDGPU::V_CMP_GE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7671 /* v_cmp_ge_i32 */, AMDGPU::V_CMP_GE_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7671 /* v_cmp_ge_i32 */, AMDGPU::V_CMP_GE_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7671 /* v_cmp_ge_i32 */, AMDGPU::V_CMP_GE_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7671 /* v_cmp_ge_i32 */, AMDGPU::V_CMP_GE_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7684 /* v_cmp_ge_i32_e32 */, AMDGPU::V_CMP_GE_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7684 /* v_cmp_ge_i32_e32 */, AMDGPU::V_CMP_GE_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7701 /* v_cmp_ge_i64 */, AMDGPU::V_CMP_GE_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7701 /* v_cmp_ge_i64 */, AMDGPU::V_CMP_GE_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7701 /* v_cmp_ge_i64 */, AMDGPU::V_CMP_GE_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7701 /* v_cmp_ge_i64 */, AMDGPU::V_CMP_GE_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7714 /* v_cmp_ge_i64_e32 */, AMDGPU::V_CMP_GE_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7714 /* v_cmp_ge_i64_e32 */, AMDGPU::V_CMP_GE_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7731 /* v_cmp_ge_u32 */, AMDGPU::V_CMP_GE_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7731 /* v_cmp_ge_u32 */, AMDGPU::V_CMP_GE_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7731 /* v_cmp_ge_u32 */, AMDGPU::V_CMP_GE_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7731 /* v_cmp_ge_u32 */, AMDGPU::V_CMP_GE_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7744 /* v_cmp_ge_u32_e32 */, AMDGPU::V_CMP_GE_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7744 /* v_cmp_ge_u32_e32 */, AMDGPU::V_CMP_GE_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7761 /* v_cmp_ge_u64 */, AMDGPU::V_CMP_GE_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7761 /* v_cmp_ge_u64 */, AMDGPU::V_CMP_GE_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7761 /* v_cmp_ge_u64 */, AMDGPU::V_CMP_GE_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7761 /* v_cmp_ge_u64 */, AMDGPU::V_CMP_GE_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7774 /* v_cmp_ge_u64_e32 */, AMDGPU::V_CMP_GE_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7774 /* v_cmp_ge_u64_e32 */, AMDGPU::V_CMP_GE_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7791 /* v_cmp_gt_f32 */, AMDGPU::V_CMP_GT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7791 /* v_cmp_gt_f32 */, AMDGPU::V_CMP_GT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7791 /* v_cmp_gt_f32 */, AMDGPU::V_CMP_GT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7791 /* v_cmp_gt_f32 */, AMDGPU::V_CMP_GT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7804 /* v_cmp_gt_f32_e32 */, AMDGPU::V_CMP_GT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7804 /* v_cmp_gt_f32_e32 */, AMDGPU::V_CMP_GT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7821 /* v_cmp_gt_f64 */, AMDGPU::V_CMP_GT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7821 /* v_cmp_gt_f64 */, AMDGPU::V_CMP_GT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7821 /* v_cmp_gt_f64 */, AMDGPU::V_CMP_GT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7821 /* v_cmp_gt_f64 */, AMDGPU::V_CMP_GT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7834 /* v_cmp_gt_f64_e32 */, AMDGPU::V_CMP_GT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7834 /* v_cmp_gt_f64_e32 */, AMDGPU::V_CMP_GT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7851 /* v_cmp_gt_i32 */, AMDGPU::V_CMP_GT_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7851 /* v_cmp_gt_i32 */, AMDGPU::V_CMP_GT_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7851 /* v_cmp_gt_i32 */, AMDGPU::V_CMP_GT_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7851 /* v_cmp_gt_i32 */, AMDGPU::V_CMP_GT_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7864 /* v_cmp_gt_i32_e32 */, AMDGPU::V_CMP_GT_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7864 /* v_cmp_gt_i32_e32 */, AMDGPU::V_CMP_GT_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7881 /* v_cmp_gt_i64 */, AMDGPU::V_CMP_GT_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7881 /* v_cmp_gt_i64 */, AMDGPU::V_CMP_GT_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7881 /* v_cmp_gt_i64 */, AMDGPU::V_CMP_GT_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7881 /* v_cmp_gt_i64 */, AMDGPU::V_CMP_GT_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7894 /* v_cmp_gt_i64_e32 */, AMDGPU::V_CMP_GT_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7894 /* v_cmp_gt_i64_e32 */, AMDGPU::V_CMP_GT_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7911 /* v_cmp_gt_u32 */, AMDGPU::V_CMP_GT_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7911 /* v_cmp_gt_u32 */, AMDGPU::V_CMP_GT_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7911 /* v_cmp_gt_u32 */, AMDGPU::V_CMP_GT_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7911 /* v_cmp_gt_u32 */, AMDGPU::V_CMP_GT_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7924 /* v_cmp_gt_u32_e32 */, AMDGPU::V_CMP_GT_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7924 /* v_cmp_gt_u32_e32 */, AMDGPU::V_CMP_GT_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7941 /* v_cmp_gt_u64 */, AMDGPU::V_CMP_GT_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7941 /* v_cmp_gt_u64 */, AMDGPU::V_CMP_GT_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7941 /* v_cmp_gt_u64 */, AMDGPU::V_CMP_GT_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7941 /* v_cmp_gt_u64 */, AMDGPU::V_CMP_GT_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7954 /* v_cmp_gt_u64_e32 */, AMDGPU::V_CMP_GT_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7954 /* v_cmp_gt_u64_e32 */, AMDGPU::V_CMP_GT_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7971 /* v_cmp_le_f32 */, AMDGPU::V_CMP_LE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7971 /* v_cmp_le_f32 */, AMDGPU::V_CMP_LE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7971 /* v_cmp_le_f32 */, AMDGPU::V_CMP_LE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7971 /* v_cmp_le_f32 */, AMDGPU::V_CMP_LE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7984 /* v_cmp_le_f32_e32 */, AMDGPU::V_CMP_LE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7984 /* v_cmp_le_f32_e32 */, AMDGPU::V_CMP_LE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8001 /* v_cmp_le_f64 */, AMDGPU::V_CMP_LE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8001 /* v_cmp_le_f64 */, AMDGPU::V_CMP_LE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8001 /* v_cmp_le_f64 */, AMDGPU::V_CMP_LE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8001 /* v_cmp_le_f64 */, AMDGPU::V_CMP_LE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8014 /* v_cmp_le_f64_e32 */, AMDGPU::V_CMP_LE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8014 /* v_cmp_le_f64_e32 */, AMDGPU::V_CMP_LE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8031 /* v_cmp_le_i32 */, AMDGPU::V_CMP_LE_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8031 /* v_cmp_le_i32 */, AMDGPU::V_CMP_LE_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8031 /* v_cmp_le_i32 */, AMDGPU::V_CMP_LE_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8031 /* v_cmp_le_i32 */, AMDGPU::V_CMP_LE_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8044 /* v_cmp_le_i32_e32 */, AMDGPU::V_CMP_LE_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8044 /* v_cmp_le_i32_e32 */, AMDGPU::V_CMP_LE_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8061 /* v_cmp_le_i64 */, AMDGPU::V_CMP_LE_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8061 /* v_cmp_le_i64 */, AMDGPU::V_CMP_LE_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8061 /* v_cmp_le_i64 */, AMDGPU::V_CMP_LE_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8061 /* v_cmp_le_i64 */, AMDGPU::V_CMP_LE_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8074 /* v_cmp_le_i64_e32 */, AMDGPU::V_CMP_LE_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8074 /* v_cmp_le_i64_e32 */, AMDGPU::V_CMP_LE_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8091 /* v_cmp_le_u32 */, AMDGPU::V_CMP_LE_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8091 /* v_cmp_le_u32 */, AMDGPU::V_CMP_LE_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8091 /* v_cmp_le_u32 */, AMDGPU::V_CMP_LE_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8091 /* v_cmp_le_u32 */, AMDGPU::V_CMP_LE_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8104 /* v_cmp_le_u32_e32 */, AMDGPU::V_CMP_LE_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8104 /* v_cmp_le_u32_e32 */, AMDGPU::V_CMP_LE_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8121 /* v_cmp_le_u64 */, AMDGPU::V_CMP_LE_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8121 /* v_cmp_le_u64 */, AMDGPU::V_CMP_LE_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8121 /* v_cmp_le_u64 */, AMDGPU::V_CMP_LE_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8121 /* v_cmp_le_u64 */, AMDGPU::V_CMP_LE_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8134 /* v_cmp_le_u64_e32 */, AMDGPU::V_CMP_LE_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8134 /* v_cmp_le_u64_e32 */, AMDGPU::V_CMP_LE_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8151 /* v_cmp_lg_f32 */, AMDGPU::V_CMP_LG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8151 /* v_cmp_lg_f32 */, AMDGPU::V_CMP_LG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8151 /* v_cmp_lg_f32 */, AMDGPU::V_CMP_LG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8151 /* v_cmp_lg_f32 */, AMDGPU::V_CMP_LG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8164 /* v_cmp_lg_f32_e32 */, AMDGPU::V_CMP_LG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8164 /* v_cmp_lg_f32_e32 */, AMDGPU::V_CMP_LG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8181 /* v_cmp_lg_f64 */, AMDGPU::V_CMP_LG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8181 /* v_cmp_lg_f64 */, AMDGPU::V_CMP_LG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8181 /* v_cmp_lg_f64 */, AMDGPU::V_CMP_LG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8181 /* v_cmp_lg_f64 */, AMDGPU::V_CMP_LG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8194 /* v_cmp_lg_f64_e32 */, AMDGPU::V_CMP_LG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8194 /* v_cmp_lg_f64_e32 */, AMDGPU::V_CMP_LG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8211 /* v_cmp_lt_f32 */, AMDGPU::V_CMP_LT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8211 /* v_cmp_lt_f32 */, AMDGPU::V_CMP_LT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8211 /* v_cmp_lt_f32 */, AMDGPU::V_CMP_LT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8211 /* v_cmp_lt_f32 */, AMDGPU::V_CMP_LT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8224 /* v_cmp_lt_f32_e32 */, AMDGPU::V_CMP_LT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8224 /* v_cmp_lt_f32_e32 */, AMDGPU::V_CMP_LT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8241 /* v_cmp_lt_f64 */, AMDGPU::V_CMP_LT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8241 /* v_cmp_lt_f64 */, AMDGPU::V_CMP_LT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8241 /* v_cmp_lt_f64 */, AMDGPU::V_CMP_LT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8241 /* v_cmp_lt_f64 */, AMDGPU::V_CMP_LT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8254 /* v_cmp_lt_f64_e32 */, AMDGPU::V_CMP_LT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8254 /* v_cmp_lt_f64_e32 */, AMDGPU::V_CMP_LT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8271 /* v_cmp_lt_i32 */, AMDGPU::V_CMP_LT_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8271 /* v_cmp_lt_i32 */, AMDGPU::V_CMP_LT_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8271 /* v_cmp_lt_i32 */, AMDGPU::V_CMP_LT_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8271 /* v_cmp_lt_i32 */, AMDGPU::V_CMP_LT_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8284 /* v_cmp_lt_i32_e32 */, AMDGPU::V_CMP_LT_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8284 /* v_cmp_lt_i32_e32 */, AMDGPU::V_CMP_LT_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8301 /* v_cmp_lt_i64 */, AMDGPU::V_CMP_LT_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8301 /* v_cmp_lt_i64 */, AMDGPU::V_CMP_LT_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8301 /* v_cmp_lt_i64 */, AMDGPU::V_CMP_LT_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8301 /* v_cmp_lt_i64 */, AMDGPU::V_CMP_LT_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8314 /* v_cmp_lt_i64_e32 */, AMDGPU::V_CMP_LT_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8314 /* v_cmp_lt_i64_e32 */, AMDGPU::V_CMP_LT_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8331 /* v_cmp_lt_u32 */, AMDGPU::V_CMP_LT_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8331 /* v_cmp_lt_u32 */, AMDGPU::V_CMP_LT_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8331 /* v_cmp_lt_u32 */, AMDGPU::V_CMP_LT_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8331 /* v_cmp_lt_u32 */, AMDGPU::V_CMP_LT_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8344 /* v_cmp_lt_u32_e32 */, AMDGPU::V_CMP_LT_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8344 /* v_cmp_lt_u32_e32 */, AMDGPU::V_CMP_LT_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8361 /* v_cmp_lt_u64 */, AMDGPU::V_CMP_LT_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8361 /* v_cmp_lt_u64 */, AMDGPU::V_CMP_LT_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8361 /* v_cmp_lt_u64 */, AMDGPU::V_CMP_LT_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8361 /* v_cmp_lt_u64 */, AMDGPU::V_CMP_LT_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8374 /* v_cmp_lt_u64_e32 */, AMDGPU::V_CMP_LT_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8374 /* v_cmp_lt_u64_e32 */, AMDGPU::V_CMP_LT_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8391 /* v_cmp_ne_i32 */, AMDGPU::V_CMP_NE_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8391 /* v_cmp_ne_i32 */, AMDGPU::V_CMP_NE_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8391 /* v_cmp_ne_i32 */, AMDGPU::V_CMP_NE_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8391 /* v_cmp_ne_i32 */, AMDGPU::V_CMP_NE_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8404 /* v_cmp_ne_i32_e32 */, AMDGPU::V_CMP_NE_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8404 /* v_cmp_ne_i32_e32 */, AMDGPU::V_CMP_NE_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8421 /* v_cmp_ne_i64 */, AMDGPU::V_CMP_NE_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8421 /* v_cmp_ne_i64 */, AMDGPU::V_CMP_NE_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8421 /* v_cmp_ne_i64 */, AMDGPU::V_CMP_NE_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8421 /* v_cmp_ne_i64 */, AMDGPU::V_CMP_NE_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8434 /* v_cmp_ne_i64_e32 */, AMDGPU::V_CMP_NE_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8434 /* v_cmp_ne_i64_e32 */, AMDGPU::V_CMP_NE_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8451 /* v_cmp_ne_u32 */, AMDGPU::V_CMP_NE_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8451 /* v_cmp_ne_u32 */, AMDGPU::V_CMP_NE_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8451 /* v_cmp_ne_u32 */, AMDGPU::V_CMP_NE_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8451 /* v_cmp_ne_u32 */, AMDGPU::V_CMP_NE_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8464 /* v_cmp_ne_u32_e32 */, AMDGPU::V_CMP_NE_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8464 /* v_cmp_ne_u32_e32 */, AMDGPU::V_CMP_NE_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8481 /* v_cmp_ne_u64 */, AMDGPU::V_CMP_NE_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8481 /* v_cmp_ne_u64 */, AMDGPU::V_CMP_NE_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8481 /* v_cmp_ne_u64 */, AMDGPU::V_CMP_NE_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8481 /* v_cmp_ne_u64 */, AMDGPU::V_CMP_NE_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8494 /* v_cmp_ne_u64_e32 */, AMDGPU::V_CMP_NE_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8494 /* v_cmp_ne_u64_e32 */, AMDGPU::V_CMP_NE_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8511 /* v_cmp_neq_f32 */, AMDGPU::V_CMP_NEQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8511 /* v_cmp_neq_f32 */, AMDGPU::V_CMP_NEQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8511 /* v_cmp_neq_f32 */, AMDGPU::V_CMP_NEQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8511 /* v_cmp_neq_f32 */, AMDGPU::V_CMP_NEQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8525 /* v_cmp_neq_f32_e32 */, AMDGPU::V_CMP_NEQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8525 /* v_cmp_neq_f32_e32 */, AMDGPU::V_CMP_NEQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8543 /* v_cmp_neq_f64 */, AMDGPU::V_CMP_NEQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8543 /* v_cmp_neq_f64 */, AMDGPU::V_CMP_NEQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8543 /* v_cmp_neq_f64 */, AMDGPU::V_CMP_NEQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8543 /* v_cmp_neq_f64 */, AMDGPU::V_CMP_NEQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8557 /* v_cmp_neq_f64_e32 */, AMDGPU::V_CMP_NEQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8557 /* v_cmp_neq_f64_e32 */, AMDGPU::V_CMP_NEQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8575 /* v_cmp_nge_f32 */, AMDGPU::V_CMP_NGE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8575 /* v_cmp_nge_f32 */, AMDGPU::V_CMP_NGE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8575 /* v_cmp_nge_f32 */, AMDGPU::V_CMP_NGE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8575 /* v_cmp_nge_f32 */, AMDGPU::V_CMP_NGE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8589 /* v_cmp_nge_f32_e32 */, AMDGPU::V_CMP_NGE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8589 /* v_cmp_nge_f32_e32 */, AMDGPU::V_CMP_NGE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8607 /* v_cmp_nge_f64 */, AMDGPU::V_CMP_NGE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8607 /* v_cmp_nge_f64 */, AMDGPU::V_CMP_NGE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8607 /* v_cmp_nge_f64 */, AMDGPU::V_CMP_NGE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8607 /* v_cmp_nge_f64 */, AMDGPU::V_CMP_NGE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8621 /* v_cmp_nge_f64_e32 */, AMDGPU::V_CMP_NGE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8621 /* v_cmp_nge_f64_e32 */, AMDGPU::V_CMP_NGE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8639 /* v_cmp_ngt_f32 */, AMDGPU::V_CMP_NGT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8639 /* v_cmp_ngt_f32 */, AMDGPU::V_CMP_NGT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8639 /* v_cmp_ngt_f32 */, AMDGPU::V_CMP_NGT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8639 /* v_cmp_ngt_f32 */, AMDGPU::V_CMP_NGT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8653 /* v_cmp_ngt_f32_e32 */, AMDGPU::V_CMP_NGT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8653 /* v_cmp_ngt_f32_e32 */, AMDGPU::V_CMP_NGT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8671 /* v_cmp_ngt_f64 */, AMDGPU::V_CMP_NGT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8671 /* v_cmp_ngt_f64 */, AMDGPU::V_CMP_NGT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8671 /* v_cmp_ngt_f64 */, AMDGPU::V_CMP_NGT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8671 /* v_cmp_ngt_f64 */, AMDGPU::V_CMP_NGT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8685 /* v_cmp_ngt_f64_e32 */, AMDGPU::V_CMP_NGT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8685 /* v_cmp_ngt_f64_e32 */, AMDGPU::V_CMP_NGT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8703 /* v_cmp_nle_f32 */, AMDGPU::V_CMP_NLE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8703 /* v_cmp_nle_f32 */, AMDGPU::V_CMP_NLE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8703 /* v_cmp_nle_f32 */, AMDGPU::V_CMP_NLE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8703 /* v_cmp_nle_f32 */, AMDGPU::V_CMP_NLE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8717 /* v_cmp_nle_f32_e32 */, AMDGPU::V_CMP_NLE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8717 /* v_cmp_nle_f32_e32 */, AMDGPU::V_CMP_NLE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8735 /* v_cmp_nle_f64 */, AMDGPU::V_CMP_NLE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8735 /* v_cmp_nle_f64 */, AMDGPU::V_CMP_NLE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8735 /* v_cmp_nle_f64 */, AMDGPU::V_CMP_NLE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8735 /* v_cmp_nle_f64 */, AMDGPU::V_CMP_NLE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8749 /* v_cmp_nle_f64_e32 */, AMDGPU::V_CMP_NLE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8749 /* v_cmp_nle_f64_e32 */, AMDGPU::V_CMP_NLE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8767 /* v_cmp_nlg_f32 */, AMDGPU::V_CMP_NLG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8767 /* v_cmp_nlg_f32 */, AMDGPU::V_CMP_NLG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8767 /* v_cmp_nlg_f32 */, AMDGPU::V_CMP_NLG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8767 /* v_cmp_nlg_f32 */, AMDGPU::V_CMP_NLG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8781 /* v_cmp_nlg_f32_e32 */, AMDGPU::V_CMP_NLG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8781 /* v_cmp_nlg_f32_e32 */, AMDGPU::V_CMP_NLG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8799 /* v_cmp_nlg_f64 */, AMDGPU::V_CMP_NLG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8799 /* v_cmp_nlg_f64 */, AMDGPU::V_CMP_NLG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8799 /* v_cmp_nlg_f64 */, AMDGPU::V_CMP_NLG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8799 /* v_cmp_nlg_f64 */, AMDGPU::V_CMP_NLG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8813 /* v_cmp_nlg_f64_e32 */, AMDGPU::V_CMP_NLG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8813 /* v_cmp_nlg_f64_e32 */, AMDGPU::V_CMP_NLG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8831 /* v_cmp_nlt_f32 */, AMDGPU::V_CMP_NLT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8831 /* v_cmp_nlt_f32 */, AMDGPU::V_CMP_NLT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8831 /* v_cmp_nlt_f32 */, AMDGPU::V_CMP_NLT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8831 /* v_cmp_nlt_f32 */, AMDGPU::V_CMP_NLT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8845 /* v_cmp_nlt_f32_e32 */, AMDGPU::V_CMP_NLT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8845 /* v_cmp_nlt_f32_e32 */, AMDGPU::V_CMP_NLT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8863 /* v_cmp_nlt_f64 */, AMDGPU::V_CMP_NLT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8863 /* v_cmp_nlt_f64 */, AMDGPU::V_CMP_NLT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8863 /* v_cmp_nlt_f64 */, AMDGPU::V_CMP_NLT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8863 /* v_cmp_nlt_f64 */, AMDGPU::V_CMP_NLT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8877 /* v_cmp_nlt_f64_e32 */, AMDGPU::V_CMP_NLT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8877 /* v_cmp_nlt_f64_e32 */, AMDGPU::V_CMP_NLT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8895 /* v_cmp_o_f32 */, AMDGPU::V_CMP_O_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8895 /* v_cmp_o_f32 */, AMDGPU::V_CMP_O_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8895 /* v_cmp_o_f32 */, AMDGPU::V_CMP_O_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8895 /* v_cmp_o_f32 */, AMDGPU::V_CMP_O_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8907 /* v_cmp_o_f32_e32 */, AMDGPU::V_CMP_O_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8907 /* v_cmp_o_f32_e32 */, AMDGPU::V_CMP_O_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8923 /* v_cmp_o_f64 */, AMDGPU::V_CMP_O_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8923 /* v_cmp_o_f64 */, AMDGPU::V_CMP_O_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8923 /* v_cmp_o_f64 */, AMDGPU::V_CMP_O_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8923 /* v_cmp_o_f64 */, AMDGPU::V_CMP_O_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8935 /* v_cmp_o_f64_e32 */, AMDGPU::V_CMP_O_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8935 /* v_cmp_o_f64_e32 */, AMDGPU::V_CMP_O_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8951 /* v_cmp_t_i32 */, AMDGPU::V_CMP_T_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8951 /* v_cmp_t_i32 */, AMDGPU::V_CMP_T_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8951 /* v_cmp_t_i32 */, AMDGPU::V_CMP_T_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8951 /* v_cmp_t_i32 */, AMDGPU::V_CMP_T_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8963 /* v_cmp_t_i32_e32 */, AMDGPU::V_CMP_T_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8963 /* v_cmp_t_i32_e32 */, AMDGPU::V_CMP_T_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8979 /* v_cmp_t_i64 */, AMDGPU::V_CMP_T_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8979 /* v_cmp_t_i64 */, AMDGPU::V_CMP_T_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8979 /* v_cmp_t_i64 */, AMDGPU::V_CMP_T_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8979 /* v_cmp_t_i64 */, AMDGPU::V_CMP_T_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8991 /* v_cmp_t_i64_e32 */, AMDGPU::V_CMP_T_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8991 /* v_cmp_t_i64_e32 */, AMDGPU::V_CMP_T_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9007 /* v_cmp_t_u32 */, AMDGPU::V_CMP_T_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9007 /* v_cmp_t_u32 */, AMDGPU::V_CMP_T_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9007 /* v_cmp_t_u32 */, AMDGPU::V_CMP_T_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 9007 /* v_cmp_t_u32 */, AMDGPU::V_CMP_T_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 9019 /* v_cmp_t_u32_e32 */, AMDGPU::V_CMP_T_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9019 /* v_cmp_t_u32_e32 */, AMDGPU::V_CMP_T_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9035 /* v_cmp_t_u64 */, AMDGPU::V_CMP_T_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9035 /* v_cmp_t_u64 */, AMDGPU::V_CMP_T_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9035 /* v_cmp_t_u64 */, AMDGPU::V_CMP_T_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 9035 /* v_cmp_t_u64 */, AMDGPU::V_CMP_T_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 9047 /* v_cmp_t_u64_e32 */, AMDGPU::V_CMP_T_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9047 /* v_cmp_t_u64_e32 */, AMDGPU::V_CMP_T_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9063 /* v_cmp_tru_f32 */, AMDGPU::V_CMP_TRU_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9063 /* v_cmp_tru_f32 */, AMDGPU::V_CMP_TRU_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9063 /* v_cmp_tru_f32 */, AMDGPU::V_CMP_TRU_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9063 /* v_cmp_tru_f32 */, AMDGPU::V_CMP_TRU_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9077 /* v_cmp_tru_f32_e32 */, AMDGPU::V_CMP_TRU_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9077 /* v_cmp_tru_f32_e32 */, AMDGPU::V_CMP_TRU_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9095 /* v_cmp_tru_f64 */, AMDGPU::V_CMP_TRU_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9095 /* v_cmp_tru_f64 */, AMDGPU::V_CMP_TRU_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9095 /* v_cmp_tru_f64 */, AMDGPU::V_CMP_TRU_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9095 /* v_cmp_tru_f64 */, AMDGPU::V_CMP_TRU_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9109 /* v_cmp_tru_f64_e32 */, AMDGPU::V_CMP_TRU_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9109 /* v_cmp_tru_f64_e32 */, AMDGPU::V_CMP_TRU_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9127 /* v_cmp_u_f32 */, AMDGPU::V_CMP_U_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9127 /* v_cmp_u_f32 */, AMDGPU::V_CMP_U_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9127 /* v_cmp_u_f32 */, AMDGPU::V_CMP_U_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9127 /* v_cmp_u_f32 */, AMDGPU::V_CMP_U_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9139 /* v_cmp_u_f32_e32 */, AMDGPU::V_CMP_U_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9139 /* v_cmp_u_f32_e32 */, AMDGPU::V_CMP_U_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9155 /* v_cmp_u_f64 */, AMDGPU::V_CMP_U_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9155 /* v_cmp_u_f64 */, AMDGPU::V_CMP_U_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9155 /* v_cmp_u_f64 */, AMDGPU::V_CMP_U_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9155 /* v_cmp_u_f64 */, AMDGPU::V_CMP_U_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9167 /* v_cmp_u_f64_e32 */, AMDGPU::V_CMP_U_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9167 /* v_cmp_u_f64_e32 */, AMDGPU::V_CMP_U_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9183 /* v_cmps_eq_f32 */, AMDGPU::V_CMPS_EQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9183 /* v_cmps_eq_f32 */, AMDGPU::V_CMPS_EQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9183 /* v_cmps_eq_f32 */, AMDGPU::V_CMPS_EQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9183 /* v_cmps_eq_f32 */, AMDGPU::V_CMPS_EQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9197 /* v_cmps_eq_f32_e32 */, AMDGPU::V_CMPS_EQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9197 /* v_cmps_eq_f32_e32 */, AMDGPU::V_CMPS_EQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9215 /* v_cmps_eq_f64 */, AMDGPU::V_CMPS_EQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9215 /* v_cmps_eq_f64 */, AMDGPU::V_CMPS_EQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9215 /* v_cmps_eq_f64 */, AMDGPU::V_CMPS_EQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9215 /* v_cmps_eq_f64 */, AMDGPU::V_CMPS_EQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9229 /* v_cmps_eq_f64_e32 */, AMDGPU::V_CMPS_EQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9229 /* v_cmps_eq_f64_e32 */, AMDGPU::V_CMPS_EQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9247 /* v_cmps_f_f32 */, AMDGPU::V_CMPS_F_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9247 /* v_cmps_f_f32 */, AMDGPU::V_CMPS_F_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9247 /* v_cmps_f_f32 */, AMDGPU::V_CMPS_F_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9247 /* v_cmps_f_f32 */, AMDGPU::V_CMPS_F_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9260 /* v_cmps_f_f32_e32 */, AMDGPU::V_CMPS_F_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9260 /* v_cmps_f_f32_e32 */, AMDGPU::V_CMPS_F_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9277 /* v_cmps_f_f64 */, AMDGPU::V_CMPS_F_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9277 /* v_cmps_f_f64 */, AMDGPU::V_CMPS_F_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9277 /* v_cmps_f_f64 */, AMDGPU::V_CMPS_F_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9277 /* v_cmps_f_f64 */, AMDGPU::V_CMPS_F_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9290 /* v_cmps_f_f64_e32 */, AMDGPU::V_CMPS_F_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9290 /* v_cmps_f_f64_e32 */, AMDGPU::V_CMPS_F_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9307 /* v_cmps_ge_f32 */, AMDGPU::V_CMPS_GE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9307 /* v_cmps_ge_f32 */, AMDGPU::V_CMPS_GE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9307 /* v_cmps_ge_f32 */, AMDGPU::V_CMPS_GE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9307 /* v_cmps_ge_f32 */, AMDGPU::V_CMPS_GE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9321 /* v_cmps_ge_f32_e32 */, AMDGPU::V_CMPS_GE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9321 /* v_cmps_ge_f32_e32 */, AMDGPU::V_CMPS_GE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9339 /* v_cmps_ge_f64 */, AMDGPU::V_CMPS_GE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9339 /* v_cmps_ge_f64 */, AMDGPU::V_CMPS_GE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9339 /* v_cmps_ge_f64 */, AMDGPU::V_CMPS_GE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9339 /* v_cmps_ge_f64 */, AMDGPU::V_CMPS_GE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9353 /* v_cmps_ge_f64_e32 */, AMDGPU::V_CMPS_GE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9353 /* v_cmps_ge_f64_e32 */, AMDGPU::V_CMPS_GE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9371 /* v_cmps_gt_f32 */, AMDGPU::V_CMPS_GT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9371 /* v_cmps_gt_f32 */, AMDGPU::V_CMPS_GT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9371 /* v_cmps_gt_f32 */, AMDGPU::V_CMPS_GT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9371 /* v_cmps_gt_f32 */, AMDGPU::V_CMPS_GT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9385 /* v_cmps_gt_f32_e32 */, AMDGPU::V_CMPS_GT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9385 /* v_cmps_gt_f32_e32 */, AMDGPU::V_CMPS_GT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9403 /* v_cmps_gt_f64 */, AMDGPU::V_CMPS_GT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9403 /* v_cmps_gt_f64 */, AMDGPU::V_CMPS_GT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9403 /* v_cmps_gt_f64 */, AMDGPU::V_CMPS_GT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9403 /* v_cmps_gt_f64 */, AMDGPU::V_CMPS_GT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9417 /* v_cmps_gt_f64_e32 */, AMDGPU::V_CMPS_GT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9417 /* v_cmps_gt_f64_e32 */, AMDGPU::V_CMPS_GT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9435 /* v_cmps_le_f32 */, AMDGPU::V_CMPS_LE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9435 /* v_cmps_le_f32 */, AMDGPU::V_CMPS_LE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9435 /* v_cmps_le_f32 */, AMDGPU::V_CMPS_LE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9435 /* v_cmps_le_f32 */, AMDGPU::V_CMPS_LE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9449 /* v_cmps_le_f32_e32 */, AMDGPU::V_CMPS_LE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9449 /* v_cmps_le_f32_e32 */, AMDGPU::V_CMPS_LE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9467 /* v_cmps_le_f64 */, AMDGPU::V_CMPS_LE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9467 /* v_cmps_le_f64 */, AMDGPU::V_CMPS_LE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9467 /* v_cmps_le_f64 */, AMDGPU::V_CMPS_LE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9467 /* v_cmps_le_f64 */, AMDGPU::V_CMPS_LE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9481 /* v_cmps_le_f64_e32 */, AMDGPU::V_CMPS_LE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9481 /* v_cmps_le_f64_e32 */, AMDGPU::V_CMPS_LE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9499 /* v_cmps_lg_f32 */, AMDGPU::V_CMPS_LG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9499 /* v_cmps_lg_f32 */, AMDGPU::V_CMPS_LG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9499 /* v_cmps_lg_f32 */, AMDGPU::V_CMPS_LG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9499 /* v_cmps_lg_f32 */, AMDGPU::V_CMPS_LG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9513 /* v_cmps_lg_f32_e32 */, AMDGPU::V_CMPS_LG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9513 /* v_cmps_lg_f32_e32 */, AMDGPU::V_CMPS_LG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9531 /* v_cmps_lg_f64 */, AMDGPU::V_CMPS_LG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9531 /* v_cmps_lg_f64 */, AMDGPU::V_CMPS_LG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9531 /* v_cmps_lg_f64 */, AMDGPU::V_CMPS_LG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9531 /* v_cmps_lg_f64 */, AMDGPU::V_CMPS_LG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9545 /* v_cmps_lg_f64_e32 */, AMDGPU::V_CMPS_LG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9545 /* v_cmps_lg_f64_e32 */, AMDGPU::V_CMPS_LG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9563 /* v_cmps_lt_f32 */, AMDGPU::V_CMPS_LT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9563 /* v_cmps_lt_f32 */, AMDGPU::V_CMPS_LT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9563 /* v_cmps_lt_f32 */, AMDGPU::V_CMPS_LT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9563 /* v_cmps_lt_f32 */, AMDGPU::V_CMPS_LT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9577 /* v_cmps_lt_f32_e32 */, AMDGPU::V_CMPS_LT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9577 /* v_cmps_lt_f32_e32 */, AMDGPU::V_CMPS_LT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9595 /* v_cmps_lt_f64 */, AMDGPU::V_CMPS_LT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9595 /* v_cmps_lt_f64 */, AMDGPU::V_CMPS_LT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9595 /* v_cmps_lt_f64 */, AMDGPU::V_CMPS_LT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9595 /* v_cmps_lt_f64 */, AMDGPU::V_CMPS_LT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9609 /* v_cmps_lt_f64_e32 */, AMDGPU::V_CMPS_LT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9609 /* v_cmps_lt_f64_e32 */, AMDGPU::V_CMPS_LT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9627 /* v_cmps_neq_f32 */, AMDGPU::V_CMPS_NEQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9627 /* v_cmps_neq_f32 */, AMDGPU::V_CMPS_NEQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9627 /* v_cmps_neq_f32 */, AMDGPU::V_CMPS_NEQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9627 /* v_cmps_neq_f32 */, AMDGPU::V_CMPS_NEQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9642 /* v_cmps_neq_f32_e32 */, AMDGPU::V_CMPS_NEQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9642 /* v_cmps_neq_f32_e32 */, AMDGPU::V_CMPS_NEQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9661 /* v_cmps_neq_f64 */, AMDGPU::V_CMPS_NEQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9661 /* v_cmps_neq_f64 */, AMDGPU::V_CMPS_NEQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9661 /* v_cmps_neq_f64 */, AMDGPU::V_CMPS_NEQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9661 /* v_cmps_neq_f64 */, AMDGPU::V_CMPS_NEQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9676 /* v_cmps_neq_f64_e32 */, AMDGPU::V_CMPS_NEQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9676 /* v_cmps_neq_f64_e32 */, AMDGPU::V_CMPS_NEQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9695 /* v_cmps_nge_f32 */, AMDGPU::V_CMPS_NGE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9695 /* v_cmps_nge_f32 */, AMDGPU::V_CMPS_NGE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9695 /* v_cmps_nge_f32 */, AMDGPU::V_CMPS_NGE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9695 /* v_cmps_nge_f32 */, AMDGPU::V_CMPS_NGE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9710 /* v_cmps_nge_f32_e32 */, AMDGPU::V_CMPS_NGE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9710 /* v_cmps_nge_f32_e32 */, AMDGPU::V_CMPS_NGE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9729 /* v_cmps_nge_f64 */, AMDGPU::V_CMPS_NGE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9729 /* v_cmps_nge_f64 */, AMDGPU::V_CMPS_NGE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9729 /* v_cmps_nge_f64 */, AMDGPU::V_CMPS_NGE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9729 /* v_cmps_nge_f64 */, AMDGPU::V_CMPS_NGE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9744 /* v_cmps_nge_f64_e32 */, AMDGPU::V_CMPS_NGE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9744 /* v_cmps_nge_f64_e32 */, AMDGPU::V_CMPS_NGE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9763 /* v_cmps_ngt_f32 */, AMDGPU::V_CMPS_NGT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9763 /* v_cmps_ngt_f32 */, AMDGPU::V_CMPS_NGT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9763 /* v_cmps_ngt_f32 */, AMDGPU::V_CMPS_NGT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9763 /* v_cmps_ngt_f32 */, AMDGPU::V_CMPS_NGT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9778 /* v_cmps_ngt_f32_e32 */, AMDGPU::V_CMPS_NGT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9778 /* v_cmps_ngt_f32_e32 */, AMDGPU::V_CMPS_NGT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9797 /* v_cmps_ngt_f64 */, AMDGPU::V_CMPS_NGT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9797 /* v_cmps_ngt_f64 */, AMDGPU::V_CMPS_NGT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9797 /* v_cmps_ngt_f64 */, AMDGPU::V_CMPS_NGT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9797 /* v_cmps_ngt_f64 */, AMDGPU::V_CMPS_NGT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9812 /* v_cmps_ngt_f64_e32 */, AMDGPU::V_CMPS_NGT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9812 /* v_cmps_ngt_f64_e32 */, AMDGPU::V_CMPS_NGT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9831 /* v_cmps_nle_f32 */, AMDGPU::V_CMPS_NLE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9831 /* v_cmps_nle_f32 */, AMDGPU::V_CMPS_NLE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9831 /* v_cmps_nle_f32 */, AMDGPU::V_CMPS_NLE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9831 /* v_cmps_nle_f32 */, AMDGPU::V_CMPS_NLE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9846 /* v_cmps_nle_f32_e32 */, AMDGPU::V_CMPS_NLE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9846 /* v_cmps_nle_f32_e32 */, AMDGPU::V_CMPS_NLE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9865 /* v_cmps_nle_f64 */, AMDGPU::V_CMPS_NLE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9865 /* v_cmps_nle_f64 */, AMDGPU::V_CMPS_NLE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9865 /* v_cmps_nle_f64 */, AMDGPU::V_CMPS_NLE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9865 /* v_cmps_nle_f64 */, AMDGPU::V_CMPS_NLE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9880 /* v_cmps_nle_f64_e32 */, AMDGPU::V_CMPS_NLE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9880 /* v_cmps_nle_f64_e32 */, AMDGPU::V_CMPS_NLE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9899 /* v_cmps_nlg_f32 */, AMDGPU::V_CMPS_NLG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9899 /* v_cmps_nlg_f32 */, AMDGPU::V_CMPS_NLG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9899 /* v_cmps_nlg_f32 */, AMDGPU::V_CMPS_NLG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9899 /* v_cmps_nlg_f32 */, AMDGPU::V_CMPS_NLG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9914 /* v_cmps_nlg_f32_e32 */, AMDGPU::V_CMPS_NLG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9914 /* v_cmps_nlg_f32_e32 */, AMDGPU::V_CMPS_NLG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9933 /* v_cmps_nlg_f64 */, AMDGPU::V_CMPS_NLG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9933 /* v_cmps_nlg_f64 */, AMDGPU::V_CMPS_NLG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9933 /* v_cmps_nlg_f64 */, AMDGPU::V_CMPS_NLG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9933 /* v_cmps_nlg_f64 */, AMDGPU::V_CMPS_NLG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9948 /* v_cmps_nlg_f64_e32 */, AMDGPU::V_CMPS_NLG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9948 /* v_cmps_nlg_f64_e32 */, AMDGPU::V_CMPS_NLG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9967 /* v_cmps_nlt_f32 */, AMDGPU::V_CMPS_NLT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9967 /* v_cmps_nlt_f32 */, AMDGPU::V_CMPS_NLT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9967 /* v_cmps_nlt_f32 */, AMDGPU::V_CMPS_NLT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9967 /* v_cmps_nlt_f32 */, AMDGPU::V_CMPS_NLT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9982 /* v_cmps_nlt_f32_e32 */, AMDGPU::V_CMPS_NLT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9982 /* v_cmps_nlt_f32_e32 */, AMDGPU::V_CMPS_NLT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10001 /* v_cmps_nlt_f64 */, AMDGPU::V_CMPS_NLT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10001 /* v_cmps_nlt_f64 */, AMDGPU::V_CMPS_NLT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10001 /* v_cmps_nlt_f64 */, AMDGPU::V_CMPS_NLT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10001 /* v_cmps_nlt_f64 */, AMDGPU::V_CMPS_NLT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10016 /* v_cmps_nlt_f64_e32 */, AMDGPU::V_CMPS_NLT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10016 /* v_cmps_nlt_f64_e32 */, AMDGPU::V_CMPS_NLT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10035 /* v_cmps_o_f32 */, AMDGPU::V_CMPS_O_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10035 /* v_cmps_o_f32 */, AMDGPU::V_CMPS_O_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10035 /* v_cmps_o_f32 */, AMDGPU::V_CMPS_O_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10035 /* v_cmps_o_f32 */, AMDGPU::V_CMPS_O_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10048 /* v_cmps_o_f32_e32 */, AMDGPU::V_CMPS_O_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10048 /* v_cmps_o_f32_e32 */, AMDGPU::V_CMPS_O_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10065 /* v_cmps_o_f64 */, AMDGPU::V_CMPS_O_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10065 /* v_cmps_o_f64 */, AMDGPU::V_CMPS_O_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10065 /* v_cmps_o_f64 */, AMDGPU::V_CMPS_O_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10065 /* v_cmps_o_f64 */, AMDGPU::V_CMPS_O_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10078 /* v_cmps_o_f64_e32 */, AMDGPU::V_CMPS_O_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10078 /* v_cmps_o_f64_e32 */, AMDGPU::V_CMPS_O_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10095 /* v_cmps_tru_f32 */, AMDGPU::V_CMPS_TRU_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10095 /* v_cmps_tru_f32 */, AMDGPU::V_CMPS_TRU_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10095 /* v_cmps_tru_f32 */, AMDGPU::V_CMPS_TRU_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10095 /* v_cmps_tru_f32 */, AMDGPU::V_CMPS_TRU_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10110 /* v_cmps_tru_f32_e32 */, AMDGPU::V_CMPS_TRU_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10110 /* v_cmps_tru_f32_e32 */, AMDGPU::V_CMPS_TRU_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10129 /* v_cmps_tru_f64 */, AMDGPU::V_CMPS_TRU_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10129 /* v_cmps_tru_f64 */, AMDGPU::V_CMPS_TRU_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10129 /* v_cmps_tru_f64 */, AMDGPU::V_CMPS_TRU_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10129 /* v_cmps_tru_f64 */, AMDGPU::V_CMPS_TRU_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10144 /* v_cmps_tru_f64_e32 */, AMDGPU::V_CMPS_TRU_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10144 /* v_cmps_tru_f64_e32 */, AMDGPU::V_CMPS_TRU_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10163 /* v_cmps_u_f32 */, AMDGPU::V_CMPS_U_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10163 /* v_cmps_u_f32 */, AMDGPU::V_CMPS_U_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10163 /* v_cmps_u_f32 */, AMDGPU::V_CMPS_U_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10163 /* v_cmps_u_f32 */, AMDGPU::V_CMPS_U_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10176 /* v_cmps_u_f32_e32 */, AMDGPU::V_CMPS_U_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10176 /* v_cmps_u_f32_e32 */, AMDGPU::V_CMPS_U_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10193 /* v_cmps_u_f64 */, AMDGPU::V_CMPS_U_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10193 /* v_cmps_u_f64 */, AMDGPU::V_CMPS_U_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10193 /* v_cmps_u_f64 */, AMDGPU::V_CMPS_U_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10193 /* v_cmps_u_f64 */, AMDGPU::V_CMPS_U_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10206 /* v_cmps_u_f64_e32 */, AMDGPU::V_CMPS_U_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10206 /* v_cmps_u_f64_e32 */, AMDGPU::V_CMPS_U_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10223 /* v_cmpsx_eq_f32 */, AMDGPU::V_CMPSX_EQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10223 /* v_cmpsx_eq_f32 */, AMDGPU::V_CMPSX_EQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10223 /* v_cmpsx_eq_f32 */, AMDGPU::V_CMPSX_EQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10223 /* v_cmpsx_eq_f32 */, AMDGPU::V_CMPSX_EQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10238 /* v_cmpsx_eq_f32_e32 */, AMDGPU::V_CMPSX_EQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10238 /* v_cmpsx_eq_f32_e32 */, AMDGPU::V_CMPSX_EQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10257 /* v_cmpsx_eq_f64 */, AMDGPU::V_CMPSX_EQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10257 /* v_cmpsx_eq_f64 */, AMDGPU::V_CMPSX_EQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10257 /* v_cmpsx_eq_f64 */, AMDGPU::V_CMPSX_EQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10257 /* v_cmpsx_eq_f64 */, AMDGPU::V_CMPSX_EQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10272 /* v_cmpsx_eq_f64_e32 */, AMDGPU::V_CMPSX_EQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10272 /* v_cmpsx_eq_f64_e32 */, AMDGPU::V_CMPSX_EQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10291 /* v_cmpsx_f_f32 */, AMDGPU::V_CMPSX_F_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10291 /* v_cmpsx_f_f32 */, AMDGPU::V_CMPSX_F_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10291 /* v_cmpsx_f_f32 */, AMDGPU::V_CMPSX_F_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10291 /* v_cmpsx_f_f32 */, AMDGPU::V_CMPSX_F_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10305 /* v_cmpsx_f_f32_e32 */, AMDGPU::V_CMPSX_F_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10305 /* v_cmpsx_f_f32_e32 */, AMDGPU::V_CMPSX_F_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10323 /* v_cmpsx_f_f64 */, AMDGPU::V_CMPSX_F_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10323 /* v_cmpsx_f_f64 */, AMDGPU::V_CMPSX_F_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10323 /* v_cmpsx_f_f64 */, AMDGPU::V_CMPSX_F_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10323 /* v_cmpsx_f_f64 */, AMDGPU::V_CMPSX_F_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10337 /* v_cmpsx_f_f64_e32 */, AMDGPU::V_CMPSX_F_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10337 /* v_cmpsx_f_f64_e32 */, AMDGPU::V_CMPSX_F_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10355 /* v_cmpsx_ge_f32 */, AMDGPU::V_CMPSX_GE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10355 /* v_cmpsx_ge_f32 */, AMDGPU::V_CMPSX_GE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10355 /* v_cmpsx_ge_f32 */, AMDGPU::V_CMPSX_GE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10355 /* v_cmpsx_ge_f32 */, AMDGPU::V_CMPSX_GE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10370 /* v_cmpsx_ge_f32_e32 */, AMDGPU::V_CMPSX_GE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10370 /* v_cmpsx_ge_f32_e32 */, AMDGPU::V_CMPSX_GE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10389 /* v_cmpsx_ge_f64 */, AMDGPU::V_CMPSX_GE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10389 /* v_cmpsx_ge_f64 */, AMDGPU::V_CMPSX_GE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10389 /* v_cmpsx_ge_f64 */, AMDGPU::V_CMPSX_GE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10389 /* v_cmpsx_ge_f64 */, AMDGPU::V_CMPSX_GE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10404 /* v_cmpsx_ge_f64_e32 */, AMDGPU::V_CMPSX_GE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10404 /* v_cmpsx_ge_f64_e32 */, AMDGPU::V_CMPSX_GE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10423 /* v_cmpsx_gt_f32 */, AMDGPU::V_CMPSX_GT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10423 /* v_cmpsx_gt_f32 */, AMDGPU::V_CMPSX_GT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10423 /* v_cmpsx_gt_f32 */, AMDGPU::V_CMPSX_GT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10423 /* v_cmpsx_gt_f32 */, AMDGPU::V_CMPSX_GT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10438 /* v_cmpsx_gt_f32_e32 */, AMDGPU::V_CMPSX_GT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10438 /* v_cmpsx_gt_f32_e32 */, AMDGPU::V_CMPSX_GT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10457 /* v_cmpsx_gt_f64 */, AMDGPU::V_CMPSX_GT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10457 /* v_cmpsx_gt_f64 */, AMDGPU::V_CMPSX_GT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10457 /* v_cmpsx_gt_f64 */, AMDGPU::V_CMPSX_GT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10457 /* v_cmpsx_gt_f64 */, AMDGPU::V_CMPSX_GT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10472 /* v_cmpsx_gt_f64_e32 */, AMDGPU::V_CMPSX_GT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10472 /* v_cmpsx_gt_f64_e32 */, AMDGPU::V_CMPSX_GT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10491 /* v_cmpsx_le_f32 */, AMDGPU::V_CMPSX_LE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10491 /* v_cmpsx_le_f32 */, AMDGPU::V_CMPSX_LE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10491 /* v_cmpsx_le_f32 */, AMDGPU::V_CMPSX_LE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10491 /* v_cmpsx_le_f32 */, AMDGPU::V_CMPSX_LE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10506 /* v_cmpsx_le_f32_e32 */, AMDGPU::V_CMPSX_LE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10506 /* v_cmpsx_le_f32_e32 */, AMDGPU::V_CMPSX_LE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10525 /* v_cmpsx_le_f64 */, AMDGPU::V_CMPSX_LE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10525 /* v_cmpsx_le_f64 */, AMDGPU::V_CMPSX_LE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10525 /* v_cmpsx_le_f64 */, AMDGPU::V_CMPSX_LE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10525 /* v_cmpsx_le_f64 */, AMDGPU::V_CMPSX_LE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10540 /* v_cmpsx_le_f64_e32 */, AMDGPU::V_CMPSX_LE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10540 /* v_cmpsx_le_f64_e32 */, AMDGPU::V_CMPSX_LE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10559 /* v_cmpsx_lg_f32 */, AMDGPU::V_CMPSX_LG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10559 /* v_cmpsx_lg_f32 */, AMDGPU::V_CMPSX_LG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10559 /* v_cmpsx_lg_f32 */, AMDGPU::V_CMPSX_LG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10559 /* v_cmpsx_lg_f32 */, AMDGPU::V_CMPSX_LG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10574 /* v_cmpsx_lg_f32_e32 */, AMDGPU::V_CMPSX_LG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10574 /* v_cmpsx_lg_f32_e32 */, AMDGPU::V_CMPSX_LG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10593 /* v_cmpsx_lg_f64 */, AMDGPU::V_CMPSX_LG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10593 /* v_cmpsx_lg_f64 */, AMDGPU::V_CMPSX_LG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10593 /* v_cmpsx_lg_f64 */, AMDGPU::V_CMPSX_LG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10593 /* v_cmpsx_lg_f64 */, AMDGPU::V_CMPSX_LG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10608 /* v_cmpsx_lg_f64_e32 */, AMDGPU::V_CMPSX_LG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10608 /* v_cmpsx_lg_f64_e32 */, AMDGPU::V_CMPSX_LG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10627 /* v_cmpsx_lt_f32 */, AMDGPU::V_CMPSX_LT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10627 /* v_cmpsx_lt_f32 */, AMDGPU::V_CMPSX_LT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10627 /* v_cmpsx_lt_f32 */, AMDGPU::V_CMPSX_LT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10627 /* v_cmpsx_lt_f32 */, AMDGPU::V_CMPSX_LT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10642 /* v_cmpsx_lt_f32_e32 */, AMDGPU::V_CMPSX_LT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10642 /* v_cmpsx_lt_f32_e32 */, AMDGPU::V_CMPSX_LT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10661 /* v_cmpsx_lt_f64 */, AMDGPU::V_CMPSX_LT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10661 /* v_cmpsx_lt_f64 */, AMDGPU::V_CMPSX_LT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10661 /* v_cmpsx_lt_f64 */, AMDGPU::V_CMPSX_LT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10661 /* v_cmpsx_lt_f64 */, AMDGPU::V_CMPSX_LT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10676 /* v_cmpsx_lt_f64_e32 */, AMDGPU::V_CMPSX_LT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10676 /* v_cmpsx_lt_f64_e32 */, AMDGPU::V_CMPSX_LT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10695 /* v_cmpsx_neq_f32 */, AMDGPU::V_CMPSX_NEQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10695 /* v_cmpsx_neq_f32 */, AMDGPU::V_CMPSX_NEQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10695 /* v_cmpsx_neq_f32 */, AMDGPU::V_CMPSX_NEQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10695 /* v_cmpsx_neq_f32 */, AMDGPU::V_CMPSX_NEQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10711 /* v_cmpsx_neq_f32_e32 */, AMDGPU::V_CMPSX_NEQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10711 /* v_cmpsx_neq_f32_e32 */, AMDGPU::V_CMPSX_NEQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10731 /* v_cmpsx_neq_f64 */, AMDGPU::V_CMPSX_NEQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10731 /* v_cmpsx_neq_f64 */, AMDGPU::V_CMPSX_NEQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10731 /* v_cmpsx_neq_f64 */, AMDGPU::V_CMPSX_NEQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10731 /* v_cmpsx_neq_f64 */, AMDGPU::V_CMPSX_NEQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10747 /* v_cmpsx_neq_f64_e32 */, AMDGPU::V_CMPSX_NEQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10747 /* v_cmpsx_neq_f64_e32 */, AMDGPU::V_CMPSX_NEQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10767 /* v_cmpsx_nge_f32 */, AMDGPU::V_CMPSX_NGE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10767 /* v_cmpsx_nge_f32 */, AMDGPU::V_CMPSX_NGE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10767 /* v_cmpsx_nge_f32 */, AMDGPU::V_CMPSX_NGE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10767 /* v_cmpsx_nge_f32 */, AMDGPU::V_CMPSX_NGE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10783 /* v_cmpsx_nge_f32_e32 */, AMDGPU::V_CMPSX_NGE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10783 /* v_cmpsx_nge_f32_e32 */, AMDGPU::V_CMPSX_NGE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10803 /* v_cmpsx_nge_f64 */, AMDGPU::V_CMPSX_NGE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10803 /* v_cmpsx_nge_f64 */, AMDGPU::V_CMPSX_NGE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10803 /* v_cmpsx_nge_f64 */, AMDGPU::V_CMPSX_NGE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10803 /* v_cmpsx_nge_f64 */, AMDGPU::V_CMPSX_NGE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10819 /* v_cmpsx_nge_f64_e32 */, AMDGPU::V_CMPSX_NGE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10819 /* v_cmpsx_nge_f64_e32 */, AMDGPU::V_CMPSX_NGE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10839 /* v_cmpsx_ngt_f32 */, AMDGPU::V_CMPSX_NGT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10839 /* v_cmpsx_ngt_f32 */, AMDGPU::V_CMPSX_NGT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10839 /* v_cmpsx_ngt_f32 */, AMDGPU::V_CMPSX_NGT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10839 /* v_cmpsx_ngt_f32 */, AMDGPU::V_CMPSX_NGT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10855 /* v_cmpsx_ngt_f32_e32 */, AMDGPU::V_CMPSX_NGT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10855 /* v_cmpsx_ngt_f32_e32 */, AMDGPU::V_CMPSX_NGT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10875 /* v_cmpsx_ngt_f64 */, AMDGPU::V_CMPSX_NGT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10875 /* v_cmpsx_ngt_f64 */, AMDGPU::V_CMPSX_NGT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10875 /* v_cmpsx_ngt_f64 */, AMDGPU::V_CMPSX_NGT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10875 /* v_cmpsx_ngt_f64 */, AMDGPU::V_CMPSX_NGT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10891 /* v_cmpsx_ngt_f64_e32 */, AMDGPU::V_CMPSX_NGT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10891 /* v_cmpsx_ngt_f64_e32 */, AMDGPU::V_CMPSX_NGT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10911 /* v_cmpsx_nle_f32 */, AMDGPU::V_CMPSX_NLE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10911 /* v_cmpsx_nle_f32 */, AMDGPU::V_CMPSX_NLE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10911 /* v_cmpsx_nle_f32 */, AMDGPU::V_CMPSX_NLE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10911 /* v_cmpsx_nle_f32 */, AMDGPU::V_CMPSX_NLE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10927 /* v_cmpsx_nle_f32_e32 */, AMDGPU::V_CMPSX_NLE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10927 /* v_cmpsx_nle_f32_e32 */, AMDGPU::V_CMPSX_NLE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10947 /* v_cmpsx_nle_f64 */, AMDGPU::V_CMPSX_NLE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10947 /* v_cmpsx_nle_f64 */, AMDGPU::V_CMPSX_NLE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10947 /* v_cmpsx_nle_f64 */, AMDGPU::V_CMPSX_NLE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10947 /* v_cmpsx_nle_f64 */, AMDGPU::V_CMPSX_NLE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10963 /* v_cmpsx_nle_f64_e32 */, AMDGPU::V_CMPSX_NLE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10963 /* v_cmpsx_nle_f64_e32 */, AMDGPU::V_CMPSX_NLE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10983 /* v_cmpsx_nlg_f32 */, AMDGPU::V_CMPSX_NLG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10983 /* v_cmpsx_nlg_f32 */, AMDGPU::V_CMPSX_NLG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10983 /* v_cmpsx_nlg_f32 */, AMDGPU::V_CMPSX_NLG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10983 /* v_cmpsx_nlg_f32 */, AMDGPU::V_CMPSX_NLG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10999 /* v_cmpsx_nlg_f32_e32 */, AMDGPU::V_CMPSX_NLG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10999 /* v_cmpsx_nlg_f32_e32 */, AMDGPU::V_CMPSX_NLG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11019 /* v_cmpsx_nlg_f64 */, AMDGPU::V_CMPSX_NLG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11019 /* v_cmpsx_nlg_f64 */, AMDGPU::V_CMPSX_NLG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11019 /* v_cmpsx_nlg_f64 */, AMDGPU::V_CMPSX_NLG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11019 /* v_cmpsx_nlg_f64 */, AMDGPU::V_CMPSX_NLG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11035 /* v_cmpsx_nlg_f64_e32 */, AMDGPU::V_CMPSX_NLG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11035 /* v_cmpsx_nlg_f64_e32 */, AMDGPU::V_CMPSX_NLG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11055 /* v_cmpsx_nlt_f32 */, AMDGPU::V_CMPSX_NLT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11055 /* v_cmpsx_nlt_f32 */, AMDGPU::V_CMPSX_NLT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11055 /* v_cmpsx_nlt_f32 */, AMDGPU::V_CMPSX_NLT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11055 /* v_cmpsx_nlt_f32 */, AMDGPU::V_CMPSX_NLT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11071 /* v_cmpsx_nlt_f32_e32 */, AMDGPU::V_CMPSX_NLT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11071 /* v_cmpsx_nlt_f32_e32 */, AMDGPU::V_CMPSX_NLT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11091 /* v_cmpsx_nlt_f64 */, AMDGPU::V_CMPSX_NLT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11091 /* v_cmpsx_nlt_f64 */, AMDGPU::V_CMPSX_NLT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11091 /* v_cmpsx_nlt_f64 */, AMDGPU::V_CMPSX_NLT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11091 /* v_cmpsx_nlt_f64 */, AMDGPU::V_CMPSX_NLT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11107 /* v_cmpsx_nlt_f64_e32 */, AMDGPU::V_CMPSX_NLT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11107 /* v_cmpsx_nlt_f64_e32 */, AMDGPU::V_CMPSX_NLT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11127 /* v_cmpsx_o_f32 */, AMDGPU::V_CMPSX_O_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11127 /* v_cmpsx_o_f32 */, AMDGPU::V_CMPSX_O_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11127 /* v_cmpsx_o_f32 */, AMDGPU::V_CMPSX_O_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11127 /* v_cmpsx_o_f32 */, AMDGPU::V_CMPSX_O_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11141 /* v_cmpsx_o_f32_e32 */, AMDGPU::V_CMPSX_O_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11141 /* v_cmpsx_o_f32_e32 */, AMDGPU::V_CMPSX_O_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11159 /* v_cmpsx_o_f64 */, AMDGPU::V_CMPSX_O_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11159 /* v_cmpsx_o_f64 */, AMDGPU::V_CMPSX_O_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11159 /* v_cmpsx_o_f64 */, AMDGPU::V_CMPSX_O_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11159 /* v_cmpsx_o_f64 */, AMDGPU::V_CMPSX_O_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11173 /* v_cmpsx_o_f64_e32 */, AMDGPU::V_CMPSX_O_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11173 /* v_cmpsx_o_f64_e32 */, AMDGPU::V_CMPSX_O_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11191 /* v_cmpsx_tru_f32 */, AMDGPU::V_CMPSX_TRU_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11191 /* v_cmpsx_tru_f32 */, AMDGPU::V_CMPSX_TRU_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11191 /* v_cmpsx_tru_f32 */, AMDGPU::V_CMPSX_TRU_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11191 /* v_cmpsx_tru_f32 */, AMDGPU::V_CMPSX_TRU_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11207 /* v_cmpsx_tru_f32_e32 */, AMDGPU::V_CMPSX_TRU_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11207 /* v_cmpsx_tru_f32_e32 */, AMDGPU::V_CMPSX_TRU_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11227 /* v_cmpsx_tru_f64 */, AMDGPU::V_CMPSX_TRU_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11227 /* v_cmpsx_tru_f64 */, AMDGPU::V_CMPSX_TRU_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11227 /* v_cmpsx_tru_f64 */, AMDGPU::V_CMPSX_TRU_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11227 /* v_cmpsx_tru_f64 */, AMDGPU::V_CMPSX_TRU_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11243 /* v_cmpsx_tru_f64_e32 */, AMDGPU::V_CMPSX_TRU_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11243 /* v_cmpsx_tru_f64_e32 */, AMDGPU::V_CMPSX_TRU_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11263 /* v_cmpsx_u_f32 */, AMDGPU::V_CMPSX_U_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11263 /* v_cmpsx_u_f32 */, AMDGPU::V_CMPSX_U_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11263 /* v_cmpsx_u_f32 */, AMDGPU::V_CMPSX_U_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11263 /* v_cmpsx_u_f32 */, AMDGPU::V_CMPSX_U_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11277 /* v_cmpsx_u_f32_e32 */, AMDGPU::V_CMPSX_U_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11277 /* v_cmpsx_u_f32_e32 */, AMDGPU::V_CMPSX_U_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11295 /* v_cmpsx_u_f64 */, AMDGPU::V_CMPSX_U_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11295 /* v_cmpsx_u_f64 */, AMDGPU::V_CMPSX_U_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11295 /* v_cmpsx_u_f64 */, AMDGPU::V_CMPSX_U_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11295 /* v_cmpsx_u_f64 */, AMDGPU::V_CMPSX_U_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11309 /* v_cmpsx_u_f64_e32 */, AMDGPU::V_CMPSX_U_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11309 /* v_cmpsx_u_f64_e32 */, AMDGPU::V_CMPSX_U_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isSICI|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11327 /* v_cmpx_class_f32 */, AMDGPU::V_CMPX_CLASS_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11327 /* v_cmpx_class_f32 */, AMDGPU::V_CMPX_CLASS_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11327 /* v_cmpx_class_f32 */, AMDGPU::V_CMPX_CLASS_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 11327 /* v_cmpx_class_f32 */, AMDGPU::V_CMPX_CLASS_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 11344 /* v_cmpx_class_f32_e32 */, AMDGPU::V_CMPX_CLASS_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11344 /* v_cmpx_class_f32_e32 */, AMDGPU::V_CMPX_CLASS_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11365 /* v_cmpx_class_f64 */, AMDGPU::V_CMPX_CLASS_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 11365 /* v_cmpx_class_f64 */, AMDGPU::V_CMPX_CLASS_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 11365 /* v_cmpx_class_f64 */, AMDGPU::V_CMPX_CLASS_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 11365 /* v_cmpx_class_f64 */, AMDGPU::V_CMPX_CLASS_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 11382 /* v_cmpx_class_f64_e32 */, AMDGPU::V_CMPX_CLASS_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 11382 /* v_cmpx_class_f64_e32 */, AMDGPU::V_CMPX_CLASS_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 11403 /* v_cmpx_eq_f32 */, AMDGPU::V_CMPX_EQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11403 /* v_cmpx_eq_f32 */, AMDGPU::V_CMPX_EQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11403 /* v_cmpx_eq_f32 */, AMDGPU::V_CMPX_EQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11403 /* v_cmpx_eq_f32 */, AMDGPU::V_CMPX_EQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11417 /* v_cmpx_eq_f32_e32 */, AMDGPU::V_CMPX_EQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11417 /* v_cmpx_eq_f32_e32 */, AMDGPU::V_CMPX_EQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11435 /* v_cmpx_eq_f64 */, AMDGPU::V_CMPX_EQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11435 /* v_cmpx_eq_f64 */, AMDGPU::V_CMPX_EQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11435 /* v_cmpx_eq_f64 */, AMDGPU::V_CMPX_EQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11435 /* v_cmpx_eq_f64 */, AMDGPU::V_CMPX_EQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11449 /* v_cmpx_eq_f64_e32 */, AMDGPU::V_CMPX_EQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11449 /* v_cmpx_eq_f64_e32 */, AMDGPU::V_CMPX_EQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11467 /* v_cmpx_eq_i32 */, AMDGPU::V_CMPX_EQ_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11467 /* v_cmpx_eq_i32 */, AMDGPU::V_CMPX_EQ_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11467 /* v_cmpx_eq_i32 */, AMDGPU::V_CMPX_EQ_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11467 /* v_cmpx_eq_i32 */, AMDGPU::V_CMPX_EQ_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11481 /* v_cmpx_eq_i32_e32 */, AMDGPU::V_CMPX_EQ_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11481 /* v_cmpx_eq_i32_e32 */, AMDGPU::V_CMPX_EQ_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11499 /* v_cmpx_eq_i64 */, AMDGPU::V_CMPX_EQ_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11499 /* v_cmpx_eq_i64 */, AMDGPU::V_CMPX_EQ_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11499 /* v_cmpx_eq_i64 */, AMDGPU::V_CMPX_EQ_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11499 /* v_cmpx_eq_i64 */, AMDGPU::V_CMPX_EQ_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11513 /* v_cmpx_eq_i64_e32 */, AMDGPU::V_CMPX_EQ_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11513 /* v_cmpx_eq_i64_e32 */, AMDGPU::V_CMPX_EQ_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11531 /* v_cmpx_eq_u32 */, AMDGPU::V_CMPX_EQ_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11531 /* v_cmpx_eq_u32 */, AMDGPU::V_CMPX_EQ_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11531 /* v_cmpx_eq_u32 */, AMDGPU::V_CMPX_EQ_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11531 /* v_cmpx_eq_u32 */, AMDGPU::V_CMPX_EQ_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11545 /* v_cmpx_eq_u32_e32 */, AMDGPU::V_CMPX_EQ_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11545 /* v_cmpx_eq_u32_e32 */, AMDGPU::V_CMPX_EQ_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11563 /* v_cmpx_eq_u64 */, AMDGPU::V_CMPX_EQ_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11563 /* v_cmpx_eq_u64 */, AMDGPU::V_CMPX_EQ_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11563 /* v_cmpx_eq_u64 */, AMDGPU::V_CMPX_EQ_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11563 /* v_cmpx_eq_u64 */, AMDGPU::V_CMPX_EQ_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11577 /* v_cmpx_eq_u64_e32 */, AMDGPU::V_CMPX_EQ_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11577 /* v_cmpx_eq_u64_e32 */, AMDGPU::V_CMPX_EQ_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11595 /* v_cmpx_f_f32 */, AMDGPU::V_CMPX_F_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11595 /* v_cmpx_f_f32 */, AMDGPU::V_CMPX_F_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11595 /* v_cmpx_f_f32 */, AMDGPU::V_CMPX_F_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11595 /* v_cmpx_f_f32 */, AMDGPU::V_CMPX_F_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11608 /* v_cmpx_f_f32_e32 */, AMDGPU::V_CMPX_F_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11608 /* v_cmpx_f_f32_e32 */, AMDGPU::V_CMPX_F_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11625 /* v_cmpx_f_f64 */, AMDGPU::V_CMPX_F_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11625 /* v_cmpx_f_f64 */, AMDGPU::V_CMPX_F_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11625 /* v_cmpx_f_f64 */, AMDGPU::V_CMPX_F_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11625 /* v_cmpx_f_f64 */, AMDGPU::V_CMPX_F_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11638 /* v_cmpx_f_f64_e32 */, AMDGPU::V_CMPX_F_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11638 /* v_cmpx_f_f64_e32 */, AMDGPU::V_CMPX_F_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11655 /* v_cmpx_f_i32 */, AMDGPU::V_CMPX_F_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11655 /* v_cmpx_f_i32 */, AMDGPU::V_CMPX_F_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11655 /* v_cmpx_f_i32 */, AMDGPU::V_CMPX_F_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11655 /* v_cmpx_f_i32 */, AMDGPU::V_CMPX_F_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11668 /* v_cmpx_f_i32_e32 */, AMDGPU::V_CMPX_F_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11668 /* v_cmpx_f_i32_e32 */, AMDGPU::V_CMPX_F_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11685 /* v_cmpx_f_i64 */, AMDGPU::V_CMPX_F_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11685 /* v_cmpx_f_i64 */, AMDGPU::V_CMPX_F_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11685 /* v_cmpx_f_i64 */, AMDGPU::V_CMPX_F_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11685 /* v_cmpx_f_i64 */, AMDGPU::V_CMPX_F_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11698 /* v_cmpx_f_i64_e32 */, AMDGPU::V_CMPX_F_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11698 /* v_cmpx_f_i64_e32 */, AMDGPU::V_CMPX_F_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11715 /* v_cmpx_f_u32 */, AMDGPU::V_CMPX_F_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11715 /* v_cmpx_f_u32 */, AMDGPU::V_CMPX_F_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11715 /* v_cmpx_f_u32 */, AMDGPU::V_CMPX_F_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11715 /* v_cmpx_f_u32 */, AMDGPU::V_CMPX_F_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11728 /* v_cmpx_f_u32_e32 */, AMDGPU::V_CMPX_F_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11728 /* v_cmpx_f_u32_e32 */, AMDGPU::V_CMPX_F_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11745 /* v_cmpx_f_u64 */, AMDGPU::V_CMPX_F_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11745 /* v_cmpx_f_u64 */, AMDGPU::V_CMPX_F_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11745 /* v_cmpx_f_u64 */, AMDGPU::V_CMPX_F_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11745 /* v_cmpx_f_u64 */, AMDGPU::V_CMPX_F_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11758 /* v_cmpx_f_u64_e32 */, AMDGPU::V_CMPX_F_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11758 /* v_cmpx_f_u64_e32 */, AMDGPU::V_CMPX_F_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11775 /* v_cmpx_ge_f32 */, AMDGPU::V_CMPX_GE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11775 /* v_cmpx_ge_f32 */, AMDGPU::V_CMPX_GE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11775 /* v_cmpx_ge_f32 */, AMDGPU::V_CMPX_GE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11775 /* v_cmpx_ge_f32 */, AMDGPU::V_CMPX_GE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11789 /* v_cmpx_ge_f32_e32 */, AMDGPU::V_CMPX_GE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11789 /* v_cmpx_ge_f32_e32 */, AMDGPU::V_CMPX_GE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11807 /* v_cmpx_ge_f64 */, AMDGPU::V_CMPX_GE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11807 /* v_cmpx_ge_f64 */, AMDGPU::V_CMPX_GE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11807 /* v_cmpx_ge_f64 */, AMDGPU::V_CMPX_GE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11807 /* v_cmpx_ge_f64 */, AMDGPU::V_CMPX_GE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11821 /* v_cmpx_ge_f64_e32 */, AMDGPU::V_CMPX_GE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11821 /* v_cmpx_ge_f64_e32 */, AMDGPU::V_CMPX_GE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11839 /* v_cmpx_ge_i32 */, AMDGPU::V_CMPX_GE_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11839 /* v_cmpx_ge_i32 */, AMDGPU::V_CMPX_GE_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11839 /* v_cmpx_ge_i32 */, AMDGPU::V_CMPX_GE_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11839 /* v_cmpx_ge_i32 */, AMDGPU::V_CMPX_GE_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11853 /* v_cmpx_ge_i32_e32 */, AMDGPU::V_CMPX_GE_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11853 /* v_cmpx_ge_i32_e32 */, AMDGPU::V_CMPX_GE_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11871 /* v_cmpx_ge_i64 */, AMDGPU::V_CMPX_GE_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11871 /* v_cmpx_ge_i64 */, AMDGPU::V_CMPX_GE_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11871 /* v_cmpx_ge_i64 */, AMDGPU::V_CMPX_GE_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11871 /* v_cmpx_ge_i64 */, AMDGPU::V_CMPX_GE_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11885 /* v_cmpx_ge_i64_e32 */, AMDGPU::V_CMPX_GE_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11885 /* v_cmpx_ge_i64_e32 */, AMDGPU::V_CMPX_GE_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11903 /* v_cmpx_ge_u32 */, AMDGPU::V_CMPX_GE_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11903 /* v_cmpx_ge_u32 */, AMDGPU::V_CMPX_GE_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11903 /* v_cmpx_ge_u32 */, AMDGPU::V_CMPX_GE_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11903 /* v_cmpx_ge_u32 */, AMDGPU::V_CMPX_GE_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11917 /* v_cmpx_ge_u32_e32 */, AMDGPU::V_CMPX_GE_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11917 /* v_cmpx_ge_u32_e32 */, AMDGPU::V_CMPX_GE_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11935 /* v_cmpx_ge_u64 */, AMDGPU::V_CMPX_GE_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11935 /* v_cmpx_ge_u64 */, AMDGPU::V_CMPX_GE_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11935 /* v_cmpx_ge_u64 */, AMDGPU::V_CMPX_GE_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11935 /* v_cmpx_ge_u64 */, AMDGPU::V_CMPX_GE_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11949 /* v_cmpx_ge_u64_e32 */, AMDGPU::V_CMPX_GE_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11949 /* v_cmpx_ge_u64_e32 */, AMDGPU::V_CMPX_GE_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11967 /* v_cmpx_gt_f32 */, AMDGPU::V_CMPX_GT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11967 /* v_cmpx_gt_f32 */, AMDGPU::V_CMPX_GT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11967 /* v_cmpx_gt_f32 */, AMDGPU::V_CMPX_GT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11967 /* v_cmpx_gt_f32 */, AMDGPU::V_CMPX_GT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11981 /* v_cmpx_gt_f32_e32 */, AMDGPU::V_CMPX_GT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11981 /* v_cmpx_gt_f32_e32 */, AMDGPU::V_CMPX_GT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11999 /* v_cmpx_gt_f64 */, AMDGPU::V_CMPX_GT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11999 /* v_cmpx_gt_f64 */, AMDGPU::V_CMPX_GT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11999 /* v_cmpx_gt_f64 */, AMDGPU::V_CMPX_GT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11999 /* v_cmpx_gt_f64 */, AMDGPU::V_CMPX_GT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12013 /* v_cmpx_gt_f64_e32 */, AMDGPU::V_CMPX_GT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12013 /* v_cmpx_gt_f64_e32 */, AMDGPU::V_CMPX_GT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12031 /* v_cmpx_gt_i32 */, AMDGPU::V_CMPX_GT_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12031 /* v_cmpx_gt_i32 */, AMDGPU::V_CMPX_GT_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12031 /* v_cmpx_gt_i32 */, AMDGPU::V_CMPX_GT_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12031 /* v_cmpx_gt_i32 */, AMDGPU::V_CMPX_GT_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12045 /* v_cmpx_gt_i32_e32 */, AMDGPU::V_CMPX_GT_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12045 /* v_cmpx_gt_i32_e32 */, AMDGPU::V_CMPX_GT_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12063 /* v_cmpx_gt_i64 */, AMDGPU::V_CMPX_GT_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12063 /* v_cmpx_gt_i64 */, AMDGPU::V_CMPX_GT_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12063 /* v_cmpx_gt_i64 */, AMDGPU::V_CMPX_GT_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12063 /* v_cmpx_gt_i64 */, AMDGPU::V_CMPX_GT_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12077 /* v_cmpx_gt_i64_e32 */, AMDGPU::V_CMPX_GT_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12077 /* v_cmpx_gt_i64_e32 */, AMDGPU::V_CMPX_GT_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12095 /* v_cmpx_gt_u32 */, AMDGPU::V_CMPX_GT_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12095 /* v_cmpx_gt_u32 */, AMDGPU::V_CMPX_GT_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12095 /* v_cmpx_gt_u32 */, AMDGPU::V_CMPX_GT_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12095 /* v_cmpx_gt_u32 */, AMDGPU::V_CMPX_GT_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12109 /* v_cmpx_gt_u32_e32 */, AMDGPU::V_CMPX_GT_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12109 /* v_cmpx_gt_u32_e32 */, AMDGPU::V_CMPX_GT_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12127 /* v_cmpx_gt_u64 */, AMDGPU::V_CMPX_GT_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12127 /* v_cmpx_gt_u64 */, AMDGPU::V_CMPX_GT_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12127 /* v_cmpx_gt_u64 */, AMDGPU::V_CMPX_GT_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12127 /* v_cmpx_gt_u64 */, AMDGPU::V_CMPX_GT_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12141 /* v_cmpx_gt_u64_e32 */, AMDGPU::V_CMPX_GT_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12141 /* v_cmpx_gt_u64_e32 */, AMDGPU::V_CMPX_GT_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12159 /* v_cmpx_le_f32 */, AMDGPU::V_CMPX_LE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12159 /* v_cmpx_le_f32 */, AMDGPU::V_CMPX_LE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12159 /* v_cmpx_le_f32 */, AMDGPU::V_CMPX_LE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12159 /* v_cmpx_le_f32 */, AMDGPU::V_CMPX_LE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12173 /* v_cmpx_le_f32_e32 */, AMDGPU::V_CMPX_LE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12173 /* v_cmpx_le_f32_e32 */, AMDGPU::V_CMPX_LE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12191 /* v_cmpx_le_f64 */, AMDGPU::V_CMPX_LE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12191 /* v_cmpx_le_f64 */, AMDGPU::V_CMPX_LE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12191 /* v_cmpx_le_f64 */, AMDGPU::V_CMPX_LE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12191 /* v_cmpx_le_f64 */, AMDGPU::V_CMPX_LE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12205 /* v_cmpx_le_f64_e32 */, AMDGPU::V_CMPX_LE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12205 /* v_cmpx_le_f64_e32 */, AMDGPU::V_CMPX_LE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12223 /* v_cmpx_le_i32 */, AMDGPU::V_CMPX_LE_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12223 /* v_cmpx_le_i32 */, AMDGPU::V_CMPX_LE_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12223 /* v_cmpx_le_i32 */, AMDGPU::V_CMPX_LE_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12223 /* v_cmpx_le_i32 */, AMDGPU::V_CMPX_LE_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12237 /* v_cmpx_le_i32_e32 */, AMDGPU::V_CMPX_LE_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12237 /* v_cmpx_le_i32_e32 */, AMDGPU::V_CMPX_LE_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12255 /* v_cmpx_le_i64 */, AMDGPU::V_CMPX_LE_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12255 /* v_cmpx_le_i64 */, AMDGPU::V_CMPX_LE_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12255 /* v_cmpx_le_i64 */, AMDGPU::V_CMPX_LE_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12255 /* v_cmpx_le_i64 */, AMDGPU::V_CMPX_LE_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12269 /* v_cmpx_le_i64_e32 */, AMDGPU::V_CMPX_LE_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12269 /* v_cmpx_le_i64_e32 */, AMDGPU::V_CMPX_LE_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12287 /* v_cmpx_le_u32 */, AMDGPU::V_CMPX_LE_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12287 /* v_cmpx_le_u32 */, AMDGPU::V_CMPX_LE_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12287 /* v_cmpx_le_u32 */, AMDGPU::V_CMPX_LE_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12287 /* v_cmpx_le_u32 */, AMDGPU::V_CMPX_LE_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12301 /* v_cmpx_le_u32_e32 */, AMDGPU::V_CMPX_LE_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12301 /* v_cmpx_le_u32_e32 */, AMDGPU::V_CMPX_LE_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12319 /* v_cmpx_le_u64 */, AMDGPU::V_CMPX_LE_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12319 /* v_cmpx_le_u64 */, AMDGPU::V_CMPX_LE_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12319 /* v_cmpx_le_u64 */, AMDGPU::V_CMPX_LE_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12319 /* v_cmpx_le_u64 */, AMDGPU::V_CMPX_LE_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12333 /* v_cmpx_le_u64_e32 */, AMDGPU::V_CMPX_LE_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12333 /* v_cmpx_le_u64_e32 */, AMDGPU::V_CMPX_LE_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12351 /* v_cmpx_lg_f32 */, AMDGPU::V_CMPX_LG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12351 /* v_cmpx_lg_f32 */, AMDGPU::V_CMPX_LG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12351 /* v_cmpx_lg_f32 */, AMDGPU::V_CMPX_LG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12351 /* v_cmpx_lg_f32 */, AMDGPU::V_CMPX_LG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12365 /* v_cmpx_lg_f32_e32 */, AMDGPU::V_CMPX_LG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12365 /* v_cmpx_lg_f32_e32 */, AMDGPU::V_CMPX_LG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12383 /* v_cmpx_lg_f64 */, AMDGPU::V_CMPX_LG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12383 /* v_cmpx_lg_f64 */, AMDGPU::V_CMPX_LG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12383 /* v_cmpx_lg_f64 */, AMDGPU::V_CMPX_LG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12383 /* v_cmpx_lg_f64 */, AMDGPU::V_CMPX_LG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12397 /* v_cmpx_lg_f64_e32 */, AMDGPU::V_CMPX_LG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12397 /* v_cmpx_lg_f64_e32 */, AMDGPU::V_CMPX_LG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12415 /* v_cmpx_lt_f32 */, AMDGPU::V_CMPX_LT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12415 /* v_cmpx_lt_f32 */, AMDGPU::V_CMPX_LT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12415 /* v_cmpx_lt_f32 */, AMDGPU::V_CMPX_LT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12415 /* v_cmpx_lt_f32 */, AMDGPU::V_CMPX_LT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12429 /* v_cmpx_lt_f32_e32 */, AMDGPU::V_CMPX_LT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12429 /* v_cmpx_lt_f32_e32 */, AMDGPU::V_CMPX_LT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12447 /* v_cmpx_lt_f64 */, AMDGPU::V_CMPX_LT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12447 /* v_cmpx_lt_f64 */, AMDGPU::V_CMPX_LT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12447 /* v_cmpx_lt_f64 */, AMDGPU::V_CMPX_LT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12447 /* v_cmpx_lt_f64 */, AMDGPU::V_CMPX_LT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12461 /* v_cmpx_lt_f64_e32 */, AMDGPU::V_CMPX_LT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12461 /* v_cmpx_lt_f64_e32 */, AMDGPU::V_CMPX_LT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12479 /* v_cmpx_lt_i32 */, AMDGPU::V_CMPX_LT_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12479 /* v_cmpx_lt_i32 */, AMDGPU::V_CMPX_LT_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12479 /* v_cmpx_lt_i32 */, AMDGPU::V_CMPX_LT_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12479 /* v_cmpx_lt_i32 */, AMDGPU::V_CMPX_LT_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12493 /* v_cmpx_lt_i32_e32 */, AMDGPU::V_CMPX_LT_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12493 /* v_cmpx_lt_i32_e32 */, AMDGPU::V_CMPX_LT_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12511 /* v_cmpx_lt_i64 */, AMDGPU::V_CMPX_LT_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12511 /* v_cmpx_lt_i64 */, AMDGPU::V_CMPX_LT_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12511 /* v_cmpx_lt_i64 */, AMDGPU::V_CMPX_LT_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12511 /* v_cmpx_lt_i64 */, AMDGPU::V_CMPX_LT_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12525 /* v_cmpx_lt_i64_e32 */, AMDGPU::V_CMPX_LT_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12525 /* v_cmpx_lt_i64_e32 */, AMDGPU::V_CMPX_LT_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12543 /* v_cmpx_lt_u32 */, AMDGPU::V_CMPX_LT_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12543 /* v_cmpx_lt_u32 */, AMDGPU::V_CMPX_LT_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12543 /* v_cmpx_lt_u32 */, AMDGPU::V_CMPX_LT_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12543 /* v_cmpx_lt_u32 */, AMDGPU::V_CMPX_LT_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12557 /* v_cmpx_lt_u32_e32 */, AMDGPU::V_CMPX_LT_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12557 /* v_cmpx_lt_u32_e32 */, AMDGPU::V_CMPX_LT_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12575 /* v_cmpx_lt_u64 */, AMDGPU::V_CMPX_LT_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12575 /* v_cmpx_lt_u64 */, AMDGPU::V_CMPX_LT_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12575 /* v_cmpx_lt_u64 */, AMDGPU::V_CMPX_LT_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12575 /* v_cmpx_lt_u64 */, AMDGPU::V_CMPX_LT_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12589 /* v_cmpx_lt_u64_e32 */, AMDGPU::V_CMPX_LT_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12589 /* v_cmpx_lt_u64_e32 */, AMDGPU::V_CMPX_LT_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12607 /* v_cmpx_ne_i32 */, AMDGPU::V_CMPX_NE_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12607 /* v_cmpx_ne_i32 */, AMDGPU::V_CMPX_NE_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12607 /* v_cmpx_ne_i32 */, AMDGPU::V_CMPX_NE_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12607 /* v_cmpx_ne_i32 */, AMDGPU::V_CMPX_NE_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12621 /* v_cmpx_ne_i32_e32 */, AMDGPU::V_CMPX_NE_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12621 /* v_cmpx_ne_i32_e32 */, AMDGPU::V_CMPX_NE_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12639 /* v_cmpx_ne_i64 */, AMDGPU::V_CMPX_NE_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12639 /* v_cmpx_ne_i64 */, AMDGPU::V_CMPX_NE_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12639 /* v_cmpx_ne_i64 */, AMDGPU::V_CMPX_NE_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12639 /* v_cmpx_ne_i64 */, AMDGPU::V_CMPX_NE_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12653 /* v_cmpx_ne_i64_e32 */, AMDGPU::V_CMPX_NE_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12653 /* v_cmpx_ne_i64_e32 */, AMDGPU::V_CMPX_NE_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12671 /* v_cmpx_ne_u32 */, AMDGPU::V_CMPX_NE_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12671 /* v_cmpx_ne_u32 */, AMDGPU::V_CMPX_NE_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12671 /* v_cmpx_ne_u32 */, AMDGPU::V_CMPX_NE_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12671 /* v_cmpx_ne_u32 */, AMDGPU::V_CMPX_NE_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12685 /* v_cmpx_ne_u32_e32 */, AMDGPU::V_CMPX_NE_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12685 /* v_cmpx_ne_u32_e32 */, AMDGPU::V_CMPX_NE_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12703 /* v_cmpx_ne_u64 */, AMDGPU::V_CMPX_NE_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12703 /* v_cmpx_ne_u64 */, AMDGPU::V_CMPX_NE_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12703 /* v_cmpx_ne_u64 */, AMDGPU::V_CMPX_NE_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12703 /* v_cmpx_ne_u64 */, AMDGPU::V_CMPX_NE_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12717 /* v_cmpx_ne_u64_e32 */, AMDGPU::V_CMPX_NE_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12717 /* v_cmpx_ne_u64_e32 */, AMDGPU::V_CMPX_NE_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12735 /* v_cmpx_neq_f32 */, AMDGPU::V_CMPX_NEQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12735 /* v_cmpx_neq_f32 */, AMDGPU::V_CMPX_NEQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12735 /* v_cmpx_neq_f32 */, AMDGPU::V_CMPX_NEQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12735 /* v_cmpx_neq_f32 */, AMDGPU::V_CMPX_NEQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12750 /* v_cmpx_neq_f32_e32 */, AMDGPU::V_CMPX_NEQ_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12750 /* v_cmpx_neq_f32_e32 */, AMDGPU::V_CMPX_NEQ_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12769 /* v_cmpx_neq_f64 */, AMDGPU::V_CMPX_NEQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12769 /* v_cmpx_neq_f64 */, AMDGPU::V_CMPX_NEQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12769 /* v_cmpx_neq_f64 */, AMDGPU::V_CMPX_NEQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12769 /* v_cmpx_neq_f64 */, AMDGPU::V_CMPX_NEQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12784 /* v_cmpx_neq_f64_e32 */, AMDGPU::V_CMPX_NEQ_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12784 /* v_cmpx_neq_f64_e32 */, AMDGPU::V_CMPX_NEQ_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12803 /* v_cmpx_nge_f32 */, AMDGPU::V_CMPX_NGE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12803 /* v_cmpx_nge_f32 */, AMDGPU::V_CMPX_NGE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12803 /* v_cmpx_nge_f32 */, AMDGPU::V_CMPX_NGE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12803 /* v_cmpx_nge_f32 */, AMDGPU::V_CMPX_NGE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12818 /* v_cmpx_nge_f32_e32 */, AMDGPU::V_CMPX_NGE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12818 /* v_cmpx_nge_f32_e32 */, AMDGPU::V_CMPX_NGE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12837 /* v_cmpx_nge_f64 */, AMDGPU::V_CMPX_NGE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12837 /* v_cmpx_nge_f64 */, AMDGPU::V_CMPX_NGE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12837 /* v_cmpx_nge_f64 */, AMDGPU::V_CMPX_NGE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12837 /* v_cmpx_nge_f64 */, AMDGPU::V_CMPX_NGE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12852 /* v_cmpx_nge_f64_e32 */, AMDGPU::V_CMPX_NGE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12852 /* v_cmpx_nge_f64_e32 */, AMDGPU::V_CMPX_NGE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12871 /* v_cmpx_ngt_f32 */, AMDGPU::V_CMPX_NGT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12871 /* v_cmpx_ngt_f32 */, AMDGPU::V_CMPX_NGT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12871 /* v_cmpx_ngt_f32 */, AMDGPU::V_CMPX_NGT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12871 /* v_cmpx_ngt_f32 */, AMDGPU::V_CMPX_NGT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12886 /* v_cmpx_ngt_f32_e32 */, AMDGPU::V_CMPX_NGT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12886 /* v_cmpx_ngt_f32_e32 */, AMDGPU::V_CMPX_NGT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12905 /* v_cmpx_ngt_f64 */, AMDGPU::V_CMPX_NGT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12905 /* v_cmpx_ngt_f64 */, AMDGPU::V_CMPX_NGT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12905 /* v_cmpx_ngt_f64 */, AMDGPU::V_CMPX_NGT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12905 /* v_cmpx_ngt_f64 */, AMDGPU::V_CMPX_NGT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12920 /* v_cmpx_ngt_f64_e32 */, AMDGPU::V_CMPX_NGT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12920 /* v_cmpx_ngt_f64_e32 */, AMDGPU::V_CMPX_NGT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12939 /* v_cmpx_nle_f32 */, AMDGPU::V_CMPX_NLE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12939 /* v_cmpx_nle_f32 */, AMDGPU::V_CMPX_NLE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12939 /* v_cmpx_nle_f32 */, AMDGPU::V_CMPX_NLE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12939 /* v_cmpx_nle_f32 */, AMDGPU::V_CMPX_NLE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12954 /* v_cmpx_nle_f32_e32 */, AMDGPU::V_CMPX_NLE_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12954 /* v_cmpx_nle_f32_e32 */, AMDGPU::V_CMPX_NLE_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12973 /* v_cmpx_nle_f64 */, AMDGPU::V_CMPX_NLE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12973 /* v_cmpx_nle_f64 */, AMDGPU::V_CMPX_NLE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12973 /* v_cmpx_nle_f64 */, AMDGPU::V_CMPX_NLE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12973 /* v_cmpx_nle_f64 */, AMDGPU::V_CMPX_NLE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12988 /* v_cmpx_nle_f64_e32 */, AMDGPU::V_CMPX_NLE_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12988 /* v_cmpx_nle_f64_e32 */, AMDGPU::V_CMPX_NLE_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13007 /* v_cmpx_nlg_f32 */, AMDGPU::V_CMPX_NLG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13007 /* v_cmpx_nlg_f32 */, AMDGPU::V_CMPX_NLG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13007 /* v_cmpx_nlg_f32 */, AMDGPU::V_CMPX_NLG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13007 /* v_cmpx_nlg_f32 */, AMDGPU::V_CMPX_NLG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13022 /* v_cmpx_nlg_f32_e32 */, AMDGPU::V_CMPX_NLG_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13022 /* v_cmpx_nlg_f32_e32 */, AMDGPU::V_CMPX_NLG_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13041 /* v_cmpx_nlg_f64 */, AMDGPU::V_CMPX_NLG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13041 /* v_cmpx_nlg_f64 */, AMDGPU::V_CMPX_NLG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13041 /* v_cmpx_nlg_f64 */, AMDGPU::V_CMPX_NLG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13041 /* v_cmpx_nlg_f64 */, AMDGPU::V_CMPX_NLG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13056 /* v_cmpx_nlg_f64_e32 */, AMDGPU::V_CMPX_NLG_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13056 /* v_cmpx_nlg_f64_e32 */, AMDGPU::V_CMPX_NLG_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13075 /* v_cmpx_nlt_f32 */, AMDGPU::V_CMPX_NLT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13075 /* v_cmpx_nlt_f32 */, AMDGPU::V_CMPX_NLT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13075 /* v_cmpx_nlt_f32 */, AMDGPU::V_CMPX_NLT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13075 /* v_cmpx_nlt_f32 */, AMDGPU::V_CMPX_NLT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13090 /* v_cmpx_nlt_f32_e32 */, AMDGPU::V_CMPX_NLT_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13090 /* v_cmpx_nlt_f32_e32 */, AMDGPU::V_CMPX_NLT_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13109 /* v_cmpx_nlt_f64 */, AMDGPU::V_CMPX_NLT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13109 /* v_cmpx_nlt_f64 */, AMDGPU::V_CMPX_NLT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13109 /* v_cmpx_nlt_f64 */, AMDGPU::V_CMPX_NLT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13109 /* v_cmpx_nlt_f64 */, AMDGPU::V_CMPX_NLT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13124 /* v_cmpx_nlt_f64_e32 */, AMDGPU::V_CMPX_NLT_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13124 /* v_cmpx_nlt_f64_e32 */, AMDGPU::V_CMPX_NLT_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13143 /* v_cmpx_o_f32 */, AMDGPU::V_CMPX_O_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13143 /* v_cmpx_o_f32 */, AMDGPU::V_CMPX_O_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13143 /* v_cmpx_o_f32 */, AMDGPU::V_CMPX_O_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13143 /* v_cmpx_o_f32 */, AMDGPU::V_CMPX_O_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13156 /* v_cmpx_o_f32_e32 */, AMDGPU::V_CMPX_O_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13156 /* v_cmpx_o_f32_e32 */, AMDGPU::V_CMPX_O_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13173 /* v_cmpx_o_f64 */, AMDGPU::V_CMPX_O_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13173 /* v_cmpx_o_f64 */, AMDGPU::V_CMPX_O_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13173 /* v_cmpx_o_f64 */, AMDGPU::V_CMPX_O_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13173 /* v_cmpx_o_f64 */, AMDGPU::V_CMPX_O_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13186 /* v_cmpx_o_f64_e32 */, AMDGPU::V_CMPX_O_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13186 /* v_cmpx_o_f64_e32 */, AMDGPU::V_CMPX_O_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13203 /* v_cmpx_t_i32 */, AMDGPU::V_CMPX_T_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13203 /* v_cmpx_t_i32 */, AMDGPU::V_CMPX_T_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13203 /* v_cmpx_t_i32 */, AMDGPU::V_CMPX_T_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13203 /* v_cmpx_t_i32 */, AMDGPU::V_CMPX_T_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13216 /* v_cmpx_t_i32_e32 */, AMDGPU::V_CMPX_T_I32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13216 /* v_cmpx_t_i32_e32 */, AMDGPU::V_CMPX_T_I32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13233 /* v_cmpx_t_i64 */, AMDGPU::V_CMPX_T_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13233 /* v_cmpx_t_i64 */, AMDGPU::V_CMPX_T_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13233 /* v_cmpx_t_i64 */, AMDGPU::V_CMPX_T_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 13233 /* v_cmpx_t_i64 */, AMDGPU::V_CMPX_T_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 13246 /* v_cmpx_t_i64_e32 */, AMDGPU::V_CMPX_T_I64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13246 /* v_cmpx_t_i64_e32 */, AMDGPU::V_CMPX_T_I64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13263 /* v_cmpx_t_u32 */, AMDGPU::V_CMPX_T_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13263 /* v_cmpx_t_u32 */, AMDGPU::V_CMPX_T_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13263 /* v_cmpx_t_u32 */, AMDGPU::V_CMPX_T_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13263 /* v_cmpx_t_u32 */, AMDGPU::V_CMPX_T_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13276 /* v_cmpx_t_u32_e32 */, AMDGPU::V_CMPX_T_U32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13276 /* v_cmpx_t_u32_e32 */, AMDGPU::V_CMPX_T_U32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13293 /* v_cmpx_t_u64 */, AMDGPU::V_CMPX_T_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13293 /* v_cmpx_t_u64 */, AMDGPU::V_CMPX_T_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13293 /* v_cmpx_t_u64 */, AMDGPU::V_CMPX_T_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 13293 /* v_cmpx_t_u64 */, AMDGPU::V_CMPX_T_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 13306 /* v_cmpx_t_u64_e32 */, AMDGPU::V_CMPX_T_U64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13306 /* v_cmpx_t_u64_e32 */, AMDGPU::V_CMPX_T_U64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13323 /* v_cmpx_tru_f32 */, AMDGPU::V_CMPX_TRU_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13323 /* v_cmpx_tru_f32 */, AMDGPU::V_CMPX_TRU_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13323 /* v_cmpx_tru_f32 */, AMDGPU::V_CMPX_TRU_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13323 /* v_cmpx_tru_f32 */, AMDGPU::V_CMPX_TRU_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13338 /* v_cmpx_tru_f32_e32 */, AMDGPU::V_CMPX_TRU_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13338 /* v_cmpx_tru_f32_e32 */, AMDGPU::V_CMPX_TRU_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13357 /* v_cmpx_tru_f64 */, AMDGPU::V_CMPX_TRU_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13357 /* v_cmpx_tru_f64 */, AMDGPU::V_CMPX_TRU_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13357 /* v_cmpx_tru_f64 */, AMDGPU::V_CMPX_TRU_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13357 /* v_cmpx_tru_f64 */, AMDGPU::V_CMPX_TRU_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13372 /* v_cmpx_tru_f64_e32 */, AMDGPU::V_CMPX_TRU_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13372 /* v_cmpx_tru_f64_e32 */, AMDGPU::V_CMPX_TRU_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13391 /* v_cmpx_u_f32 */, AMDGPU::V_CMPX_U_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13391 /* v_cmpx_u_f32 */, AMDGPU::V_CMPX_U_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13391 /* v_cmpx_u_f32 */, AMDGPU::V_CMPX_U_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13391 /* v_cmpx_u_f32 */, AMDGPU::V_CMPX_U_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13404 /* v_cmpx_u_f32_e32 */, AMDGPU::V_CMPX_U_F32_e32_si, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13404 /* v_cmpx_u_f32_e32 */, AMDGPU::V_CMPX_U_F32_e32_vi, Convert__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13421 /* v_cmpx_u_f64 */, AMDGPU::V_CMPX_U_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13421 /* v_cmpx_u_f64 */, AMDGPU::V_CMPX_U_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13421 /* v_cmpx_u_f64 */, AMDGPU::V_CMPX_U_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13421 /* v_cmpx_u_f64 */, AMDGPU::V_CMPX_U_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13434 /* v_cmpx_u_f64_e32 */, AMDGPU::V_CMPX_U_F64_e32_si, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13434 /* v_cmpx_u_f64_e32 */, AMDGPU::V_CMPX_U_F64_e32_vi, Convert__VSrc641_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13451 /* v_cndmask_b32 */, AMDGPU::V_CNDMASK_B32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13451 /* v_cndmask_b32 */, AMDGPU::V_CNDMASK_B32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13451 /* v_cndmask_b32 */, AMDGPU::V_CNDMASK_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_SSrc64 }, },
  { 13451 /* v_cndmask_b32 */, AMDGPU::V_CNDMASK_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_SSrc64 }, },
  { 13465 /* v_cos_f16 */, AMDGPU::V_COS_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13465 /* v_cos_f16 */, AMDGPU::V_COS_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13465 /* v_cos_f16 */, AMDGPU::V_COS_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13465 /* v_cos_f16 */, AMDGPU::V_COS_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13475 /* v_cos_f32 */, AMDGPU::V_COS_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13475 /* v_cos_f32 */, AMDGPU::V_COS_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13475 /* v_cos_f32 */, AMDGPU::V_COS_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13475 /* v_cos_f32 */, AMDGPU::V_COS_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13485 /* v_cubeid_f32 */, AMDGPU::V_CUBEID_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13485 /* v_cubeid_f32 */, AMDGPU::V_CUBEID_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13498 /* v_cubema_f32 */, AMDGPU::V_CUBEMA_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13498 /* v_cubema_f32 */, AMDGPU::V_CUBEMA_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13511 /* v_cubesc_f32 */, AMDGPU::V_CUBESC_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13511 /* v_cubesc_f32 */, AMDGPU::V_CUBESC_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13524 /* v_cubetc_f32 */, AMDGPU::V_CUBETC_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13524 /* v_cubetc_f32 */, AMDGPU::V_CUBETC_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13537 /* v_cvt_f16_f32 */, AMDGPU::V_CVT_F16_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13537 /* v_cvt_f16_f32 */, AMDGPU::V_CVT_F16_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13537 /* v_cvt_f16_f32 */, AMDGPU::V_CVT_F16_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13537 /* v_cvt_f16_f32 */, AMDGPU::V_CVT_F16_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13551 /* v_cvt_f16_i16 */, AMDGPU::V_CVT_F16_I16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13551 /* v_cvt_f16_i16 */, AMDGPU::V_CVT_F16_I16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13551 /* v_cvt_f16_i16 */, AMDGPU::V_CVT_F16_I16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13551 /* v_cvt_f16_i16 */, AMDGPU::V_CVT_F16_I16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13565 /* v_cvt_f16_u16 */, AMDGPU::V_CVT_F16_U16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13565 /* v_cvt_f16_u16 */, AMDGPU::V_CVT_F16_U16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13565 /* v_cvt_f16_u16 */, AMDGPU::V_CVT_F16_U16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13565 /* v_cvt_f16_u16 */, AMDGPU::V_CVT_F16_U16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13579 /* v_cvt_f32_f16 */, AMDGPU::V_CVT_F32_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13579 /* v_cvt_f32_f16 */, AMDGPU::V_CVT_F32_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13579 /* v_cvt_f32_f16 */, AMDGPU::V_CVT_F32_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13579 /* v_cvt_f32_f16 */, AMDGPU::V_CVT_F32_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13593 /* v_cvt_f32_f64 */, AMDGPU::V_CVT_F32_F64_e32_si, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc64 }, },
  { 13593 /* v_cvt_f32_f64 */, AMDGPU::V_CVT_F32_F64_e32_vi, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc64 }, },
  { 13593 /* v_cvt_f32_f64 */, AMDGPU::V_CVT_F32_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13593 /* v_cvt_f32_f64 */, AMDGPU::V_CVT_F32_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13607 /* v_cvt_f32_i32 */, AMDGPU::V_CVT_F32_I32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13607 /* v_cvt_f32_i32 */, AMDGPU::V_CVT_F32_I32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13607 /* v_cvt_f32_i32 */, AMDGPU::V_CVT_F32_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13607 /* v_cvt_f32_i32 */, AMDGPU::V_CVT_F32_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13621 /* v_cvt_f32_u32 */, AMDGPU::V_CVT_F32_U32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13621 /* v_cvt_f32_u32 */, AMDGPU::V_CVT_F32_U32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13621 /* v_cvt_f32_u32 */, AMDGPU::V_CVT_F32_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13621 /* v_cvt_f32_u32 */, AMDGPU::V_CVT_F32_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13635 /* v_cvt_f32_ubyte0 */, AMDGPU::V_CVT_F32_UBYTE0_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13635 /* v_cvt_f32_ubyte0 */, AMDGPU::V_CVT_F32_UBYTE0_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13635 /* v_cvt_f32_ubyte0 */, AMDGPU::V_CVT_F32_UBYTE0_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13635 /* v_cvt_f32_ubyte0 */, AMDGPU::V_CVT_F32_UBYTE0_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13652 /* v_cvt_f32_ubyte1 */, AMDGPU::V_CVT_F32_UBYTE1_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13652 /* v_cvt_f32_ubyte1 */, AMDGPU::V_CVT_F32_UBYTE1_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13652 /* v_cvt_f32_ubyte1 */, AMDGPU::V_CVT_F32_UBYTE1_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13652 /* v_cvt_f32_ubyte1 */, AMDGPU::V_CVT_F32_UBYTE1_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13669 /* v_cvt_f32_ubyte2 */, AMDGPU::V_CVT_F32_UBYTE2_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13669 /* v_cvt_f32_ubyte2 */, AMDGPU::V_CVT_F32_UBYTE2_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13669 /* v_cvt_f32_ubyte2 */, AMDGPU::V_CVT_F32_UBYTE2_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13669 /* v_cvt_f32_ubyte2 */, AMDGPU::V_CVT_F32_UBYTE2_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13686 /* v_cvt_f32_ubyte3 */, AMDGPU::V_CVT_F32_UBYTE3_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13686 /* v_cvt_f32_ubyte3 */, AMDGPU::V_CVT_F32_UBYTE3_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13686 /* v_cvt_f32_ubyte3 */, AMDGPU::V_CVT_F32_UBYTE3_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13686 /* v_cvt_f32_ubyte3 */, AMDGPU::V_CVT_F32_UBYTE3_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13703 /* v_cvt_f64_f32 */, AMDGPU::V_CVT_F64_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_VSrc32 }, },
  { 13703 /* v_cvt_f64_f32 */, AMDGPU::V_CVT_F64_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_VSrc32 }, },
  { 13703 /* v_cvt_f64_f32 */, AMDGPU::V_CVT_F64_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13703 /* v_cvt_f64_f32 */, AMDGPU::V_CVT_F64_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13717 /* v_cvt_f64_i32 */, AMDGPU::V_CVT_F64_I32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_VSrc32 }, },
  { 13717 /* v_cvt_f64_i32 */, AMDGPU::V_CVT_F64_I32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_VSrc32 }, },
  { 13717 /* v_cvt_f64_i32 */, AMDGPU::V_CVT_F64_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_VCSrc32 }, },
  { 13717 /* v_cvt_f64_i32 */, AMDGPU::V_CVT_F64_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_VCSrc32 }, },
  { 13731 /* v_cvt_f64_u32 */, AMDGPU::V_CVT_F64_U32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_VSrc32 }, },
  { 13731 /* v_cvt_f64_u32 */, AMDGPU::V_CVT_F64_U32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_VSrc32 }, },
  { 13731 /* v_cvt_f64_u32 */, AMDGPU::V_CVT_F64_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_VCSrc32 }, },
  { 13731 /* v_cvt_f64_u32 */, AMDGPU::V_CVT_F64_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_VCSrc32 }, },
  { 13745 /* v_cvt_flr_i32_f32 */, AMDGPU::V_CVT_FLR_I32_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13745 /* v_cvt_flr_i32_f32 */, AMDGPU::V_CVT_FLR_I32_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13745 /* v_cvt_flr_i32_f32 */, AMDGPU::V_CVT_FLR_I32_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13745 /* v_cvt_flr_i32_f32 */, AMDGPU::V_CVT_FLR_I32_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13763 /* v_cvt_i16_f16 */, AMDGPU::V_CVT_I16_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13763 /* v_cvt_i16_f16 */, AMDGPU::V_CVT_I16_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13763 /* v_cvt_i16_f16 */, AMDGPU::V_CVT_I16_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13763 /* v_cvt_i16_f16 */, AMDGPU::V_CVT_I16_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13777 /* v_cvt_i32_f32 */, AMDGPU::V_CVT_I32_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13777 /* v_cvt_i32_f32 */, AMDGPU::V_CVT_I32_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13777 /* v_cvt_i32_f32 */, AMDGPU::V_CVT_I32_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13777 /* v_cvt_i32_f32 */, AMDGPU::V_CVT_I32_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13791 /* v_cvt_i32_f64 */, AMDGPU::V_CVT_I32_F64_e32_si, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc64 }, },
  { 13791 /* v_cvt_i32_f64 */, AMDGPU::V_CVT_I32_F64_e32_vi, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc64 }, },
  { 13791 /* v_cvt_i32_f64 */, AMDGPU::V_CVT_I32_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13791 /* v_cvt_i32_f64 */, AMDGPU::V_CVT_I32_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13805 /* v_cvt_off_f32_i4 */, AMDGPU::V_CVT_OFF_F32_I4_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13805 /* v_cvt_off_f32_i4 */, AMDGPU::V_CVT_OFF_F32_I4_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13805 /* v_cvt_off_f32_i4 */, AMDGPU::V_CVT_OFF_F32_I4_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13805 /* v_cvt_off_f32_i4 */, AMDGPU::V_CVT_OFF_F32_I4_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13822 /* v_cvt_pk_i16_i32 */, AMDGPU::V_CVT_PK_I16_I32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13822 /* v_cvt_pk_i16_i32 */, AMDGPU::V_CVT_PK_I16_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13822 /* v_cvt_pk_i16_i32 */, AMDGPU::V_CVT_PK_I16_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13839 /* v_cvt_pk_u16_u32 */, AMDGPU::V_CVT_PK_U16_U32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13839 /* v_cvt_pk_u16_u32 */, AMDGPU::V_CVT_PK_U16_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13839 /* v_cvt_pk_u16_u32 */, AMDGPU::V_CVT_PK_U16_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13856 /* v_cvt_pkaccum_u8_f32 */, AMDGPU::V_CVT_PKACCUM_U8_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13856 /* v_cvt_pkaccum_u8_f32 */, AMDGPU::V_CVT_PKACCUM_U8_F32_e64_vi, Convert__Reg1_0__imm_95_0__VCSrc321_1__imm_95_0__VCSrc321_2__imm_95_0__imm_95_0, Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13856 /* v_cvt_pkaccum_u8_f32 */, AMDGPU::V_CVT_PKACCUM_U8_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13856 /* v_cvt_pkaccum_u8_f32 */, AMDGPU::V_CVT_PKACCUM_U8_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13877 /* v_cvt_pknorm_i16_f32 */, AMDGPU::V_CVT_PKNORM_I16_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13877 /* v_cvt_pknorm_i16_f32 */, AMDGPU::V_CVT_PKNORM_I16_F32_e64_vi, Convert__Reg1_0__imm_95_0__VCSrc321_1__imm_95_0__VCSrc321_2__imm_95_0__imm_95_0, Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13877 /* v_cvt_pknorm_i16_f32 */, AMDGPU::V_CVT_PKNORM_I16_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13877 /* v_cvt_pknorm_i16_f32 */, AMDGPU::V_CVT_PKNORM_I16_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13898 /* v_cvt_pknorm_u16_f32 */, AMDGPU::V_CVT_PKNORM_U16_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13898 /* v_cvt_pknorm_u16_f32 */, AMDGPU::V_CVT_PKNORM_U16_F32_e64_vi, Convert__Reg1_0__imm_95_0__VCSrc321_1__imm_95_0__VCSrc321_2__imm_95_0__imm_95_0, Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13898 /* v_cvt_pknorm_u16_f32 */, AMDGPU::V_CVT_PKNORM_U16_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13898 /* v_cvt_pknorm_u16_f32 */, AMDGPU::V_CVT_PKNORM_U16_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13919 /* v_cvt_pkrtz_f16_f32 */, AMDGPU::V_CVT_PKRTZ_F16_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13919 /* v_cvt_pkrtz_f16_f32 */, AMDGPU::V_CVT_PKRTZ_F16_F32_e64_vi, Convert__Reg1_0__imm_95_0__VCSrc321_1__imm_95_0__VCSrc321_2__imm_95_0__imm_95_0, Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13919 /* v_cvt_pkrtz_f16_f32 */, AMDGPU::V_CVT_PKRTZ_F16_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13919 /* v_cvt_pkrtz_f16_f32 */, AMDGPU::V_CVT_PKRTZ_F16_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13939 /* v_cvt_rpi_i32_f32 */, AMDGPU::V_CVT_RPI_I32_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13939 /* v_cvt_rpi_i32_f32 */, AMDGPU::V_CVT_RPI_I32_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13939 /* v_cvt_rpi_i32_f32 */, AMDGPU::V_CVT_RPI_I32_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13939 /* v_cvt_rpi_i32_f32 */, AMDGPU::V_CVT_RPI_I32_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13957 /* v_cvt_u16_f16 */, AMDGPU::V_CVT_U16_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13957 /* v_cvt_u16_f16 */, AMDGPU::V_CVT_U16_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13957 /* v_cvt_u16_f16 */, AMDGPU::V_CVT_U16_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13957 /* v_cvt_u16_f16 */, AMDGPU::V_CVT_U16_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13971 /* v_cvt_u32_f32 */, AMDGPU::V_CVT_U32_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13971 /* v_cvt_u32_f32 */, AMDGPU::V_CVT_U32_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 13971 /* v_cvt_u32_f32 */, AMDGPU::V_CVT_U32_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13971 /* v_cvt_u32_f32 */, AMDGPU::V_CVT_U32_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13985 /* v_cvt_u32_f64 */, AMDGPU::V_CVT_U32_F64_e32_si, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc64 }, },
  { 13985 /* v_cvt_u32_f64 */, AMDGPU::V_CVT_U32_F64_e32_vi, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc64 }, },
  { 13985 /* v_cvt_u32_f64 */, AMDGPU::V_CVT_U32_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13985 /* v_cvt_u32_f64 */, AMDGPU::V_CVT_U32_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13999 /* v_div_fixup_f32 */, AMDGPU::V_DIV_FIXUP_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13999 /* v_div_fixup_f32 */, AMDGPU::V_DIV_FIXUP_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14015 /* v_div_fixup_f64 */, AMDGPU::V_DIV_FIXUP_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14015 /* v_div_fixup_f64 */, AMDGPU::V_DIV_FIXUP_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14031 /* v_div_fmas_f32 */, AMDGPU::V_DIV_FMAS_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14031 /* v_div_fmas_f32 */, AMDGPU::V_DIV_FMAS_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14046 /* v_div_fmas_f64 */, AMDGPU::V_DIV_FMAS_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14046 /* v_div_fmas_f64 */, AMDGPU::V_DIV_FMAS_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14061 /* v_div_scale_f32 */, AMDGPU::V_DIV_SCALE_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14061 /* v_div_scale_f32 */, AMDGPU::V_DIV_SCALE_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14077 /* v_div_scale_f64 */, AMDGPU::V_DIV_SCALE_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14077 /* v_div_scale_f64 */, AMDGPU::V_DIV_SCALE_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14093 /* v_exp_f16 */, AMDGPU::V_EXP_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14093 /* v_exp_f16 */, AMDGPU::V_EXP_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14093 /* v_exp_f16 */, AMDGPU::V_EXP_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14093 /* v_exp_f16 */, AMDGPU::V_EXP_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14103 /* v_exp_f32 */, AMDGPU::V_EXP_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14103 /* v_exp_f32 */, AMDGPU::V_EXP_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14103 /* v_exp_f32 */, AMDGPU::V_EXP_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14103 /* v_exp_f32 */, AMDGPU::V_EXP_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14113 /* v_exp_legacy_f32 */, AMDGPU::V_EXP_LEGACY_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isCIVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14113 /* v_exp_legacy_f32 */, AMDGPU::V_EXP_LEGACY_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isCIVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14113 /* v_exp_legacy_f32 */, AMDGPU::V_EXP_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14113 /* v_exp_legacy_f32 */, AMDGPU::V_EXP_LEGACY_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14130 /* v_ffbh_i32 */, AMDGPU::V_FFBH_I32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14130 /* v_ffbh_i32 */, AMDGPU::V_FFBH_I32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14130 /* v_ffbh_i32 */, AMDGPU::V_FFBH_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14130 /* v_ffbh_i32 */, AMDGPU::V_FFBH_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14141 /* v_ffbh_u32 */, AMDGPU::V_FFBH_U32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14141 /* v_ffbh_u32 */, AMDGPU::V_FFBH_U32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14141 /* v_ffbh_u32 */, AMDGPU::V_FFBH_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14141 /* v_ffbh_u32 */, AMDGPU::V_FFBH_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14152 /* v_ffbl_b32 */, AMDGPU::V_FFBL_B32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14152 /* v_ffbl_b32 */, AMDGPU::V_FFBL_B32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14152 /* v_ffbl_b32 */, AMDGPU::V_FFBL_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14152 /* v_ffbl_b32 */, AMDGPU::V_FFBL_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14163 /* v_floor_f16 */, AMDGPU::V_FLOOR_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14163 /* v_floor_f16 */, AMDGPU::V_FLOOR_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14163 /* v_floor_f16 */, AMDGPU::V_FLOOR_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14163 /* v_floor_f16 */, AMDGPU::V_FLOOR_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14175 /* v_floor_f32 */, AMDGPU::V_FLOOR_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14175 /* v_floor_f32 */, AMDGPU::V_FLOOR_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14175 /* v_floor_f32 */, AMDGPU::V_FLOOR_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14175 /* v_floor_f32 */, AMDGPU::V_FLOOR_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14187 /* v_floor_f64 */, AMDGPU::V_FLOOR_F64_e32_si, Convert__Reg1_0__VSrc641_1, Feature_isCIVI|Feature_isSICI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 14187 /* v_floor_f64 */, AMDGPU::V_FLOOR_F64_e32_vi, Convert__Reg1_0__VSrc641_1, Feature_isCIVI|Feature_isVI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 14187 /* v_floor_f64 */, AMDGPU::V_FLOOR_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14187 /* v_floor_f64 */, AMDGPU::V_FLOOR_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14199 /* v_fma_f32 */, AMDGPU::V_FMA_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14199 /* v_fma_f32 */, AMDGPU::V_FMA_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14209 /* v_fma_f64 */, AMDGPU::V_FMA_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14209 /* v_fma_f64 */, AMDGPU::V_FMA_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14219 /* v_fract_f16 */, AMDGPU::V_FRACT_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14219 /* v_fract_f16 */, AMDGPU::V_FRACT_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14219 /* v_fract_f16 */, AMDGPU::V_FRACT_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14219 /* v_fract_f16 */, AMDGPU::V_FRACT_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14231 /* v_fract_f32 */, AMDGPU::V_FRACT_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14231 /* v_fract_f32 */, AMDGPU::V_FRACT_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14231 /* v_fract_f32 */, AMDGPU::V_FRACT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14231 /* v_fract_f32 */, AMDGPU::V_FRACT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14243 /* v_fract_f64 */, AMDGPU::V_FRACT_F64_e32_si, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 14243 /* v_fract_f64 */, AMDGPU::V_FRACT_F64_e32_vi, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 14243 /* v_fract_f64 */, AMDGPU::V_FRACT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14243 /* v_fract_f64 */, AMDGPU::V_FRACT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14255 /* v_frexp_exp_i16_f16 */, AMDGPU::V_FREXP_EXP_I16_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14255 /* v_frexp_exp_i16_f16 */, AMDGPU::V_FREXP_EXP_I16_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14255 /* v_frexp_exp_i16_f16 */, AMDGPU::V_FREXP_EXP_I16_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14255 /* v_frexp_exp_i16_f16 */, AMDGPU::V_FREXP_EXP_I16_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14275 /* v_frexp_exp_i32_f32 */, AMDGPU::V_FREXP_EXP_I32_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14275 /* v_frexp_exp_i32_f32 */, AMDGPU::V_FREXP_EXP_I32_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14275 /* v_frexp_exp_i32_f32 */, AMDGPU::V_FREXP_EXP_I32_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14275 /* v_frexp_exp_i32_f32 */, AMDGPU::V_FREXP_EXP_I32_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14295 /* v_frexp_exp_i32_f64 */, AMDGPU::V_FREXP_EXP_I32_F64_e32_si, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc64 }, },
  { 14295 /* v_frexp_exp_i32_f64 */, AMDGPU::V_FREXP_EXP_I32_F64_e32_vi, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc64 }, },
  { 14295 /* v_frexp_exp_i32_f64 */, AMDGPU::V_FREXP_EXP_I32_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14295 /* v_frexp_exp_i32_f64 */, AMDGPU::V_FREXP_EXP_I32_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14315 /* v_frexp_mant_f16 */, AMDGPU::V_FREXP_MANT_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14315 /* v_frexp_mant_f16 */, AMDGPU::V_FREXP_MANT_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14315 /* v_frexp_mant_f16 */, AMDGPU::V_FREXP_MANT_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14315 /* v_frexp_mant_f16 */, AMDGPU::V_FREXP_MANT_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14332 /* v_frexp_mant_f32 */, AMDGPU::V_FREXP_MANT_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14332 /* v_frexp_mant_f32 */, AMDGPU::V_FREXP_MANT_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14332 /* v_frexp_mant_f32 */, AMDGPU::V_FREXP_MANT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14332 /* v_frexp_mant_f32 */, AMDGPU::V_FREXP_MANT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14349 /* v_frexp_mant_f64 */, AMDGPU::V_FREXP_MANT_F64_e32_si, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 14349 /* v_frexp_mant_f64 */, AMDGPU::V_FREXP_MANT_F64_e32_vi, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 14349 /* v_frexp_mant_f64 */, AMDGPU::V_FREXP_MANT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14349 /* v_frexp_mant_f64 */, AMDGPU::V_FREXP_MANT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14366 /* v_interp_mov_f32 */, AMDGPU::V_INTERP_MOV_F32_si, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14366 /* v_interp_mov_f32 */, AMDGPU::V_INTERP_MOV_F32_vi, Convert__Reg1_0__Imm1_1__Imm1_2__Imm1_3, Feature_isGCN, { MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14383 /* v_interp_p1_f32 */, AMDGPU::V_INTERP_P1_F32_16bank_si, Convert__Reg1_0__Reg1_1__Imm1_2__Imm1_3, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14383 /* v_interp_p1_f32 */, AMDGPU::V_INTERP_P1_F32_16bank_vi, Convert__Reg1_0__Reg1_1__Imm1_2__Imm1_3, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14383 /* v_interp_p1_f32 */, AMDGPU::V_INTERP_P1_F32_si, Convert__Reg1_0__Reg1_1__Imm1_2__Imm1_3, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14383 /* v_interp_p1_f32 */, AMDGPU::V_INTERP_P1_F32_vi, Convert__Reg1_0__Reg1_1__Imm1_2__Imm1_3, Feature_isGCN, { MCK_VGPR_32, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14399 /* v_interp_p2_f32 */, AMDGPU::V_INTERP_P2_F32_si, Convert__Reg1_0__Tie0__Reg1_4__Imm1_5__Imm1_6, Feature_isGCN, { MCK_VGPR_32, MCK__91_, MCK_VGPR_32, MCK__93_, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14399 /* v_interp_p2_f32 */, AMDGPU::V_INTERP_P2_F32_vi, Convert__Reg1_0__Tie0__Reg1_4__Imm1_5__Imm1_6, Feature_isGCN, { MCK_VGPR_32, MCK__91_, MCK_VGPR_32, MCK__93_, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14415 /* v_ldexp_f16 */, AMDGPU::V_LDEXP_F16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14415 /* v_ldexp_f16 */, AMDGPU::V_LDEXP_F16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14415 /* v_ldexp_f16 */, AMDGPU::V_LDEXP_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14415 /* v_ldexp_f16 */, AMDGPU::V_LDEXP_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14427 /* v_ldexp_f32 */, AMDGPU::V_LDEXP_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14427 /* v_ldexp_f32 */, AMDGPU::V_LDEXP_F32_e64_vi, Convert__Reg1_0__imm_95_0__VCSrc321_1__imm_95_0__VCSrc321_2__imm_95_0__imm_95_0, Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14427 /* v_ldexp_f32 */, AMDGPU::V_LDEXP_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14427 /* v_ldexp_f32 */, AMDGPU::V_LDEXP_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14439 /* v_ldexp_f64 */, AMDGPU::V_LDEXP_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14439 /* v_ldexp_f64 */, AMDGPU::V_LDEXP_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14451 /* v_log_clamp_f32 */, AMDGPU::V_LOG_CLAMP_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14451 /* v_log_clamp_f32 */, AMDGPU::V_LOG_CLAMP_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14467 /* v_log_f16 */, AMDGPU::V_LOG_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14467 /* v_log_f16 */, AMDGPU::V_LOG_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14467 /* v_log_f16 */, AMDGPU::V_LOG_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14467 /* v_log_f16 */, AMDGPU::V_LOG_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14477 /* v_log_f32 */, AMDGPU::V_LOG_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14477 /* v_log_f32 */, AMDGPU::V_LOG_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14477 /* v_log_f32 */, AMDGPU::V_LOG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14477 /* v_log_f32 */, AMDGPU::V_LOG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14487 /* v_log_legacy_f32 */, AMDGPU::V_LOG_LEGACY_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isCIVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14487 /* v_log_legacy_f32 */, AMDGPU::V_LOG_LEGACY_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isCIVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 14487 /* v_log_legacy_f32 */, AMDGPU::V_LOG_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14487 /* v_log_legacy_f32 */, AMDGPU::V_LOG_LEGACY_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14504 /* v_lshl_b32 */, AMDGPU::V_LSHL_B32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14504 /* v_lshl_b32 */, AMDGPU::V_LSHL_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14515 /* v_lshl_b64 */, AMDGPU::V_LSHL_B64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VReg_64, MCK_VCSrc64, MCK_VCSrc32 }, },
  { 14515 /* v_lshl_b64 */, AMDGPU::V_LSHL_B64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_VReg_64, MCK_VCSrc64, MCK_VCSrc32 }, },
  { 14526 /* v_lshlrev_b16 */, AMDGPU::V_LSHLREV_B16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14526 /* v_lshlrev_b16 */, AMDGPU::V_LSHLREV_B16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14526 /* v_lshlrev_b16 */, AMDGPU::V_LSHLREV_B16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14526 /* v_lshlrev_b16 */, AMDGPU::V_LSHLREV_B16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14540 /* v_lshlrev_b32 */, AMDGPU::V_LSHLREV_B32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14540 /* v_lshlrev_b32 */, AMDGPU::V_LSHLREV_B32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14540 /* v_lshlrev_b32 */, AMDGPU::V_LSHLREV_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14540 /* v_lshlrev_b32 */, AMDGPU::V_LSHLREV_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14554 /* v_lshlrev_b64 */, AMDGPU::V_LSHLREV_B64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14554 /* v_lshlrev_b64 */, AMDGPU::V_LSHLREV_B64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14568 /* v_lshr_b32 */, AMDGPU::V_LSHR_B32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14568 /* v_lshr_b32 */, AMDGPU::V_LSHR_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14579 /* v_lshr_b64 */, AMDGPU::V_LSHR_B64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VReg_64, MCK_VCSrc64, MCK_VCSrc32 }, },
  { 14579 /* v_lshr_b64 */, AMDGPU::V_LSHR_B64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_VReg_64, MCK_VCSrc64, MCK_VCSrc32 }, },
  { 14590 /* v_lshrrev_b16 */, AMDGPU::V_LSHRREV_B16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14590 /* v_lshrrev_b16 */, AMDGPU::V_LSHRREV_B16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14590 /* v_lshrrev_b16 */, AMDGPU::V_LSHRREV_B16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14590 /* v_lshrrev_b16 */, AMDGPU::V_LSHRREV_B16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14604 /* v_lshrrev_b32 */, AMDGPU::V_LSHRREV_B32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14604 /* v_lshrrev_b32 */, AMDGPU::V_LSHRREV_B32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14604 /* v_lshrrev_b32 */, AMDGPU::V_LSHRREV_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14604 /* v_lshrrev_b32 */, AMDGPU::V_LSHRREV_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14618 /* v_lshrrev_b64 */, AMDGPU::V_LSHRREV_B64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14618 /* v_lshrrev_b64 */, AMDGPU::V_LSHRREV_B64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14632 /* v_mac_f16 */, AMDGPU::V_MAC_F16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14632 /* v_mac_f16 */, AMDGPU::V_MAC_F16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14632 /* v_mac_f16 */, AMDGPU::V_MAC_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14632 /* v_mac_f16 */, AMDGPU::V_MAC_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14642 /* v_mac_f32 */, AMDGPU::V_MAC_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2__Tie0, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14642 /* v_mac_f32 */, AMDGPU::V_MAC_F32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2__Tie0, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14642 /* v_mac_f32 */, AMDGPU::V_MAC_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14642 /* v_mac_f32 */, AMDGPU::V_MAC_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14652 /* v_mac_legacy_f32 */, AMDGPU::V_MAC_LEGACY_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14652 /* v_mac_legacy_f32 */, AMDGPU::V_MAC_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14669 /* v_mad_f32 */, AMDGPU::V_MAD_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14669 /* v_mad_f32 */, AMDGPU::V_MAD_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14679 /* v_mad_i32_i24 */, AMDGPU::V_MAD_I32_I24_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14679 /* v_mad_i32_i24 */, AMDGPU::V_MAD_I32_I24_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14693 /* v_mad_i64_i32 */, AMDGPU::V_MAD_I64_I32_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14693 /* v_mad_i64_i32 */, AMDGPU::V_MAD_I64_I32_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14707 /* v_mad_legacy_f32 */, AMDGPU::V_MAD_LEGACY_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14707 /* v_mad_legacy_f32 */, AMDGPU::V_MAD_LEGACY_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14724 /* v_mad_u32_u24 */, AMDGPU::V_MAD_U32_U24_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14724 /* v_mad_u32_u24 */, AMDGPU::V_MAD_U32_U24_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14738 /* v_mad_u64_u32 */, AMDGPU::V_MAD_U64_U32_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14738 /* v_mad_u64_u32 */, AMDGPU::V_MAD_U64_U32_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14752 /* v_madak_f16 */, AMDGPU::V_MADAK_F16_si, Convert__Reg1_0__VCSrc321_1__Reg1_2__Imm1_3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14752 /* v_madak_f16 */, AMDGPU::V_MADAK_F16_vi, Convert__Reg1_0__VCSrc321_1__Reg1_2__Imm1_3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14764 /* v_madak_f32 */, AMDGPU::V_MADAK_F32_si, Convert__Reg1_0__VCSrc321_1__Reg1_2__Imm1_3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14764 /* v_madak_f32 */, AMDGPU::V_MADAK_F32_vi, Convert__Reg1_0__VCSrc321_1__Reg1_2__Imm1_3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14776 /* v_madmk_f16 */, AMDGPU::V_MADMK_F16_si, Convert__Reg1_0__VCSrc321_1__Reg1_2__Imm1_3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14776 /* v_madmk_f16 */, AMDGPU::V_MADMK_F16_vi, Convert__Reg1_0__VCSrc321_1__Reg1_2__Imm1_3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14788 /* v_madmk_f32 */, AMDGPU::V_MADMK_F32_si, Convert__Reg1_0__VCSrc321_1__Reg1_2__Imm1_3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14788 /* v_madmk_f32 */, AMDGPU::V_MADMK_F32_vi, Convert__Reg1_0__VCSrc321_1__Reg1_2__Imm1_3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14800 /* v_max3_f32 */, AMDGPU::V_MAX3_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14800 /* v_max3_f32 */, AMDGPU::V_MAX3_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14811 /* v_max3_i32 */, AMDGPU::V_MAX3_I32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14811 /* v_max3_i32 */, AMDGPU::V_MAX3_I32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14822 /* v_max3_u32 */, AMDGPU::V_MAX3_U32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14822 /* v_max3_u32 */, AMDGPU::V_MAX3_U32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14833 /* v_max_f16 */, AMDGPU::V_MAX_F16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14833 /* v_max_f16 */, AMDGPU::V_MAX_F16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14833 /* v_max_f16 */, AMDGPU::V_MAX_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14833 /* v_max_f16 */, AMDGPU::V_MAX_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14843 /* v_max_f32 */, AMDGPU::V_MAX_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14843 /* v_max_f32 */, AMDGPU::V_MAX_F32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14843 /* v_max_f32 */, AMDGPU::V_MAX_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14843 /* v_max_f32 */, AMDGPU::V_MAX_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14853 /* v_max_f64 */, AMDGPU::V_MAX_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14853 /* v_max_f64 */, AMDGPU::V_MAX_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14863 /* v_max_i16 */, AMDGPU::V_MAX_I16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14863 /* v_max_i16 */, AMDGPU::V_MAX_I16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14863 /* v_max_i16 */, AMDGPU::V_MAX_I16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14863 /* v_max_i16 */, AMDGPU::V_MAX_I16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14873 /* v_max_i32 */, AMDGPU::V_MAX_I32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14873 /* v_max_i32 */, AMDGPU::V_MAX_I32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14873 /* v_max_i32 */, AMDGPU::V_MAX_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14873 /* v_max_i32 */, AMDGPU::V_MAX_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14883 /* v_max_legacy_f32 */, AMDGPU::V_MAX_LEGACY_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14883 /* v_max_legacy_f32 */, AMDGPU::V_MAX_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14900 /* v_max_u16 */, AMDGPU::V_MAX_U16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14900 /* v_max_u16 */, AMDGPU::V_MAX_U16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14900 /* v_max_u16 */, AMDGPU::V_MAX_U16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14900 /* v_max_u16 */, AMDGPU::V_MAX_U16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14910 /* v_max_u32 */, AMDGPU::V_MAX_U32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14910 /* v_max_u32 */, AMDGPU::V_MAX_U32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14910 /* v_max_u32 */, AMDGPU::V_MAX_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14910 /* v_max_u32 */, AMDGPU::V_MAX_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14920 /* v_mbcnt_hi_u32_b32 */, AMDGPU::V_MBCNT_HI_U32_B32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14920 /* v_mbcnt_hi_u32_b32 */, AMDGPU::V_MBCNT_HI_U32_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14920 /* v_mbcnt_hi_u32_b32 */, AMDGPU::V_MBCNT_HI_U32_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14939 /* v_mbcnt_lo_u32_b32 */, AMDGPU::V_MBCNT_LO_U32_B32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14939 /* v_mbcnt_lo_u32_b32 */, AMDGPU::V_MBCNT_LO_U32_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14939 /* v_mbcnt_lo_u32_b32 */, AMDGPU::V_MBCNT_LO_U32_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14958 /* v_med3_f32 */, AMDGPU::V_MED3_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14958 /* v_med3_f32 */, AMDGPU::V_MED3_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14969 /* v_med3_i32 */, AMDGPU::V_MED3_I32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14969 /* v_med3_i32 */, AMDGPU::V_MED3_I32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14980 /* v_med3_u32 */, AMDGPU::V_MED3_U32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14980 /* v_med3_u32 */, AMDGPU::V_MED3_U32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14991 /* v_min3_f32 */, AMDGPU::V_MIN3_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14991 /* v_min3_f32 */, AMDGPU::V_MIN3_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15002 /* v_min3_i32 */, AMDGPU::V_MIN3_I32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15002 /* v_min3_i32 */, AMDGPU::V_MIN3_I32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15013 /* v_min3_u32 */, AMDGPU::V_MIN3_U32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15013 /* v_min3_u32 */, AMDGPU::V_MIN3_U32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15024 /* v_min_f16 */, AMDGPU::V_MIN_F16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15024 /* v_min_f16 */, AMDGPU::V_MIN_F16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15024 /* v_min_f16 */, AMDGPU::V_MIN_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15024 /* v_min_f16 */, AMDGPU::V_MIN_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15034 /* v_min_f32 */, AMDGPU::V_MIN_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15034 /* v_min_f32 */, AMDGPU::V_MIN_F32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15034 /* v_min_f32 */, AMDGPU::V_MIN_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15034 /* v_min_f32 */, AMDGPU::V_MIN_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15044 /* v_min_f64 */, AMDGPU::V_MIN_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15044 /* v_min_f64 */, AMDGPU::V_MIN_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15054 /* v_min_i16 */, AMDGPU::V_MIN_I16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15054 /* v_min_i16 */, AMDGPU::V_MIN_I16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15054 /* v_min_i16 */, AMDGPU::V_MIN_I16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15054 /* v_min_i16 */, AMDGPU::V_MIN_I16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15064 /* v_min_i32 */, AMDGPU::V_MIN_I32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15064 /* v_min_i32 */, AMDGPU::V_MIN_I32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15064 /* v_min_i32 */, AMDGPU::V_MIN_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15064 /* v_min_i32 */, AMDGPU::V_MIN_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15074 /* v_min_legacy_f32 */, AMDGPU::V_MIN_LEGACY_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15074 /* v_min_legacy_f32 */, AMDGPU::V_MIN_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15091 /* v_min_u16 */, AMDGPU::V_MIN_U16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15091 /* v_min_u16 */, AMDGPU::V_MIN_U16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15091 /* v_min_u16 */, AMDGPU::V_MIN_U16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15091 /* v_min_u16 */, AMDGPU::V_MIN_U16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15101 /* v_min_u32 */, AMDGPU::V_MIN_U32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15101 /* v_min_u32 */, AMDGPU::V_MIN_U32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15101 /* v_min_u32 */, AMDGPU::V_MIN_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15101 /* v_min_u32 */, AMDGPU::V_MIN_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15111 /* v_mov_b32 */, AMDGPU::V_MOV_B32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15111 /* v_mov_b32 */, AMDGPU::V_MOV_B32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15111 /* v_mov_b32 */, AMDGPU::V_MOV_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15111 /* v_mov_b32 */, AMDGPU::V_MOV_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15121 /* v_mov_fed_b32 */, AMDGPU::V_MOV_FED_B32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15121 /* v_mov_fed_b32 */, AMDGPU::V_MOV_FED_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15135 /* v_movreld_b32 */, AMDGPU::V_MOVRELD_B32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15135 /* v_movreld_b32 */, AMDGPU::V_MOVRELD_B32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15135 /* v_movreld_b32 */, AMDGPU::V_MOVRELD_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15135 /* v_movreld_b32 */, AMDGPU::V_MOVRELD_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15149 /* v_movrels_b32 */, AMDGPU::V_MOVRELS_B32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15149 /* v_movrels_b32 */, AMDGPU::V_MOVRELS_B32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15149 /* v_movrels_b32 */, AMDGPU::V_MOVRELS_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15149 /* v_movrels_b32 */, AMDGPU::V_MOVRELS_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15163 /* v_movrelsd_b32 */, AMDGPU::V_MOVRELSD_B32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15163 /* v_movrelsd_b32 */, AMDGPU::V_MOVRELSD_B32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15163 /* v_movrelsd_b32 */, AMDGPU::V_MOVRELSD_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15163 /* v_movrelsd_b32 */, AMDGPU::V_MOVRELSD_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15178 /* v_mqsad_u16_u8 */, AMDGPU::V_MQSAD_U16_U8_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15178 /* v_mqsad_u16_u8 */, AMDGPU::V_MQSAD_U16_U8_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15193 /* v_mqsad_u32_u8 */, AMDGPU::V_MQSAD_U32_U8_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15193 /* v_mqsad_u32_u8 */, AMDGPU::V_MQSAD_U32_U8_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15208 /* v_mul_f16 */, AMDGPU::V_MUL_F16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15208 /* v_mul_f16 */, AMDGPU::V_MUL_F16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15208 /* v_mul_f16 */, AMDGPU::V_MUL_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15208 /* v_mul_f16 */, AMDGPU::V_MUL_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15218 /* v_mul_f32 */, AMDGPU::V_MUL_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15218 /* v_mul_f32 */, AMDGPU::V_MUL_F32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15218 /* v_mul_f32 */, AMDGPU::V_MUL_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15218 /* v_mul_f32 */, AMDGPU::V_MUL_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15228 /* v_mul_f64 */, AMDGPU::V_MUL_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15228 /* v_mul_f64 */, AMDGPU::V_MUL_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15238 /* v_mul_hi_i32 */, AMDGPU::V_MUL_HI_I32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15238 /* v_mul_hi_i32 */, AMDGPU::V_MUL_HI_I32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15251 /* v_mul_hi_i32_i24 */, AMDGPU::V_MUL_HI_I32_I24_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15251 /* v_mul_hi_i32_i24 */, AMDGPU::V_MUL_HI_I32_I24_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15251 /* v_mul_hi_i32_i24 */, AMDGPU::V_MUL_HI_I32_I24_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15251 /* v_mul_hi_i32_i24 */, AMDGPU::V_MUL_HI_I32_I24_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15268 /* v_mul_hi_u32 */, AMDGPU::V_MUL_HI_U32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15268 /* v_mul_hi_u32 */, AMDGPU::V_MUL_HI_U32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15281 /* v_mul_hi_u32_u24 */, AMDGPU::V_MUL_HI_U32_U24_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15281 /* v_mul_hi_u32_u24 */, AMDGPU::V_MUL_HI_U32_U24_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15281 /* v_mul_hi_u32_u24 */, AMDGPU::V_MUL_HI_U32_U24_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15281 /* v_mul_hi_u32_u24 */, AMDGPU::V_MUL_HI_U32_U24_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15298 /* v_mul_i32_i24 */, AMDGPU::V_MUL_I32_I24_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15298 /* v_mul_i32_i24 */, AMDGPU::V_MUL_I32_I24_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15298 /* v_mul_i32_i24 */, AMDGPU::V_MUL_I32_I24_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15298 /* v_mul_i32_i24 */, AMDGPU::V_MUL_I32_I24_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15312 /* v_mul_legacy_f32 */, AMDGPU::V_MUL_LEGACY_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15312 /* v_mul_legacy_f32 */, AMDGPU::V_MUL_LEGACY_F32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15312 /* v_mul_legacy_f32 */, AMDGPU::V_MUL_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15312 /* v_mul_legacy_f32 */, AMDGPU::V_MUL_LEGACY_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15329 /* v_mul_lo_i32 */, AMDGPU::V_MUL_LO_I32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15329 /* v_mul_lo_i32 */, AMDGPU::V_MUL_LO_I32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15342 /* v_mul_lo_u16 */, AMDGPU::V_MUL_LO_U16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15342 /* v_mul_lo_u16 */, AMDGPU::V_MUL_LO_U16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15342 /* v_mul_lo_u16 */, AMDGPU::V_MUL_LO_U16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15342 /* v_mul_lo_u16 */, AMDGPU::V_MUL_LO_U16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15355 /* v_mul_lo_u32 */, AMDGPU::V_MUL_LO_U32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15355 /* v_mul_lo_u32 */, AMDGPU::V_MUL_LO_U32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15368 /* v_mul_u32_u24 */, AMDGPU::V_MUL_U32_U24_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15368 /* v_mul_u32_u24 */, AMDGPU::V_MUL_U32_U24_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15368 /* v_mul_u32_u24 */, AMDGPU::V_MUL_U32_U24_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15368 /* v_mul_u32_u24 */, AMDGPU::V_MUL_U32_U24_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15382 /* v_mullit_f32 */, AMDGPU::V_MULLIT_F32_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15382 /* v_mullit_f32 */, AMDGPU::V_MULLIT_F32_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15395 /* v_nop */, AMDGPU::V_NOP_si, Convert_NoOperands, Feature_isGCN|Feature_isSICI, {  }, },
  { 15395 /* v_nop */, AMDGPU::V_NOP_vi, Convert_NoOperands, Feature_isGCN|Feature_isVI, {  }, },
  { 15401 /* v_not_b32 */, AMDGPU::V_NOT_B32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15401 /* v_not_b32 */, AMDGPU::V_NOT_B32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15401 /* v_not_b32 */, AMDGPU::V_NOT_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15401 /* v_not_b32 */, AMDGPU::V_NOT_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15411 /* v_or_b32 */, AMDGPU::V_OR_B32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15411 /* v_or_b32 */, AMDGPU::V_OR_B32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15411 /* v_or_b32 */, AMDGPU::V_OR_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15411 /* v_or_b32 */, AMDGPU::V_OR_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15420 /* v_qsad_pk_u16_u8 */, AMDGPU::V_QSAD_PK_U16_U8_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15420 /* v_qsad_pk_u16_u8 */, AMDGPU::V_QSAD_PK_U16_U8_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15437 /* v_rcp_clamp_f32 */, AMDGPU::V_RCP_CLAMP_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15437 /* v_rcp_clamp_f32 */, AMDGPU::V_RCP_CLAMP_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15453 /* v_rcp_clamp_f64 */, AMDGPU::V_RCP_CLAMP_F64_e32_si, Convert__Reg1_0__VSrc641_1, Feature_isSICI|Feature_isSICI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 15453 /* v_rcp_clamp_f64 */, AMDGPU::V_RCP_CLAMP_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15469 /* v_rcp_f16 */, AMDGPU::V_RCP_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15469 /* v_rcp_f16 */, AMDGPU::V_RCP_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15469 /* v_rcp_f16 */, AMDGPU::V_RCP_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15469 /* v_rcp_f16 */, AMDGPU::V_RCP_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15479 /* v_rcp_f32 */, AMDGPU::V_RCP_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15479 /* v_rcp_f32 */, AMDGPU::V_RCP_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15479 /* v_rcp_f32 */, AMDGPU::V_RCP_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15479 /* v_rcp_f32 */, AMDGPU::V_RCP_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15489 /* v_rcp_f64 */, AMDGPU::V_RCP_F64_e32_si, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 15489 /* v_rcp_f64 */, AMDGPU::V_RCP_F64_e32_vi, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 15489 /* v_rcp_f64 */, AMDGPU::V_RCP_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15489 /* v_rcp_f64 */, AMDGPU::V_RCP_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15499 /* v_rcp_iflag_f32 */, AMDGPU::V_RCP_IFLAG_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15499 /* v_rcp_iflag_f32 */, AMDGPU::V_RCP_IFLAG_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15499 /* v_rcp_iflag_f32 */, AMDGPU::V_RCP_IFLAG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15499 /* v_rcp_iflag_f32 */, AMDGPU::V_RCP_IFLAG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15515 /* v_rcp_legacy_f32 */, AMDGPU::V_RCP_LEGACY_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15515 /* v_rcp_legacy_f32 */, AMDGPU::V_RCP_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15532 /* v_readfirstlane_b32 */, AMDGPU::V_READFIRSTLANE_B32, Convert__Reg1_0__Reg1_1, Feature_isGCN, { MCK_SReg_32, MCK_VGPR_32 }, },
  { 15552 /* v_readlane_b32 */, AMDGPU::V_READLANE_B32_si, Convert__Reg1_0__Reg1_1__SCSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_SReg_32, MCK_VGPR_32, MCK_SCSrc32 }, },
  { 15552 /* v_readlane_b32 */, AMDGPU::V_READLANE_B32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_SReg_32, MCK_VGPR_32, MCK_SCSrc32 }, },
  { 15567 /* v_rndne_f16 */, AMDGPU::V_RNDNE_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15567 /* v_rndne_f16 */, AMDGPU::V_RNDNE_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15567 /* v_rndne_f16 */, AMDGPU::V_RNDNE_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15567 /* v_rndne_f16 */, AMDGPU::V_RNDNE_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15579 /* v_rndne_f32 */, AMDGPU::V_RNDNE_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15579 /* v_rndne_f32 */, AMDGPU::V_RNDNE_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15579 /* v_rndne_f32 */, AMDGPU::V_RNDNE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15579 /* v_rndne_f32 */, AMDGPU::V_RNDNE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15591 /* v_rndne_f64 */, AMDGPU::V_RNDNE_F64_e32_si, Convert__Reg1_0__VSrc641_1, Feature_isCIVI|Feature_isSICI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 15591 /* v_rndne_f64 */, AMDGPU::V_RNDNE_F64_e32_vi, Convert__Reg1_0__VSrc641_1, Feature_isCIVI|Feature_isVI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 15591 /* v_rndne_f64 */, AMDGPU::V_RNDNE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15591 /* v_rndne_f64 */, AMDGPU::V_RNDNE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15603 /* v_rsq_clamp_f32 */, AMDGPU::V_RSQ_CLAMP_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15603 /* v_rsq_clamp_f32 */, AMDGPU::V_RSQ_CLAMP_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15619 /* v_rsq_clamp_f64 */, AMDGPU::V_RSQ_CLAMP_F64_e32_si, Convert__Reg1_0__VSrc641_1, Feature_isSICI|Feature_isSICI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 15619 /* v_rsq_clamp_f64 */, AMDGPU::V_RSQ_CLAMP_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15635 /* v_rsq_f16 */, AMDGPU::V_RSQ_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15635 /* v_rsq_f16 */, AMDGPU::V_RSQ_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15635 /* v_rsq_f16 */, AMDGPU::V_RSQ_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15635 /* v_rsq_f16 */, AMDGPU::V_RSQ_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15645 /* v_rsq_f32 */, AMDGPU::V_RSQ_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15645 /* v_rsq_f32 */, AMDGPU::V_RSQ_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15645 /* v_rsq_f32 */, AMDGPU::V_RSQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15645 /* v_rsq_f32 */, AMDGPU::V_RSQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15655 /* v_rsq_f64 */, AMDGPU::V_RSQ_F64_e32_si, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 15655 /* v_rsq_f64 */, AMDGPU::V_RSQ_F64_e32_vi, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 15655 /* v_rsq_f64 */, AMDGPU::V_RSQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15655 /* v_rsq_f64 */, AMDGPU::V_RSQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15665 /* v_rsq_legacy_f32 */, AMDGPU::V_RSQ_LEGACY_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15665 /* v_rsq_legacy_f32 */, AMDGPU::V_RSQ_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15682 /* v_sad_u32 */, AMDGPU::V_SAD_U32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15682 /* v_sad_u32 */, AMDGPU::V_SAD_U32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15692 /* v_sin_f16 */, AMDGPU::V_SIN_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15692 /* v_sin_f16 */, AMDGPU::V_SIN_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15692 /* v_sin_f16 */, AMDGPU::V_SIN_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15692 /* v_sin_f16 */, AMDGPU::V_SIN_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15702 /* v_sin_f32 */, AMDGPU::V_SIN_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15702 /* v_sin_f32 */, AMDGPU::V_SIN_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15702 /* v_sin_f32 */, AMDGPU::V_SIN_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15702 /* v_sin_f32 */, AMDGPU::V_SIN_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15712 /* v_sqrt_f16 */, AMDGPU::V_SQRT_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15712 /* v_sqrt_f16 */, AMDGPU::V_SQRT_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15712 /* v_sqrt_f16 */, AMDGPU::V_SQRT_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15712 /* v_sqrt_f16 */, AMDGPU::V_SQRT_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15723 /* v_sqrt_f32 */, AMDGPU::V_SQRT_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15723 /* v_sqrt_f32 */, AMDGPU::V_SQRT_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15723 /* v_sqrt_f32 */, AMDGPU::V_SQRT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15723 /* v_sqrt_f32 */, AMDGPU::V_SQRT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15734 /* v_sqrt_f64 */, AMDGPU::V_SQRT_F64_e32_si, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 15734 /* v_sqrt_f64 */, AMDGPU::V_SQRT_F64_e32_vi, Convert__Reg1_0__VSrc641_1, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 15734 /* v_sqrt_f64 */, AMDGPU::V_SQRT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15734 /* v_sqrt_f64 */, AMDGPU::V_SQRT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15745 /* v_sub_f16 */, AMDGPU::V_SUB_F16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15745 /* v_sub_f16 */, AMDGPU::V_SUB_F16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15745 /* v_sub_f16 */, AMDGPU::V_SUB_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15745 /* v_sub_f16 */, AMDGPU::V_SUB_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15755 /* v_sub_f32 */, AMDGPU::V_SUB_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15755 /* v_sub_f32 */, AMDGPU::V_SUB_F32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15755 /* v_sub_f32 */, AMDGPU::V_SUB_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15755 /* v_sub_f32 */, AMDGPU::V_SUB_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15765 /* v_sub_i32 */, AMDGPU::V_SUB_I32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15765 /* v_sub_i32 */, AMDGPU::V_SUB_I32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15765 /* v_sub_i32 */, AMDGPU::V_SUB_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15765 /* v_sub_i32 */, AMDGPU::V_SUB_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15775 /* v_sub_u16 */, AMDGPU::V_SUB_U16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15775 /* v_sub_u16 */, AMDGPU::V_SUB_U16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15775 /* v_sub_u16 */, AMDGPU::V_SUB_U16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15775 /* v_sub_u16 */, AMDGPU::V_SUB_U16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15785 /* v_subb_u32 */, AMDGPU::V_SUBB_U32_e32_si, Convert__Reg1_0__VCSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32 }, },
  { 15785 /* v_subb_u32 */, AMDGPU::V_SUBB_U32_e32_vi, Convert__Reg1_0__VCSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32 }, },
  { 15785 /* v_subb_u32 */, AMDGPU::V_SUBB_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15785 /* v_subb_u32 */, AMDGPU::V_SUBB_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15796 /* v_subbrev_u32 */, AMDGPU::V_SUBBREV_U32_e32_si, Convert__Reg1_0__VCSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32 }, },
  { 15796 /* v_subbrev_u32 */, AMDGPU::V_SUBBREV_U32_e32_vi, Convert__Reg1_0__VCSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32 }, },
  { 15796 /* v_subbrev_u32 */, AMDGPU::V_SUBBREV_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15796 /* v_subbrev_u32 */, AMDGPU::V_SUBBREV_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15810 /* v_subrev_f16 */, AMDGPU::V_SUBREV_F16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15810 /* v_subrev_f16 */, AMDGPU::V_SUBREV_F16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15810 /* v_subrev_f16 */, AMDGPU::V_SUBREV_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15810 /* v_subrev_f16 */, AMDGPU::V_SUBREV_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15823 /* v_subrev_f32 */, AMDGPU::V_SUBREV_F32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15823 /* v_subrev_f32 */, AMDGPU::V_SUBREV_F32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15823 /* v_subrev_f32 */, AMDGPU::V_SUBREV_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15823 /* v_subrev_f32 */, AMDGPU::V_SUBREV_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15836 /* v_subrev_i32 */, AMDGPU::V_SUBREV_I32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15836 /* v_subrev_i32 */, AMDGPU::V_SUBREV_I32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15836 /* v_subrev_i32 */, AMDGPU::V_SUBREV_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15836 /* v_subrev_i32 */, AMDGPU::V_SUBREV_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15849 /* v_subrev_u16 */, AMDGPU::V_SUBREV_U16_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15849 /* v_subrev_u16 */, AMDGPU::V_SUBREV_U16_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15849 /* v_subrev_u16 */, AMDGPU::V_SUBREV_U16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15849 /* v_subrev_u16 */, AMDGPU::V_SUBREV_U16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15862 /* v_trig_preop_f64 */, AMDGPU::V_TRIG_PREOP_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15862 /* v_trig_preop_f64 */, AMDGPU::V_TRIG_PREOP_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15879 /* v_trunc_f16 */, AMDGPU::V_TRUNC_F16_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_DisableInst, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15879 /* v_trunc_f16 */, AMDGPU::V_TRUNC_F16_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15879 /* v_trunc_f16 */, AMDGPU::V_TRUNC_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15879 /* v_trunc_f16 */, AMDGPU::V_TRUNC_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15891 /* v_trunc_f32 */, AMDGPU::V_TRUNC_F32_e32_si, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15891 /* v_trunc_f32 */, AMDGPU::V_TRUNC_F32_e32_vi, Convert__Reg1_0__VSrc321_1, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32 }, },
  { 15891 /* v_trunc_f32 */, AMDGPU::V_TRUNC_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15891 /* v_trunc_f32 */, AMDGPU::V_TRUNC_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15903 /* v_trunc_f64 */, AMDGPU::V_TRUNC_F64_e32_si, Convert__Reg1_0__VSrc641_1, Feature_isCIVI|Feature_isSICI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 15903 /* v_trunc_f64 */, AMDGPU::V_TRUNC_F64_e32_vi, Convert__Reg1_0__VSrc641_1, Feature_isCIVI|Feature_isVI, { MCK_VReg_64, MCK_VSrc64 }, },
  { 15903 /* v_trunc_f64 */, AMDGPU::V_TRUNC_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15903 /* v_trunc_f64 */, AMDGPU::V_TRUNC_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15915 /* v_writelane_b32 */, AMDGPU::V_WRITELANE_B32_si, Convert__Reg1_0__Reg1_1__SCSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_SReg_32, MCK_SCSrc32 }, },
  { 15915 /* v_writelane_b32 */, AMDGPU::V_WRITELANE_B32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_SReg_32, MCK_SCSrc32 }, },
  { 15931 /* v_xor_b32 */, AMDGPU::V_XOR_B32_e32_si, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15931 /* v_xor_b32 */, AMDGPU::V_XOR_B32_e32_vi, Convert__Reg1_0__VSrc321_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15931 /* v_xor_b32 */, AMDGPU::V_XOR_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15931 /* v_xor_b32 */, AMDGPU::V_XOR_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
};

bool AMDGPUAsmParser::
mnemonicIsValid(StringRef Mnemonic, unsigned VariantID) {
  // Find the appropriate table for this asm variant.
  const MatchEntry *Start, *End;
  switch (VariantID) {
  default: llvm_unreachable("invalid variant!");
  case 0: Start = std::begin(MatchTable0); End = std::end(MatchTable0); break;
  }
  // Search the table.
  std::pair<const MatchEntry*, const MatchEntry*> MnemonicRange =
    std::equal_range(Start, End, Mnemonic, LessOpcode());
  return MnemonicRange.first != MnemonicRange.second;
}

unsigned AMDGPUAsmParser::
MatchInstructionImpl(const OperandVector &Operands,
                     MCInst &Inst, uint64_t &ErrorInfo,
                     bool matchingInlineAsm, unsigned VariantID) {
  // Eliminate obvious mismatches.
  if (Operands.size() > 14) {
    ErrorInfo = 14;
    return Match_InvalidOperand;
  }

  // Get the current feature set.
  uint64_t AvailableFeatures = getAvailableFeatures();

  // Get the instruction mnemonic, which is the first token.
  StringRef Mnemonic = ((AMDGPUOperand&)*Operands[0]).getToken();

  // Process all MnemonicAliases to remap the mnemonic.
  applyMnemonicAliases(Mnemonic, AvailableFeatures, VariantID);

  // Some state to try to produce better error messages.
  bool HadMatchOtherThanFeatures = false;
  bool HadMatchOtherThanPredicate = false;
  unsigned RetCode = Match_InvalidOperand;
  uint64_t MissingFeatures = ~0ULL;
  // Set ErrorInfo to the operand that mismatches if it is
  // wrong for all instances of the instruction.
  ErrorInfo = ~0ULL;
  // Find the appropriate table for this asm variant.
  const MatchEntry *Start, *End;
  switch (VariantID) {
  default: llvm_unreachable("invalid variant!");
  case 0: Start = std::begin(MatchTable0); End = std::end(MatchTable0); break;
  }
  // Search the table.
  std::pair<const MatchEntry*, const MatchEntry*> MnemonicRange =
    std::equal_range(Start, End, Mnemonic, LessOpcode());

  // Return a more specific error code if no mnemonics match.
  if (MnemonicRange.first == MnemonicRange.second)
    return Match_MnemonicFail;

  for (const MatchEntry *it = MnemonicRange.first, *ie = MnemonicRange.second;
       it != ie; ++it) {
    // equal_range guarantees that instruction mnemonic matches.
    assert(Mnemonic == it->getMnemonic());
    bool OperandsValid = true;
    for (unsigned i = 0; i != 13; ++i) {
      if (i + 1 >= Operands.size()) {
        OperandsValid = (it->Classes[i] == InvalidMatchClass);
        if (!OperandsValid) ErrorInfo = i + 1;
        break;
      }
      unsigned Diag = validateOperandClass(*Operands[i+1],
                                           (MatchClassKind)it->Classes[i]);
      if (Diag == Match_Success)
        continue;
      // If the generic handler indicates an invalid operand
      // failure, check for a special case.
      if (Diag == Match_InvalidOperand) {
        Diag = validateTargetOperandClass(*Operands[i+1],
                                           (MatchClassKind)it->Classes[i]);
        if (Diag == Match_Success)
          continue;
      }
      // If this operand is broken for all of the instances of this
      // mnemonic, keep track of it so we can report loc info.
      // If we already had a match that only failed due to a
      // target predicate, that diagnostic is preferred.
      if (!HadMatchOtherThanPredicate &&
          (it == MnemonicRange.first || ErrorInfo <= i+1)) {
        ErrorInfo = i+1;
        // InvalidOperand is the default. Prefer specificity.
        if (Diag != Match_InvalidOperand)
          RetCode = Diag;
      }
      // Otherwise, just reject this instance of the mnemonic.
      OperandsValid = false;
      break;
    }

    if (!OperandsValid) continue;
    if ((AvailableFeatures & it->RequiredFeatures) != it->RequiredFeatures) {
      HadMatchOtherThanFeatures = true;
      uint64_t NewMissingFeatures = it->RequiredFeatures & ~AvailableFeatures;
      if (countPopulation(NewMissingFeatures) <=
          countPopulation(MissingFeatures))
        MissingFeatures = NewMissingFeatures;
      continue;
    }

    Inst.clear();

    if (matchingInlineAsm) {
      Inst.setOpcode(it->Opcode);
      convertToMapAndConstraints(it->ConvertFn, Operands);
      return Match_Success;
    }

    // We have selected a definite instruction, convert the parsed
    // operands into the appropriate MCInst.
    convertToMCInst(it->ConvertFn, Inst, it->Opcode, Operands);

    // We have a potential match. Check the target predicate to
    // handle any context sensitive constraints.
    unsigned MatchResult;
    if ((MatchResult = checkTargetMatchPredicate(Inst)) != Match_Success) {
      Inst.clear();
      RetCode = MatchResult;
      HadMatchOtherThanPredicate = true;
      continue;
    }

    return Match_Success;
  }

  // Okay, we had no match.  Try to return a useful error code.
  if (HadMatchOtherThanPredicate || !HadMatchOtherThanFeatures)
    return RetCode;

  // Missing feature matches return which features were missing
  ErrorInfo = MissingFeatures;
  return Match_MissingFeature;
}

namespace {
  struct OperandMatchEntry {
    uint8_t RequiredFeatures;
    uint16_t Mnemonic;
    uint8_t Class;
    uint16_t OperandMask;

    StringRef getMnemonic() const {
      return StringRef(MnemonicTable + Mnemonic + 1,
                       MnemonicTable[Mnemonic]);
    }
  };

  // Predicate for searching for an opcode.
  struct LessOpcodeOperand {
    bool operator()(const OperandMatchEntry &LHS, StringRef RHS) {
      return LHS.getMnemonic()  < RHS;
    }
    bool operator()(StringRef LHS, const OperandMatchEntry &RHS) {
      return LHS < RHS.getMnemonic();
    }
    bool operator()(const OperandMatchEntry &LHS, const OperandMatchEntry &RHS) {
      return LHS.getMnemonic() < RHS.getMnemonic();
    }
  };
} // end anonymous namespace.

static const OperandMatchEntry OperandMatchTable[2428] = {
  /* Operand List Mask, Mnemonic, Operand Class, Features */
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_SLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 8 /* 3 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 32 /* 5 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 752 /* ds_add_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 752 /* ds_add_rtn_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 752 /* ds_add_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 752 /* ds_add_rtn_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 767 /* ds_add_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 767 /* ds_add_rtn_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 767 /* ds_add_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 767 /* ds_add_rtn_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 782 /* ds_add_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 782 /* ds_add_src2_u32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 782 /* ds_add_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 782 /* ds_add_src2_u32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 798 /* ds_add_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 798 /* ds_add_src2_u64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 798 /* ds_add_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 798 /* ds_add_src2_u64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 814 /* ds_add_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 814 /* ds_add_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 814 /* ds_add_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 814 /* ds_add_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 825 /* ds_add_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 825 /* ds_add_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 825 /* ds_add_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 825 /* ds_add_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 836 /* ds_and_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 836 /* ds_and_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 836 /* ds_and_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 836 /* ds_and_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 847 /* ds_and_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 847 /* ds_and_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 847 /* ds_and_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 847 /* ds_and_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 858 /* ds_and_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 858 /* ds_and_rtn_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 858 /* ds_and_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 858 /* ds_and_rtn_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 873 /* ds_and_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 873 /* ds_and_rtn_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 873 /* ds_and_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 873 /* ds_and_rtn_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 888 /* ds_and_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 888 /* ds_and_src2_b64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 888 /* ds_and_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 888 /* ds_and_src2_b64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 904 /* ds_and_src_b32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 904 /* ds_and_src_b32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 904 /* ds_and_src_b32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 904 /* ds_and_src_b32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 919 /* ds_append */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 919 /* ds_append */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 919 /* ds_append */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 919 /* ds_append */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 929 /* ds_cmpst_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 929 /* ds_cmpst_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 929 /* ds_cmpst_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 929 /* ds_cmpst_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 942 /* ds_cmpst_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 942 /* ds_cmpst_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 942 /* ds_cmpst_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 942 /* ds_cmpst_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 955 /* ds_cmpst_f32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 955 /* ds_cmpst_f32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 955 /* ds_cmpst_f32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 955 /* ds_cmpst_f32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 968 /* ds_cmpst_f64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 968 /* ds_cmpst_f64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 968 /* ds_cmpst_f64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 968 /* ds_cmpst_f64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 981 /* ds_cmpst_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 981 /* ds_cmpst_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 981 /* ds_cmpst_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 981 /* ds_cmpst_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 998 /* ds_cmpst_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 998 /* ds_cmpst_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 998 /* ds_cmpst_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 998 /* ds_cmpst_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1015 /* ds_cmpst_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1015 /* ds_cmpst_rtn_f32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1015 /* ds_cmpst_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1015 /* ds_cmpst_rtn_f32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1032 /* ds_cmpst_rtn_f64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1032 /* ds_cmpst_rtn_f64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1032 /* ds_cmpst_rtn_f64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1032 /* ds_cmpst_rtn_f64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1049 /* ds_consume */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1049 /* ds_consume */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1049 /* ds_consume */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1049 /* ds_consume */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1060 /* ds_dec_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1060 /* ds_dec_rtn_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1060 /* ds_dec_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1060 /* ds_dec_rtn_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1075 /* ds_dec_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1075 /* ds_dec_rtn_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1075 /* ds_dec_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1075 /* ds_dec_rtn_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1090 /* ds_dec_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1090 /* ds_dec_src2_u32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1090 /* ds_dec_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1090 /* ds_dec_src2_u32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1106 /* ds_dec_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1106 /* ds_dec_src2_u64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1106 /* ds_dec_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1106 /* ds_dec_src2_u64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1122 /* ds_dec_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1122 /* ds_dec_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1122 /* ds_dec_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1122 /* ds_dec_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1133 /* ds_dec_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1133 /* ds_dec_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1133 /* ds_dec_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1133 /* ds_dec_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1214 /* ds_inc_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1214 /* ds_inc_rtn_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1214 /* ds_inc_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1214 /* ds_inc_rtn_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1229 /* ds_inc_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1229 /* ds_inc_rtn_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1229 /* ds_inc_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1229 /* ds_inc_rtn_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1244 /* ds_inc_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1244 /* ds_inc_src2_u32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1244 /* ds_inc_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1244 /* ds_inc_src2_u32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1260 /* ds_inc_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1260 /* ds_inc_src2_u64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1260 /* ds_inc_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1260 /* ds_inc_src2_u64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1276 /* ds_inc_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1276 /* ds_inc_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1276 /* ds_inc_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1276 /* ds_inc_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1287 /* ds_inc_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1287 /* ds_inc_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1287 /* ds_inc_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1287 /* ds_inc_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1298 /* ds_max_f32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1298 /* ds_max_f32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1298 /* ds_max_f32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1298 /* ds_max_f32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1309 /* ds_max_f64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1309 /* ds_max_f64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1309 /* ds_max_f64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1309 /* ds_max_f64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1320 /* ds_max_i32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1320 /* ds_max_i32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1320 /* ds_max_i32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1320 /* ds_max_i32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1331 /* ds_max_i64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1331 /* ds_max_i64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1331 /* ds_max_i64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1331 /* ds_max_i64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1342 /* ds_max_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1342 /* ds_max_rtn_f32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1342 /* ds_max_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1342 /* ds_max_rtn_f32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1357 /* ds_max_rtn_f64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1357 /* ds_max_rtn_f64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1357 /* ds_max_rtn_f64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1357 /* ds_max_rtn_f64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1372 /* ds_max_rtn_i32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1372 /* ds_max_rtn_i32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1372 /* ds_max_rtn_i32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1372 /* ds_max_rtn_i32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1387 /* ds_max_rtn_i64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1387 /* ds_max_rtn_i64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1387 /* ds_max_rtn_i64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1387 /* ds_max_rtn_i64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1402 /* ds_max_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1402 /* ds_max_rtn_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1402 /* ds_max_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1402 /* ds_max_rtn_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1417 /* ds_max_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1417 /* ds_max_rtn_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1417 /* ds_max_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1417 /* ds_max_rtn_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1432 /* ds_max_src2_f32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1432 /* ds_max_src2_f32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1432 /* ds_max_src2_f32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1432 /* ds_max_src2_f32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1448 /* ds_max_src2_f64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1448 /* ds_max_src2_f64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1448 /* ds_max_src2_f64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1448 /* ds_max_src2_f64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1464 /* ds_max_src2_i32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1464 /* ds_max_src2_i32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1464 /* ds_max_src2_i32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1464 /* ds_max_src2_i32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1480 /* ds_max_src2_i64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1480 /* ds_max_src2_i64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1480 /* ds_max_src2_i64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1480 /* ds_max_src2_i64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1496 /* ds_max_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1496 /* ds_max_src2_u32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1496 /* ds_max_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1496 /* ds_max_src2_u32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1512 /* ds_max_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1512 /* ds_max_src2_u64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1512 /* ds_max_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1512 /* ds_max_src2_u64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1528 /* ds_max_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1528 /* ds_max_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1528 /* ds_max_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1528 /* ds_max_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1539 /* ds_max_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1539 /* ds_max_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1539 /* ds_max_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1539 /* ds_max_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1550 /* ds_min_f32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1550 /* ds_min_f32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1550 /* ds_min_f32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1550 /* ds_min_f32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1561 /* ds_min_f64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1561 /* ds_min_f64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1561 /* ds_min_f64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1561 /* ds_min_f64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1572 /* ds_min_i32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1572 /* ds_min_i32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1572 /* ds_min_i32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1572 /* ds_min_i32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1583 /* ds_min_i64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1583 /* ds_min_i64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1583 /* ds_min_i64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1583 /* ds_min_i64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1594 /* ds_min_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1594 /* ds_min_rtn_f32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1594 /* ds_min_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1594 /* ds_min_rtn_f32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1609 /* ds_min_rtn_f64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1609 /* ds_min_rtn_f64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1609 /* ds_min_rtn_f64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1609 /* ds_min_rtn_f64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1624 /* ds_min_rtn_i32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1624 /* ds_min_rtn_i32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1624 /* ds_min_rtn_i32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1624 /* ds_min_rtn_i32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1639 /* ds_min_rtn_i64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1639 /* ds_min_rtn_i64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1639 /* ds_min_rtn_i64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1639 /* ds_min_rtn_i64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1654 /* ds_min_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1654 /* ds_min_rtn_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1654 /* ds_min_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1654 /* ds_min_rtn_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1669 /* ds_min_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1669 /* ds_min_rtn_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1669 /* ds_min_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1669 /* ds_min_rtn_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1684 /* ds_min_src2_f32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1684 /* ds_min_src2_f32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1684 /* ds_min_src2_f32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1684 /* ds_min_src2_f32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1700 /* ds_min_src2_f64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1700 /* ds_min_src2_f64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1700 /* ds_min_src2_f64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1700 /* ds_min_src2_f64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1716 /* ds_min_src2_i32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1716 /* ds_min_src2_i32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1716 /* ds_min_src2_i32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1716 /* ds_min_src2_i32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1732 /* ds_min_src2_i64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1732 /* ds_min_src2_i64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1732 /* ds_min_src2_i64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1732 /* ds_min_src2_i64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1748 /* ds_min_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1748 /* ds_min_src2_u32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1748 /* ds_min_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1748 /* ds_min_src2_u32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1764 /* ds_min_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1764 /* ds_min_src2_u64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1764 /* ds_min_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1764 /* ds_min_src2_u64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1780 /* ds_min_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1780 /* ds_min_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1780 /* ds_min_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1780 /* ds_min_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1791 /* ds_min_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1791 /* ds_min_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1791 /* ds_min_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1791 /* ds_min_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1802 /* ds_mskor_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1802 /* ds_mskor_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1802 /* ds_mskor_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1802 /* ds_mskor_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1815 /* ds_mskor_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1815 /* ds_mskor_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1815 /* ds_mskor_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1815 /* ds_mskor_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1828 /* ds_mskor_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1828 /* ds_mskor_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1828 /* ds_mskor_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1828 /* ds_mskor_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1845 /* ds_mskor_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1845 /* ds_mskor_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1845 /* ds_mskor_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1845 /* ds_mskor_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1862 /* ds_or_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1862 /* ds_or_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1862 /* ds_or_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1862 /* ds_or_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1872 /* ds_or_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1872 /* ds_or_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1872 /* ds_or_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1872 /* ds_or_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1882 /* ds_or_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1882 /* ds_or_rtn_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1882 /* ds_or_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1882 /* ds_or_rtn_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1896 /* ds_or_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1896 /* ds_or_rtn_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1896 /* ds_or_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1896 /* ds_or_rtn_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1910 /* ds_or_src2_b32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1910 /* ds_or_src2_b32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1910 /* ds_or_src2_b32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1910 /* ds_or_src2_b32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1925 /* ds_or_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1925 /* ds_or_src2_b64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1925 /* ds_or_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 1925 /* ds_or_src2_b64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1940 /* ds_ordered_count */, MCK_DSOffsetparseDSOffsetOptional, 4 /* 2 */ },
  { Feature_isGCN, 1940 /* ds_ordered_count */, MCK_DSOffsetparseDSOffsetOptional, 4 /* 2 */ },
  { Feature_isGCN, 1957 /* ds_read2_b32 */, MCK_DSOffset1, 12 /* 2, 3 */ },
  { Feature_isGCN, 1957 /* ds_read2_b32 */, MCK_GDSparseDSOff01OptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1957 /* ds_read2_b32 */, MCK_DSOffset1, 12 /* 2, 3 */ },
  { Feature_isGCN, 1957 /* ds_read2_b32 */, MCK_GDSparseDSOff01OptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1970 /* ds_read2_b64 */, MCK_DSOffset1, 12 /* 2, 3 */ },
  { Feature_isGCN, 1970 /* ds_read2_b64 */, MCK_GDSparseDSOff01OptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1970 /* ds_read2_b64 */, MCK_DSOffset1, 12 /* 2, 3 */ },
  { Feature_isGCN, 1970 /* ds_read2_b64 */, MCK_GDSparseDSOff01OptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1983 /* ds_read2st64_b32 */, MCK_DSOffset1, 12 /* 2, 3 */ },
  { Feature_isGCN, 1983 /* ds_read2st64_b32 */, MCK_GDSparseDSOff01OptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1983 /* ds_read2st64_b32 */, MCK_DSOffset1, 12 /* 2, 3 */ },
  { Feature_isGCN, 1983 /* ds_read2st64_b32 */, MCK_GDSparseDSOff01OptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2000 /* ds_read2st64_b64 */, MCK_DSOffset1, 12 /* 2, 3 */ },
  { Feature_isGCN, 2000 /* ds_read2st64_b64 */, MCK_GDSparseDSOff01OptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2000 /* ds_read2st64_b64 */, MCK_DSOffset1, 12 /* 2, 3 */ },
  { Feature_isGCN, 2000 /* ds_read2st64_b64 */, MCK_GDSparseDSOff01OptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2017 /* ds_read_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2017 /* ds_read_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2017 /* ds_read_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2017 /* ds_read_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2029 /* ds_read_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2029 /* ds_read_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2029 /* ds_read_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2029 /* ds_read_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2041 /* ds_read_i16 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2041 /* ds_read_i16 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2041 /* ds_read_i16 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2041 /* ds_read_i16 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2053 /* ds_read_i8 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2053 /* ds_read_i8 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2053 /* ds_read_i8 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2053 /* ds_read_i8 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2064 /* ds_read_u16 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2064 /* ds_read_u16 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2064 /* ds_read_u16 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2064 /* ds_read_u16 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2076 /* ds_read_u8 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2076 /* ds_read_u8 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2076 /* ds_read_u8 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2076 /* ds_read_u8 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2087 /* ds_rsub_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2087 /* ds_rsub_rtn_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2087 /* ds_rsub_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2087 /* ds_rsub_rtn_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2103 /* ds_rsub_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2103 /* ds_rsub_rtn_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2103 /* ds_rsub_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2103 /* ds_rsub_rtn_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2119 /* ds_rsub_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2119 /* ds_rsub_src2_u32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2119 /* ds_rsub_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2119 /* ds_rsub_src2_u32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2136 /* ds_rsub_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2136 /* ds_rsub_src2_u64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2136 /* ds_rsub_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2136 /* ds_rsub_src2_u64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2153 /* ds_rsub_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2153 /* ds_rsub_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2153 /* ds_rsub_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2153 /* ds_rsub_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2165 /* ds_rsub_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2165 /* ds_rsub_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2165 /* ds_rsub_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2165 /* ds_rsub_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2177 /* ds_sub_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2177 /* ds_sub_rtn_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2177 /* ds_sub_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2177 /* ds_sub_rtn_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2192 /* ds_sub_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2192 /* ds_sub_rtn_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2192 /* ds_sub_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2192 /* ds_sub_rtn_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2207 /* ds_sub_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2207 /* ds_sub_src2_u32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2207 /* ds_sub_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2207 /* ds_sub_src2_u32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2223 /* ds_sub_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2223 /* ds_sub_src2_u64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2223 /* ds_sub_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2223 /* ds_sub_src2_u64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2239 /* ds_sub_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2239 /* ds_sub_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2239 /* ds_sub_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2239 /* ds_sub_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2250 /* ds_sub_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2250 /* ds_sub_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2250 /* ds_sub_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2250 /* ds_sub_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2261 /* ds_swizzle_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2261 /* ds_swizzle_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2261 /* ds_swizzle_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2261 /* ds_swizzle_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2276 /* ds_wrap_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2276 /* ds_wrap_rtn_f32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2276 /* ds_wrap_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2276 /* ds_wrap_rtn_f32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2292 /* ds_write2_b32 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2292 /* ds_write2_b32 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2292 /* ds_write2_b32 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2292 /* ds_write2_b32 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2306 /* ds_write2_b64 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2306 /* ds_write2_b64 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2306 /* ds_write2_b64 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2306 /* ds_write2_b64 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2320 /* ds_write2st64_b32 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2320 /* ds_write2st64_b32 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2320 /* ds_write2st64_b32 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2320 /* ds_write2st64_b32 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2338 /* ds_write2st64_b64 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2338 /* ds_write2st64_b64 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2338 /* ds_write2st64_b64 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2338 /* ds_write2st64_b64 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2356 /* ds_write_b16 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2356 /* ds_write_b16 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2356 /* ds_write_b16 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2356 /* ds_write_b16 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2369 /* ds_write_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2369 /* ds_write_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2369 /* ds_write_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2369 /* ds_write_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2382 /* ds_write_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2382 /* ds_write_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2382 /* ds_write_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2382 /* ds_write_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2395 /* ds_write_b8 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2395 /* ds_write_b8 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2395 /* ds_write_b8 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2395 /* ds_write_b8 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2407 /* ds_write_src2_b32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2407 /* ds_write_src2_b32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2407 /* ds_write_src2_b32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2407 /* ds_write_src2_b32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2425 /* ds_write_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2425 /* ds_write_src2_b64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2425 /* ds_write_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2425 /* ds_write_src2_b64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2443 /* ds_wrxchg2_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2443 /* ds_wrxchg2_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2443 /* ds_wrxchg2_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2443 /* ds_wrxchg2_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2462 /* ds_wrxchg2_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2462 /* ds_wrxchg2_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2462 /* ds_wrxchg2_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2462 /* ds_wrxchg2_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2481 /* ds_wrxchg2st64_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2481 /* ds_wrxchg2st64_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2481 /* ds_wrxchg2st64_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2481 /* ds_wrxchg2st64_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2504 /* ds_wrxchg2st64_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2504 /* ds_wrxchg2st64_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2504 /* ds_wrxchg2st64_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2504 /* ds_wrxchg2st64_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2527 /* ds_wrxchg_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2527 /* ds_wrxchg_rtn_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2527 /* ds_wrxchg_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2527 /* ds_wrxchg_rtn_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2545 /* ds_wrxchg_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2545 /* ds_wrxchg_rtn_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2545 /* ds_wrxchg_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2545 /* ds_wrxchg_rtn_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2563 /* ds_xor_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2563 /* ds_xor_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2563 /* ds_xor_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2563 /* ds_xor_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2574 /* ds_xor_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2574 /* ds_xor_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2574 /* ds_xor_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2574 /* ds_xor_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2585 /* ds_xor_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2585 /* ds_xor_rtn_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2585 /* ds_xor_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2585 /* ds_xor_rtn_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2600 /* ds_xor_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2600 /* ds_xor_rtn_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2600 /* ds_xor_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2600 /* ds_xor_rtn_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2615 /* ds_xor_src2_b32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2615 /* ds_xor_src2_b32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2615 /* ds_xor_src2_b32 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2615 /* ds_xor_src2_b32 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2631 /* ds_xor_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2631 /* ds_xor_src2_b64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2631 /* ds_xor_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 2 /* 1 */ },
  { Feature_isGCN, 2631 /* ds_xor_src2_b64 */, MCK_GDSparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2651 /* flat_atomic_add */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2651 /* flat_atomic_add */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2651 /* flat_atomic_add */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2651 /* flat_atomic_add */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2667 /* flat_atomic_add_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2667 /* flat_atomic_add_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2667 /* flat_atomic_add_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2667 /* flat_atomic_add_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2686 /* flat_atomic_and */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2686 /* flat_atomic_and */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2686 /* flat_atomic_and */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2686 /* flat_atomic_and */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2702 /* flat_atomic_and_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2702 /* flat_atomic_and_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2702 /* flat_atomic_and_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2702 /* flat_atomic_and_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2721 /* flat_atomic_cmpswap */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2721 /* flat_atomic_cmpswap */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2721 /* flat_atomic_cmpswap */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2721 /* flat_atomic_cmpswap */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2741 /* flat_atomic_cmpswap_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2741 /* flat_atomic_cmpswap_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2741 /* flat_atomic_cmpswap_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2741 /* flat_atomic_cmpswap_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2764 /* flat_atomic_dec */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2764 /* flat_atomic_dec */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2764 /* flat_atomic_dec */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2764 /* flat_atomic_dec */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2780 /* flat_atomic_dec_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2780 /* flat_atomic_dec_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2780 /* flat_atomic_dec_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2780 /* flat_atomic_dec_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2799 /* flat_atomic_fcmpswap */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2799 /* flat_atomic_fcmpswap */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2799 /* flat_atomic_fcmpswap */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2799 /* flat_atomic_fcmpswap */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2820 /* flat_atomic_fcmpswap_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2820 /* flat_atomic_fcmpswap_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2820 /* flat_atomic_fcmpswap_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2820 /* flat_atomic_fcmpswap_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2844 /* flat_atomic_fmax */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2844 /* flat_atomic_fmax */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2844 /* flat_atomic_fmax */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2844 /* flat_atomic_fmax */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2861 /* flat_atomic_fmax_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2861 /* flat_atomic_fmax_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2861 /* flat_atomic_fmax_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2861 /* flat_atomic_fmax_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2881 /* flat_atomic_fmin */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2881 /* flat_atomic_fmin */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2881 /* flat_atomic_fmin */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2881 /* flat_atomic_fmin */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2898 /* flat_atomic_fmin_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2898 /* flat_atomic_fmin_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2898 /* flat_atomic_fmin_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2898 /* flat_atomic_fmin_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2918 /* flat_atomic_inc */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2918 /* flat_atomic_inc */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2918 /* flat_atomic_inc */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2918 /* flat_atomic_inc */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2934 /* flat_atomic_inc_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2934 /* flat_atomic_inc_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2934 /* flat_atomic_inc_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2934 /* flat_atomic_inc_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2953 /* flat_atomic_or */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2953 /* flat_atomic_or */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2953 /* flat_atomic_or */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2953 /* flat_atomic_or */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2968 /* flat_atomic_or_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2968 /* flat_atomic_or_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2968 /* flat_atomic_or_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2968 /* flat_atomic_or_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2986 /* flat_atomic_rsub */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 2986 /* flat_atomic_rsub */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2986 /* flat_atomic_rsub */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2986 /* flat_atomic_rsub */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3003 /* flat_atomic_rsub_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3003 /* flat_atomic_rsub_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3003 /* flat_atomic_rsub_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3003 /* flat_atomic_rsub_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3023 /* flat_atomic_smax */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3023 /* flat_atomic_smax */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3023 /* flat_atomic_smax */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3023 /* flat_atomic_smax */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3040 /* flat_atomic_smax_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3040 /* flat_atomic_smax_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3040 /* flat_atomic_smax_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3040 /* flat_atomic_smax_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3060 /* flat_atomic_smin */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3060 /* flat_atomic_smin */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3060 /* flat_atomic_smin */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3060 /* flat_atomic_smin */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3077 /* flat_atomic_smin_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3077 /* flat_atomic_smin_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3077 /* flat_atomic_smin_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3077 /* flat_atomic_smin_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3097 /* flat_atomic_sub */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3097 /* flat_atomic_sub */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3097 /* flat_atomic_sub */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3097 /* flat_atomic_sub */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3113 /* flat_atomic_sub_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3113 /* flat_atomic_sub_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3113 /* flat_atomic_sub_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3113 /* flat_atomic_sub_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3132 /* flat_atomic_swap */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3132 /* flat_atomic_swap */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3132 /* flat_atomic_swap */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3132 /* flat_atomic_swap */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3149 /* flat_atomic_swap_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3149 /* flat_atomic_swap_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3149 /* flat_atomic_swap_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3149 /* flat_atomic_swap_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3169 /* flat_atomic_umax */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3169 /* flat_atomic_umax */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3169 /* flat_atomic_umax */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3169 /* flat_atomic_umax */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3186 /* flat_atomic_umax_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3186 /* flat_atomic_umax_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3186 /* flat_atomic_umax_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3186 /* flat_atomic_umax_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3206 /* flat_atomic_umin */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3206 /* flat_atomic_umin */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3206 /* flat_atomic_umin */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3206 /* flat_atomic_umin */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3223 /* flat_atomic_umin_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3223 /* flat_atomic_umin_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3223 /* flat_atomic_umin_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3223 /* flat_atomic_umin_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3243 /* flat_atomic_xor */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3243 /* flat_atomic_xor */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3243 /* flat_atomic_xor */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3243 /* flat_atomic_xor */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3259 /* flat_atomic_xor_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3259 /* flat_atomic_xor_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3259 /* flat_atomic_xor_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3259 /* flat_atomic_xor_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3278 /* flat_load_dword */, MCK_GLCparseFlatOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3278 /* flat_load_dword */, MCK_SLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3278 /* flat_load_dword */, MCK_TFEparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3294 /* flat_load_dwordx2 */, MCK_GLCparseFlatOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3294 /* flat_load_dwordx2 */, MCK_SLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3294 /* flat_load_dwordx2 */, MCK_TFEparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3312 /* flat_load_dwordx3 */, MCK_GLCparseFlatOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3312 /* flat_load_dwordx3 */, MCK_SLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3312 /* flat_load_dwordx3 */, MCK_TFEparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3330 /* flat_load_dwordx4 */, MCK_GLCparseFlatOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3330 /* flat_load_dwordx4 */, MCK_SLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3330 /* flat_load_dwordx4 */, MCK_TFEparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3348 /* flat_load_sbyte */, MCK_GLCparseFlatOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3348 /* flat_load_sbyte */, MCK_SLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3348 /* flat_load_sbyte */, MCK_TFEparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3364 /* flat_load_sshort */, MCK_GLCparseFlatOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3364 /* flat_load_sshort */, MCK_SLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3364 /* flat_load_sshort */, MCK_TFEparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3381 /* flat_load_ubyte */, MCK_GLCparseFlatOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3381 /* flat_load_ubyte */, MCK_SLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3381 /* flat_load_ubyte */, MCK_TFEparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3397 /* flat_load_ushort */, MCK_GLCparseFlatOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3397 /* flat_load_ushort */, MCK_SLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3397 /* flat_load_ushort */, MCK_TFEparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3414 /* flat_store_byte */, MCK_GLCparseFlatOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3414 /* flat_store_byte */, MCK_SLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3414 /* flat_store_byte */, MCK_TFEparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3430 /* flat_store_dword */, MCK_GLCparseFlatOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3430 /* flat_store_dword */, MCK_SLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3430 /* flat_store_dword */, MCK_TFEparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3447 /* flat_store_dwordx2 */, MCK_GLCparseFlatOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3447 /* flat_store_dwordx2 */, MCK_SLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3447 /* flat_store_dwordx2 */, MCK_TFEparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3466 /* flat_store_dwordx3 */, MCK_GLCparseFlatOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3466 /* flat_store_dwordx3 */, MCK_SLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3466 /* flat_store_dwordx3 */, MCK_TFEparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3485 /* flat_store_dwordx4 */, MCK_GLCparseFlatOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3485 /* flat_store_dwordx4 */, MCK_SLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3485 /* flat_store_dwordx4 */, MCK_TFEparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3504 /* flat_store_short */, MCK_GLCparseFlatOptionalOps, 4 /* 2 */ },
  { Feature_isCIVI, 3504 /* flat_store_short */, MCK_SLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3504 /* flat_store_short */, MCK_TFEparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 5109 /* s_branch */, MCK_SoppBrTarget, 1 /* 0 */ },
  { Feature_isGCN, 5249 /* s_cbranch_execnz */, MCK_SoppBrTarget, 1 /* 0 */ },
  { Feature_isGCN, 5266 /* s_cbranch_execz */, MCK_SoppBrTarget, 1 /* 0 */ },
  { Feature_isGCN, 5331 /* s_cbranch_scc0 */, MCK_SoppBrTarget, 1 /* 0 */ },
  { Feature_isGCN, 5346 /* s_cbranch_scc1 */, MCK_SoppBrTarget, 1 /* 0 */ },
  { Feature_isGCN, 5361 /* s_cbranch_vccnz */, MCK_SoppBrTarget, 1 /* 0 */ },
  { Feature_isGCN, 5377 /* s_cbranch_vccz */, MCK_SoppBrTarget, 1 /* 0 */ },
  { Feature_isGCN, 6681 /* s_waitcnt */, MCK_SWaitCnt, 1 /* 0 */ },
  { Feature_isGCN|Feature_isSICI, 6925 /* v_add_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 6925 /* v_add_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 6925 /* v_add_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 6925 /* v_add_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 6935 /* v_add_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 6935 /* v_add_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 6935 /* v_add_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 6935 /* v_add_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7159 /* v_ceil_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 7159 /* v_ceil_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 7159 /* v_ceil_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 7159 /* v_ceil_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isSICI, 7170 /* v_ceil_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isCIVI|Feature_isSICI, 7170 /* v_ceil_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isVI, 7170 /* v_ceil_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isCIVI|Feature_isVI, 7170 /* v_ceil_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 7263 /* v_cmp_eq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 7263 /* v_cmp_eq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7263 /* v_cmp_eq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 7263 /* v_cmp_eq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7293 /* v_cmp_eq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 7293 /* v_cmp_eq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7293 /* v_cmp_eq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 7293 /* v_cmp_eq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7443 /* v_cmp_f_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 7443 /* v_cmp_f_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7443 /* v_cmp_f_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 7443 /* v_cmp_f_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7471 /* v_cmp_f_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 7471 /* v_cmp_f_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7471 /* v_cmp_f_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 7471 /* v_cmp_f_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7611 /* v_cmp_ge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 7611 /* v_cmp_ge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7611 /* v_cmp_ge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 7611 /* v_cmp_ge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7641 /* v_cmp_ge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 7641 /* v_cmp_ge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7641 /* v_cmp_ge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 7641 /* v_cmp_ge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7791 /* v_cmp_gt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 7791 /* v_cmp_gt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7791 /* v_cmp_gt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 7791 /* v_cmp_gt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7821 /* v_cmp_gt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 7821 /* v_cmp_gt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7821 /* v_cmp_gt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 7821 /* v_cmp_gt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7971 /* v_cmp_le_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 7971 /* v_cmp_le_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7971 /* v_cmp_le_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 7971 /* v_cmp_le_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8001 /* v_cmp_le_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8001 /* v_cmp_le_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8001 /* v_cmp_le_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8001 /* v_cmp_le_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8151 /* v_cmp_lg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8151 /* v_cmp_lg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8151 /* v_cmp_lg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8151 /* v_cmp_lg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8181 /* v_cmp_lg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8181 /* v_cmp_lg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8181 /* v_cmp_lg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8181 /* v_cmp_lg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8211 /* v_cmp_lt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8211 /* v_cmp_lt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8211 /* v_cmp_lt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8211 /* v_cmp_lt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8241 /* v_cmp_lt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8241 /* v_cmp_lt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8241 /* v_cmp_lt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8241 /* v_cmp_lt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8511 /* v_cmp_neq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8511 /* v_cmp_neq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8511 /* v_cmp_neq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8511 /* v_cmp_neq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8543 /* v_cmp_neq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8543 /* v_cmp_neq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8543 /* v_cmp_neq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8543 /* v_cmp_neq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8575 /* v_cmp_nge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8575 /* v_cmp_nge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8575 /* v_cmp_nge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8575 /* v_cmp_nge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8607 /* v_cmp_nge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8607 /* v_cmp_nge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8607 /* v_cmp_nge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8607 /* v_cmp_nge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8639 /* v_cmp_ngt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8639 /* v_cmp_ngt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8639 /* v_cmp_ngt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8639 /* v_cmp_ngt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8671 /* v_cmp_ngt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8671 /* v_cmp_ngt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8671 /* v_cmp_ngt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8671 /* v_cmp_ngt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8703 /* v_cmp_nle_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8703 /* v_cmp_nle_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8703 /* v_cmp_nle_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8703 /* v_cmp_nle_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8735 /* v_cmp_nle_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8735 /* v_cmp_nle_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8735 /* v_cmp_nle_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8735 /* v_cmp_nle_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8767 /* v_cmp_nlg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8767 /* v_cmp_nlg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8767 /* v_cmp_nlg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8767 /* v_cmp_nlg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8799 /* v_cmp_nlg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8799 /* v_cmp_nlg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8799 /* v_cmp_nlg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8799 /* v_cmp_nlg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8831 /* v_cmp_nlt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8831 /* v_cmp_nlt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8831 /* v_cmp_nlt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8831 /* v_cmp_nlt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8863 /* v_cmp_nlt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8863 /* v_cmp_nlt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8863 /* v_cmp_nlt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8863 /* v_cmp_nlt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8895 /* v_cmp_o_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8895 /* v_cmp_o_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8895 /* v_cmp_o_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8895 /* v_cmp_o_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8923 /* v_cmp_o_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 8923 /* v_cmp_o_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8923 /* v_cmp_o_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 8923 /* v_cmp_o_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 9063 /* v_cmp_tru_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 9063 /* v_cmp_tru_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 9063 /* v_cmp_tru_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 9063 /* v_cmp_tru_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 9095 /* v_cmp_tru_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 9095 /* v_cmp_tru_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 9095 /* v_cmp_tru_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 9095 /* v_cmp_tru_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 9127 /* v_cmp_u_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 9127 /* v_cmp_u_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 9127 /* v_cmp_u_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 9127 /* v_cmp_u_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 9155 /* v_cmp_u_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 9155 /* v_cmp_u_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 9155 /* v_cmp_u_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 9155 /* v_cmp_u_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9183 /* v_cmps_eq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9183 /* v_cmps_eq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9183 /* v_cmps_eq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9183 /* v_cmps_eq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9215 /* v_cmps_eq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9215 /* v_cmps_eq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9215 /* v_cmps_eq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9215 /* v_cmps_eq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9247 /* v_cmps_f_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9247 /* v_cmps_f_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9247 /* v_cmps_f_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9247 /* v_cmps_f_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9277 /* v_cmps_f_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9277 /* v_cmps_f_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9277 /* v_cmps_f_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9277 /* v_cmps_f_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9307 /* v_cmps_ge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9307 /* v_cmps_ge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9307 /* v_cmps_ge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9307 /* v_cmps_ge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9339 /* v_cmps_ge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9339 /* v_cmps_ge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9339 /* v_cmps_ge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9339 /* v_cmps_ge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9371 /* v_cmps_gt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9371 /* v_cmps_gt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9371 /* v_cmps_gt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9371 /* v_cmps_gt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9403 /* v_cmps_gt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9403 /* v_cmps_gt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9403 /* v_cmps_gt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9403 /* v_cmps_gt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9435 /* v_cmps_le_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9435 /* v_cmps_le_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9435 /* v_cmps_le_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9435 /* v_cmps_le_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9467 /* v_cmps_le_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9467 /* v_cmps_le_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9467 /* v_cmps_le_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9467 /* v_cmps_le_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9499 /* v_cmps_lg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9499 /* v_cmps_lg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9499 /* v_cmps_lg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9499 /* v_cmps_lg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9531 /* v_cmps_lg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9531 /* v_cmps_lg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9531 /* v_cmps_lg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9531 /* v_cmps_lg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9563 /* v_cmps_lt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9563 /* v_cmps_lt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9563 /* v_cmps_lt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9563 /* v_cmps_lt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9595 /* v_cmps_lt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9595 /* v_cmps_lt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9595 /* v_cmps_lt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9595 /* v_cmps_lt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9627 /* v_cmps_neq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9627 /* v_cmps_neq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9627 /* v_cmps_neq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9627 /* v_cmps_neq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9661 /* v_cmps_neq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9661 /* v_cmps_neq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9661 /* v_cmps_neq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9661 /* v_cmps_neq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9695 /* v_cmps_nge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9695 /* v_cmps_nge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9695 /* v_cmps_nge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9695 /* v_cmps_nge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9729 /* v_cmps_nge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9729 /* v_cmps_nge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9729 /* v_cmps_nge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9729 /* v_cmps_nge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9763 /* v_cmps_ngt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9763 /* v_cmps_ngt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9763 /* v_cmps_ngt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9763 /* v_cmps_ngt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9797 /* v_cmps_ngt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9797 /* v_cmps_ngt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9797 /* v_cmps_ngt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9797 /* v_cmps_ngt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9831 /* v_cmps_nle_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9831 /* v_cmps_nle_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9831 /* v_cmps_nle_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9831 /* v_cmps_nle_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9865 /* v_cmps_nle_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9865 /* v_cmps_nle_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9865 /* v_cmps_nle_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9865 /* v_cmps_nle_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9899 /* v_cmps_nlg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9899 /* v_cmps_nlg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9899 /* v_cmps_nlg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9899 /* v_cmps_nlg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9933 /* v_cmps_nlg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9933 /* v_cmps_nlg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9933 /* v_cmps_nlg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9933 /* v_cmps_nlg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9967 /* v_cmps_nlt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 9967 /* v_cmps_nlt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9967 /* v_cmps_nlt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 9967 /* v_cmps_nlt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10001 /* v_cmps_nlt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10001 /* v_cmps_nlt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10001 /* v_cmps_nlt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10001 /* v_cmps_nlt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10035 /* v_cmps_o_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10035 /* v_cmps_o_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10035 /* v_cmps_o_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10035 /* v_cmps_o_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10065 /* v_cmps_o_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10065 /* v_cmps_o_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10065 /* v_cmps_o_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10065 /* v_cmps_o_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10095 /* v_cmps_tru_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10095 /* v_cmps_tru_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10095 /* v_cmps_tru_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10095 /* v_cmps_tru_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10129 /* v_cmps_tru_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10129 /* v_cmps_tru_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10129 /* v_cmps_tru_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10129 /* v_cmps_tru_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10163 /* v_cmps_u_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10163 /* v_cmps_u_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10163 /* v_cmps_u_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10163 /* v_cmps_u_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10193 /* v_cmps_u_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10193 /* v_cmps_u_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10193 /* v_cmps_u_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10193 /* v_cmps_u_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10223 /* v_cmpsx_eq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10223 /* v_cmpsx_eq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10223 /* v_cmpsx_eq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10223 /* v_cmpsx_eq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10257 /* v_cmpsx_eq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10257 /* v_cmpsx_eq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10257 /* v_cmpsx_eq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10257 /* v_cmpsx_eq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10291 /* v_cmpsx_f_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10291 /* v_cmpsx_f_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10291 /* v_cmpsx_f_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10291 /* v_cmpsx_f_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10323 /* v_cmpsx_f_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10323 /* v_cmpsx_f_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10323 /* v_cmpsx_f_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10323 /* v_cmpsx_f_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10355 /* v_cmpsx_ge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10355 /* v_cmpsx_ge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10355 /* v_cmpsx_ge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10355 /* v_cmpsx_ge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10389 /* v_cmpsx_ge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10389 /* v_cmpsx_ge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10389 /* v_cmpsx_ge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10389 /* v_cmpsx_ge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10423 /* v_cmpsx_gt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10423 /* v_cmpsx_gt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10423 /* v_cmpsx_gt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10423 /* v_cmpsx_gt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10457 /* v_cmpsx_gt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10457 /* v_cmpsx_gt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10457 /* v_cmpsx_gt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10457 /* v_cmpsx_gt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10491 /* v_cmpsx_le_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10491 /* v_cmpsx_le_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10491 /* v_cmpsx_le_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10491 /* v_cmpsx_le_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10525 /* v_cmpsx_le_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10525 /* v_cmpsx_le_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10525 /* v_cmpsx_le_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10525 /* v_cmpsx_le_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10559 /* v_cmpsx_lg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10559 /* v_cmpsx_lg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10559 /* v_cmpsx_lg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10559 /* v_cmpsx_lg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10593 /* v_cmpsx_lg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10593 /* v_cmpsx_lg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10593 /* v_cmpsx_lg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10593 /* v_cmpsx_lg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10627 /* v_cmpsx_lt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10627 /* v_cmpsx_lt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10627 /* v_cmpsx_lt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10627 /* v_cmpsx_lt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10661 /* v_cmpsx_lt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10661 /* v_cmpsx_lt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10661 /* v_cmpsx_lt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10661 /* v_cmpsx_lt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10695 /* v_cmpsx_neq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10695 /* v_cmpsx_neq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10695 /* v_cmpsx_neq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10695 /* v_cmpsx_neq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10731 /* v_cmpsx_neq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10731 /* v_cmpsx_neq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10731 /* v_cmpsx_neq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10731 /* v_cmpsx_neq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10767 /* v_cmpsx_nge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10767 /* v_cmpsx_nge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10767 /* v_cmpsx_nge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10767 /* v_cmpsx_nge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10803 /* v_cmpsx_nge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10803 /* v_cmpsx_nge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10803 /* v_cmpsx_nge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10803 /* v_cmpsx_nge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10839 /* v_cmpsx_ngt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10839 /* v_cmpsx_ngt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10839 /* v_cmpsx_ngt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10839 /* v_cmpsx_ngt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10875 /* v_cmpsx_ngt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10875 /* v_cmpsx_ngt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10875 /* v_cmpsx_ngt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10875 /* v_cmpsx_ngt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10911 /* v_cmpsx_nle_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10911 /* v_cmpsx_nle_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10911 /* v_cmpsx_nle_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10911 /* v_cmpsx_nle_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10947 /* v_cmpsx_nle_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10947 /* v_cmpsx_nle_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10947 /* v_cmpsx_nle_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10947 /* v_cmpsx_nle_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10983 /* v_cmpsx_nlg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 10983 /* v_cmpsx_nlg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10983 /* v_cmpsx_nlg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 10983 /* v_cmpsx_nlg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11019 /* v_cmpsx_nlg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 11019 /* v_cmpsx_nlg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11019 /* v_cmpsx_nlg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 11019 /* v_cmpsx_nlg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11055 /* v_cmpsx_nlt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 11055 /* v_cmpsx_nlt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11055 /* v_cmpsx_nlt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 11055 /* v_cmpsx_nlt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11091 /* v_cmpsx_nlt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 11091 /* v_cmpsx_nlt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11091 /* v_cmpsx_nlt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 11091 /* v_cmpsx_nlt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11127 /* v_cmpsx_o_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 11127 /* v_cmpsx_o_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11127 /* v_cmpsx_o_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 11127 /* v_cmpsx_o_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11159 /* v_cmpsx_o_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 11159 /* v_cmpsx_o_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11159 /* v_cmpsx_o_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 11159 /* v_cmpsx_o_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11191 /* v_cmpsx_tru_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 11191 /* v_cmpsx_tru_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11191 /* v_cmpsx_tru_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 11191 /* v_cmpsx_tru_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11227 /* v_cmpsx_tru_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 11227 /* v_cmpsx_tru_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11227 /* v_cmpsx_tru_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 11227 /* v_cmpsx_tru_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11263 /* v_cmpsx_u_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 11263 /* v_cmpsx_u_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11263 /* v_cmpsx_u_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 11263 /* v_cmpsx_u_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11295 /* v_cmpsx_u_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 11295 /* v_cmpsx_u_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11295 /* v_cmpsx_u_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isVI, 11295 /* v_cmpsx_u_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 11403 /* v_cmpx_eq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 11403 /* v_cmpx_eq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 11403 /* v_cmpx_eq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 11403 /* v_cmpx_eq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 11435 /* v_cmpx_eq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 11435 /* v_cmpx_eq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 11435 /* v_cmpx_eq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 11435 /* v_cmpx_eq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 11595 /* v_cmpx_f_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 11595 /* v_cmpx_f_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 11595 /* v_cmpx_f_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 11595 /* v_cmpx_f_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 11625 /* v_cmpx_f_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 11625 /* v_cmpx_f_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 11625 /* v_cmpx_f_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 11625 /* v_cmpx_f_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 11775 /* v_cmpx_ge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 11775 /* v_cmpx_ge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 11775 /* v_cmpx_ge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 11775 /* v_cmpx_ge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 11807 /* v_cmpx_ge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 11807 /* v_cmpx_ge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 11807 /* v_cmpx_ge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 11807 /* v_cmpx_ge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 11967 /* v_cmpx_gt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 11967 /* v_cmpx_gt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 11967 /* v_cmpx_gt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 11967 /* v_cmpx_gt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 11999 /* v_cmpx_gt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 11999 /* v_cmpx_gt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 11999 /* v_cmpx_gt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 11999 /* v_cmpx_gt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12159 /* v_cmpx_le_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 12159 /* v_cmpx_le_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12159 /* v_cmpx_le_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 12159 /* v_cmpx_le_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12191 /* v_cmpx_le_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 12191 /* v_cmpx_le_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12191 /* v_cmpx_le_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 12191 /* v_cmpx_le_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12351 /* v_cmpx_lg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 12351 /* v_cmpx_lg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12351 /* v_cmpx_lg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 12351 /* v_cmpx_lg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12383 /* v_cmpx_lg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 12383 /* v_cmpx_lg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12383 /* v_cmpx_lg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 12383 /* v_cmpx_lg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12415 /* v_cmpx_lt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 12415 /* v_cmpx_lt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12415 /* v_cmpx_lt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 12415 /* v_cmpx_lt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12447 /* v_cmpx_lt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 12447 /* v_cmpx_lt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12447 /* v_cmpx_lt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 12447 /* v_cmpx_lt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12735 /* v_cmpx_neq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 12735 /* v_cmpx_neq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12735 /* v_cmpx_neq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 12735 /* v_cmpx_neq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12769 /* v_cmpx_neq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 12769 /* v_cmpx_neq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12769 /* v_cmpx_neq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 12769 /* v_cmpx_neq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12803 /* v_cmpx_nge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 12803 /* v_cmpx_nge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12803 /* v_cmpx_nge_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 12803 /* v_cmpx_nge_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12837 /* v_cmpx_nge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 12837 /* v_cmpx_nge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12837 /* v_cmpx_nge_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 12837 /* v_cmpx_nge_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12871 /* v_cmpx_ngt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 12871 /* v_cmpx_ngt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12871 /* v_cmpx_ngt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 12871 /* v_cmpx_ngt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12905 /* v_cmpx_ngt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 12905 /* v_cmpx_ngt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12905 /* v_cmpx_ngt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 12905 /* v_cmpx_ngt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12939 /* v_cmpx_nle_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 12939 /* v_cmpx_nle_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12939 /* v_cmpx_nle_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 12939 /* v_cmpx_nle_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12973 /* v_cmpx_nle_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 12973 /* v_cmpx_nle_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12973 /* v_cmpx_nle_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 12973 /* v_cmpx_nle_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13007 /* v_cmpx_nlg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13007 /* v_cmpx_nlg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13007 /* v_cmpx_nlg_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13007 /* v_cmpx_nlg_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13041 /* v_cmpx_nlg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13041 /* v_cmpx_nlg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13041 /* v_cmpx_nlg_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13041 /* v_cmpx_nlg_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13075 /* v_cmpx_nlt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13075 /* v_cmpx_nlt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13075 /* v_cmpx_nlt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13075 /* v_cmpx_nlt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13109 /* v_cmpx_nlt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13109 /* v_cmpx_nlt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13109 /* v_cmpx_nlt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13109 /* v_cmpx_nlt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13143 /* v_cmpx_o_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13143 /* v_cmpx_o_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13143 /* v_cmpx_o_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13143 /* v_cmpx_o_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13173 /* v_cmpx_o_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13173 /* v_cmpx_o_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13173 /* v_cmpx_o_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13173 /* v_cmpx_o_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13323 /* v_cmpx_tru_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13323 /* v_cmpx_tru_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13323 /* v_cmpx_tru_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13323 /* v_cmpx_tru_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13357 /* v_cmpx_tru_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13357 /* v_cmpx_tru_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13357 /* v_cmpx_tru_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13357 /* v_cmpx_tru_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13391 /* v_cmpx_u_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13391 /* v_cmpx_u_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13391 /* v_cmpx_u_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13391 /* v_cmpx_u_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13421 /* v_cmpx_u_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13421 /* v_cmpx_u_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13421 /* v_cmpx_u_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13421 /* v_cmpx_u_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13475 /* v_cos_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 13475 /* v_cos_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13475 /* v_cos_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 13475 /* v_cos_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13485 /* v_cubeid_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13485 /* v_cubeid_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13485 /* v_cubeid_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13485 /* v_cubeid_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13498 /* v_cubema_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13498 /* v_cubema_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13498 /* v_cubema_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13498 /* v_cubema_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13511 /* v_cubesc_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13511 /* v_cubesc_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13511 /* v_cubesc_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13511 /* v_cubesc_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13524 /* v_cubetc_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13524 /* v_cubetc_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13524 /* v_cubetc_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13524 /* v_cubetc_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13537 /* v_cvt_f16_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 13537 /* v_cvt_f16_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13537 /* v_cvt_f16_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 13537 /* v_cvt_f16_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13593 /* v_cvt_f32_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 13593 /* v_cvt_f32_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13593 /* v_cvt_f32_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 13593 /* v_cvt_f32_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13703 /* v_cvt_f64_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 13703 /* v_cvt_f64_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13703 /* v_cvt_f64_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 13703 /* v_cvt_f64_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13745 /* v_cvt_flr_i32_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 13745 /* v_cvt_flr_i32_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13745 /* v_cvt_flr_i32_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 13745 /* v_cvt_flr_i32_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13777 /* v_cvt_i32_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 13777 /* v_cvt_i32_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13777 /* v_cvt_i32_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 13777 /* v_cvt_i32_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13791 /* v_cvt_i32_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 13791 /* v_cvt_i32_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13791 /* v_cvt_i32_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 13791 /* v_cvt_i32_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13856 /* v_cvt_pkaccum_u8_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13856 /* v_cvt_pkaccum_u8_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13856 /* v_cvt_pkaccum_u8_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13856 /* v_cvt_pkaccum_u8_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13877 /* v_cvt_pknorm_i16_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13877 /* v_cvt_pknorm_i16_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13877 /* v_cvt_pknorm_i16_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13877 /* v_cvt_pknorm_i16_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13898 /* v_cvt_pknorm_u16_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13898 /* v_cvt_pknorm_u16_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13898 /* v_cvt_pknorm_u16_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13898 /* v_cvt_pknorm_u16_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13919 /* v_cvt_pkrtz_f16_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13919 /* v_cvt_pkrtz_f16_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13919 /* v_cvt_pkrtz_f16_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13919 /* v_cvt_pkrtz_f16_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13939 /* v_cvt_rpi_i32_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 13939 /* v_cvt_rpi_i32_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13939 /* v_cvt_rpi_i32_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 13939 /* v_cvt_rpi_i32_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13971 /* v_cvt_u32_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 13971 /* v_cvt_u32_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13971 /* v_cvt_u32_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 13971 /* v_cvt_u32_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13985 /* v_cvt_u32_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 13985 /* v_cvt_u32_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13985 /* v_cvt_u32_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 13985 /* v_cvt_u32_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13999 /* v_div_fixup_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13999 /* v_div_fixup_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13999 /* v_div_fixup_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13999 /* v_div_fixup_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14015 /* v_div_fixup_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14015 /* v_div_fixup_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14015 /* v_div_fixup_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14015 /* v_div_fixup_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14031 /* v_div_fmas_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14031 /* v_div_fmas_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14031 /* v_div_fmas_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14031 /* v_div_fmas_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14046 /* v_div_fmas_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14046 /* v_div_fmas_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14046 /* v_div_fmas_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14046 /* v_div_fmas_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14061 /* v_div_scale_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14061 /* v_div_scale_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 14061 /* v_div_scale_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14061 /* v_div_scale_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 14077 /* v_div_scale_f64 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14077 /* v_div_scale_f64 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 14077 /* v_div_scale_f64 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14077 /* v_div_scale_f64 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 14103 /* v_exp_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 14103 /* v_exp_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14103 /* v_exp_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 14103 /* v_exp_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isSICI, 14113 /* v_exp_legacy_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isCIVI|Feature_isSICI, 14113 /* v_exp_legacy_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isVI, 14113 /* v_exp_legacy_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isCIVI|Feature_isVI, 14113 /* v_exp_legacy_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14175 /* v_floor_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 14175 /* v_floor_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14175 /* v_floor_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 14175 /* v_floor_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isSICI, 14187 /* v_floor_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isCIVI|Feature_isSICI, 14187 /* v_floor_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isVI, 14187 /* v_floor_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isCIVI|Feature_isVI, 14187 /* v_floor_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14199 /* v_fma_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14199 /* v_fma_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14199 /* v_fma_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14199 /* v_fma_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14209 /* v_fma_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14209 /* v_fma_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14209 /* v_fma_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14209 /* v_fma_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14231 /* v_fract_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 14231 /* v_fract_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14231 /* v_fract_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 14231 /* v_fract_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14243 /* v_fract_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 14243 /* v_fract_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14243 /* v_fract_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 14243 /* v_fract_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14275 /* v_frexp_exp_i32_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 14275 /* v_frexp_exp_i32_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14275 /* v_frexp_exp_i32_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 14275 /* v_frexp_exp_i32_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14295 /* v_frexp_exp_i32_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 14295 /* v_frexp_exp_i32_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14295 /* v_frexp_exp_i32_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 14295 /* v_frexp_exp_i32_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14332 /* v_frexp_mant_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 14332 /* v_frexp_mant_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14332 /* v_frexp_mant_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 14332 /* v_frexp_mant_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14349 /* v_frexp_mant_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 14349 /* v_frexp_mant_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14349 /* v_frexp_mant_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 14349 /* v_frexp_mant_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14427 /* v_ldexp_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14427 /* v_ldexp_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14427 /* v_ldexp_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14427 /* v_ldexp_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14439 /* v_ldexp_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14439 /* v_ldexp_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14439 /* v_ldexp_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14439 /* v_ldexp_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 14451 /* v_log_clamp_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isSICI|Feature_isSICI, 14451 /* v_log_clamp_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14477 /* v_log_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 14477 /* v_log_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14477 /* v_log_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 14477 /* v_log_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isSICI, 14487 /* v_log_legacy_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isCIVI|Feature_isSICI, 14487 /* v_log_legacy_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isVI, 14487 /* v_log_legacy_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isCIVI|Feature_isVI, 14487 /* v_log_legacy_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14642 /* v_mac_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14642 /* v_mac_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14642 /* v_mac_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14642 /* v_mac_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 14652 /* v_mac_legacy_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 14652 /* v_mac_legacy_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14669 /* v_mad_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14669 /* v_mad_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14669 /* v_mad_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14669 /* v_mad_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14707 /* v_mad_legacy_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14707 /* v_mad_legacy_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14707 /* v_mad_legacy_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14707 /* v_mad_legacy_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14800 /* v_max3_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14800 /* v_max3_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14800 /* v_max3_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14800 /* v_max3_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14843 /* v_max_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14843 /* v_max_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14843 /* v_max_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14843 /* v_max_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14853 /* v_max_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14853 /* v_max_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14853 /* v_max_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14853 /* v_max_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 14883 /* v_max_legacy_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 14883 /* v_max_legacy_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14958 /* v_med3_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14958 /* v_med3_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14958 /* v_med3_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14958 /* v_med3_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14991 /* v_min3_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14991 /* v_min3_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14991 /* v_min3_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14991 /* v_min3_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 15034 /* v_min_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15034 /* v_min_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15034 /* v_min_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15034 /* v_min_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15044 /* v_min_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15044 /* v_min_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15044 /* v_min_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15044 /* v_min_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 15074 /* v_min_legacy_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 15074 /* v_min_legacy_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15218 /* v_mul_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15218 /* v_mul_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15218 /* v_mul_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15218 /* v_mul_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15228 /* v_mul_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15228 /* v_mul_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15228 /* v_mul_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15228 /* v_mul_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15312 /* v_mul_legacy_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15312 /* v_mul_legacy_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15312 /* v_mul_legacy_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15312 /* v_mul_legacy_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 15382 /* v_mullit_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 15382 /* v_mullit_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 15382 /* v_mullit_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 15382 /* v_mullit_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 15437 /* v_rcp_clamp_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isSICI|Feature_isSICI, 15437 /* v_rcp_clamp_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 15453 /* v_rcp_clamp_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isSICI|Feature_isSICI, 15453 /* v_rcp_clamp_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15479 /* v_rcp_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 15479 /* v_rcp_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15479 /* v_rcp_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 15479 /* v_rcp_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15489 /* v_rcp_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 15489 /* v_rcp_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15489 /* v_rcp_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 15489 /* v_rcp_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15499 /* v_rcp_iflag_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 15499 /* v_rcp_iflag_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15499 /* v_rcp_iflag_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 15499 /* v_rcp_iflag_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 15515 /* v_rcp_legacy_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isSICI|Feature_isSICI, 15515 /* v_rcp_legacy_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15579 /* v_rndne_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 15579 /* v_rndne_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15579 /* v_rndne_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 15579 /* v_rndne_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isSICI, 15591 /* v_rndne_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isCIVI|Feature_isSICI, 15591 /* v_rndne_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isVI, 15591 /* v_rndne_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isCIVI|Feature_isVI, 15591 /* v_rndne_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 15603 /* v_rsq_clamp_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isSICI|Feature_isSICI, 15603 /* v_rsq_clamp_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 15619 /* v_rsq_clamp_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isSICI|Feature_isSICI, 15619 /* v_rsq_clamp_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15645 /* v_rsq_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 15645 /* v_rsq_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15645 /* v_rsq_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 15645 /* v_rsq_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15655 /* v_rsq_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 15655 /* v_rsq_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15655 /* v_rsq_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 15655 /* v_rsq_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 15665 /* v_rsq_legacy_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isSICI|Feature_isSICI, 15665 /* v_rsq_legacy_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15702 /* v_sin_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 15702 /* v_sin_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15702 /* v_sin_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 15702 /* v_sin_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15723 /* v_sqrt_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 15723 /* v_sqrt_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15723 /* v_sqrt_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 15723 /* v_sqrt_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15734 /* v_sqrt_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 15734 /* v_sqrt_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15734 /* v_sqrt_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 15734 /* v_sqrt_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15755 /* v_sub_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15755 /* v_sub_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15755 /* v_sub_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15755 /* v_sub_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15823 /* v_subrev_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15823 /* v_subrev_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15823 /* v_subrev_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15823 /* v_subrev_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15862 /* v_trig_preop_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15862 /* v_trig_preop_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15862 /* v_trig_preop_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15862 /* v_trig_preop_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15891 /* v_trunc_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isSICI, 15891 /* v_trunc_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15891 /* v_trunc_f32 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isGCN|Feature_isVI, 15891 /* v_trunc_f32 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isSICI, 15903 /* v_trunc_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isCIVI|Feature_isSICI, 15903 /* v_trunc_f64 */, MCK_OMod, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isVI, 15903 /* v_trunc_f64 */, MCK_Clamp, 4 /* 2 */ },
  { Feature_isCIVI|Feature_isVI, 15903 /* v_trunc_f64 */, MCK_OMod, 8 /* 3 */ },
};

AMDGPUAsmParser::OperandMatchResultTy AMDGPUAsmParser::
tryCustomParseOperand(OperandVector &Operands,
                      unsigned MCK) {

  switch(MCK) {
  case MCK_Clamp:
    return parseVOP3OptionalOps(Operands);
  case MCK_DSOffset1:
    return parseDSOff01OptionalOps(Operands);
  case MCK_DSOffsetparseDSOffsetOptional:
    return parseDSOffsetOptional(Operands);
  case MCK_DSOffsetparseDSOptionalOps:
    return parseDSOptionalOps(Operands);
  case MCK_GDSparseDSOff01OptionalOps:
    return parseDSOff01OptionalOps(Operands);
  case MCK_GDSparseDSOptionalOps:
    return parseDSOptionalOps(Operands);
  case MCK_GLCparseFlatOptionalOps:
    return parseFlatOptionalOps(Operands);
  case MCK_GLCparseMubufOptionalOps:
    return parseMubufOptionalOps(Operands);
  case MCK_MubufOffset:
    return parseMubufOptionalOps(Operands);
  case MCK_OMod:
    return parseVOP3OptionalOps(Operands);
  case MCK_SLCparseFlatAtomicOptionalOps:
    return parseFlatAtomicOptionalOps(Operands);
  case MCK_SLCparseFlatOptionalOps:
    return parseFlatOptionalOps(Operands);
  case MCK_SLCparseMubufOptionalOps:
    return parseMubufOptionalOps(Operands);
  case MCK_SWaitCnt:
    return parseSWaitCntOps(Operands);
  case MCK_SoppBrTarget:
    return parseSOppBrTarget(Operands);
  case MCK_TFEparseFlatAtomicOptionalOps:
    return parseFlatAtomicOptionalOps(Operands);
  case MCK_TFEparseFlatOptionalOps:
    return parseFlatOptionalOps(Operands);
  case MCK_TFEparseMubufOptionalOps:
    return parseMubufOptionalOps(Operands);
  default:
    return MatchOperand_NoMatch;
  }
  return MatchOperand_NoMatch;
}

AMDGPUAsmParser::OperandMatchResultTy AMDGPUAsmParser::
MatchOperandParserImpl(OperandVector &Operands,
                       StringRef Mnemonic) {
  // Get the current feature set.
  uint64_t AvailableFeatures = getAvailableFeatures();

  // Get the next operand index.
  unsigned NextOpNum = Operands.size()-1;
  // Search the table.
  std::pair<const OperandMatchEntry*, const OperandMatchEntry*> MnemonicRange =
    std::equal_range(OperandMatchTable, OperandMatchTable+2428, Mnemonic,
                     LessOpcodeOperand());

  if (MnemonicRange.first == MnemonicRange.second)
    return MatchOperand_NoMatch;

  for (const OperandMatchEntry *it = MnemonicRange.first,
       *ie = MnemonicRange.second; it != ie; ++it) {
    // equal_range guarantees that instruction mnemonic matches.
    assert(Mnemonic == it->getMnemonic());

    // check if the available features match
    if ((AvailableFeatures & it->RequiredFeatures) != it->RequiredFeatures) {
      continue;
    }

    // check if the operand in question has a custom parser.
    if (!(it->OperandMask & (1 << NextOpNum)))
      continue;

    // call custom parse method to handle the operand
    OperandMatchResultTy Result = tryCustomParseOperand(Operands, it->Class);
    if (Result != MatchOperand_NoMatch)
      return Result;
  }

  // Okay, we had no match.
  return MatchOperand_NoMatch;
}

#endif // GET_MATCHER_IMPLEMENTATION

