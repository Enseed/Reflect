/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    9394U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    9387U,	// BUNDLE
    9404U,	// LIFETIME_START
    9374U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    21662U,	// ABSQ_S_PH
    18030U,	// ABSQ_S_QB
    24847U,	// ABSQ_S_W
    134237997U,	// ADD
    18299U,	// ADDIUPC
    18299U,	// ADDIUPC_MM
    18299U,	// ADDIUPC_MMR6
    22494U,	// ADDIUR1SP_MM
    134234410U,	// ADDIUR2_MM
    8683851U,	// ADDIUS5_MM
    546842U,	// ADDIUSP_MM
    134241285U,	// ADDIU_MMR6
    134239195U,	// ADDQH_PH
    134239312U,	// ADDQH_R_PH
    134242250U,	// ADDQH_R_W
    134241853U,	// ADDQH_W
    134239269U,	// ADDQ_PH
    134239368U,	// ADDQ_S_PH
    134242555U,	// ADDQ_S_W
    134236060U,	// ADDSC
    134234735U,	// ADDS_A_B
    134236185U,	// ADDS_A_D
    134238140U,	// ADDS_A_H
    134241561U,	// ADDS_A_W
    134235203U,	// ADDS_S_B
    134237274U,	// ADDS_S_D
    134238697U,	// ADDS_S_H
    134242605U,	// ADDS_S_W
    134235418U,	// ADDS_U_B
    134237741U,	// ADDS_U_D
    134238975U,	// ADDS_U_H
    134243023U,	// ADDS_U_W
    134234575U,	// ADDU16_MM
    134235626U,	// ADDUH_QB
    134235734U,	// ADDUH_R_QB
    134241226U,	// ADDU_MMR6
    134239467U,	// ADDU_PH
    134235839U,	// ADDU_QB
    134239412U,	// ADDU_S_PH
    134235780U,	// ADDU_S_QB
    134234984U,	// ADDVI_B
    134236705U,	// ADDVI_D
    134238356U,	// ADDVI_H
    134241986U,	// ADDVI_W
    134235496U,	// ADDV_B
    134237841U,	// ADDV_D
    134239053U,	// ADDV_H
    134243123U,	// ADDV_W
    134236099U,	// ADDWC
    134234717U,	// ADD_A_B
    134236166U,	// ADD_A_D
    134238122U,	// ADD_A_H
    134241542U,	// ADD_A_W
    134237997U,	// ADD_MM
    134237997U,	// ADD_MMR6
    134239687U,	// ADDi
    134239687U,	// ADDi_MM
    134241285U,	// ADDiu
    134241285U,	// ADDiu_MM
    134241226U,	// ADDu
    134241226U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    134240125U,	// ALIGN
    134240125U,	// ALIGN_MMR6
    18291U,	// ALUIPC
    18291U,	// ALUIPC_MMR6
    134238019U,	// AND
    9224538U,	// AND16_MM
    134238019U,	// AND64
    134234471U,	// ANDI16_MM
    134234843U,	// ANDI_B
    134239693U,	// ANDI_MMR6
    134238019U,	// AND_MM
    134238019U,	// AND_MMR6
    134241386U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    134239693U,	// ANDi
    134239693U,	// ANDi64
    134239693U,	// ANDi_MM
    134238033U,	// APPEND
    134235097U,	// ASUB_S_B
    134237104U,	// ASUB_S_D
    134238529U,	// ASUB_S_H
    134242385U,	// ASUB_S_W
    134235312U,	// ASUB_U_B
    134237571U,	// ASUB_U_D
    134238817U,	// ASUB_U_H
    134242853U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    134239797U,	// AUI
    18284U,	// AUIPC
    18284U,	// AUIPC_MMR6
    134239797U,	// AUI_MMR6
    134235183U,	// AVER_S_B
    134237254U,	// AVER_S_D
    134238667U,	// AVER_S_H
    134242585U,	// AVER_S_W
    134235398U,	// AVER_U_B
    134237721U,	// AVER_U_D
    134238955U,	// AVER_U_H
    134243003U,	// AVER_U_W
    134235125U,	// AVE_S_B
    134237186U,	// AVE_S_D
    134238599U,	// AVE_S_H
    134242467U,	// AVE_S_W
    134235340U,	// AVE_U_B
    134237653U,	// AVE_U_D
    134238887U,	// AVE_U_H
    134242935U,	// AVE_U_W
    23557U,	// AddiuRxImmX16
    1072133U,	// AddiuRxPcImmX16
    285236229U,	// AddiuRxRxImm16
    16800773U,	// AddiuRxRxImmX16
    25189381U,	// AddiuRxRyOffMemX16
    1336341U,	// AddiuSpImm16
    549909U,	// AddiuSpImmX16
    134241226U,	// AdduRxRyRz16
    16797507U,	// AndRxRxRy16
    0U,	// B
    541013U,	// B16_MM
    134241225U,	// BADDu
    546395U,	// BAL
    542499U,	// BALC
    542499U,	// BALC_MMR6
    134240124U,	// BALIGN
    0U,	// BAL_BR
    167788585U,	// BBIT0
    167788717U,	// BBIT032
    167788710U,	// BBIT1
    167788726U,	// BBIT132
    542478U,	// BC
    25731U,	// BC1EQZ
    20371U,	// BC1F
    22220U,	// BC1FL
    20371U,	// BC1F_MM
    25715U,	// BC1NEZ
    23422U,	// BC1T
    22328U,	// BC1TL
    23422U,	// BC1T_MM
    25739U,	// BC2EQZ
    25723U,	// BC2NEZ
    134234912U,	// BCLRI_B
    134236649U,	// BCLRI_D
    134238300U,	// BCLRI_H
    134241930U,	// BCLRI_W
    134235064U,	// BCLR_B
    134237028U,	// BCLR_D
    134238496U,	// BCLR_H
    134242301U,	// BCLR_W
    542478U,	// BC_MMR6
    134240307U,	// BEQ
    134240307U,	// BEQ64
    134236049U,	// BEQC
    134240044U,	// BEQL
    16882U,	// BEQZ16_MM
    18251U,	// BEQZALC
    18251U,	// BEQZALC_MMR6
    18399U,	// BEQZC
    18399U,	// BEQZC_MM
    134240307U,	// BEQ_MM
    134238051U,	// BGE
    134235922U,	// BGEC
    134241253U,	// BGEU
    134236073U,	// BGEUC
    25498U,	// BGEZ
    25498U,	// BGEZ64
    22117U,	// BGEZAL
    18224U,	// BGEZALC
    18224U,	// BGEZALC_MMR6
    22292U,	// BGEZALL
    23391U,	// BGEZALS_MM
    22117U,	// BGEZAL_MM
    18378U,	// BGEZC
    22351U,	// BGEZL
    25498U,	// BGEZ_MM
    134241156U,	// BGT
    134241335U,	// BGTU
    25558U,	// BGTZ
    25558U,	// BGTZ64
    18260U,	// BGTZALC
    18260U,	// BGTZALC_MMR6
    18406U,	// BGTZC
    22365U,	// BGTZL
    25558U,	// BGTZ_MM
    151012101U,	// BINSLI_B
    151013838U,	// BINSLI_D
    151015489U,	// BINSLI_H
    151019119U,	// BINSLI_W
    151012248U,	// BINSL_B
    151014038U,	// BINSL_D
    151015603U,	// BINSL_H
    151019277U,	// BINSL_W
    151012162U,	// BINSRI_B
    151013883U,	// BINSRI_D
    151015534U,	// BINSRI_H
    151019164U,	// BINSRI_W
    151012296U,	// BINSR_B
    151014294U,	// BINSR_D
    151015728U,	// BINSR_H
    151019567U,	// BINSR_W
    23730U,	// BITREV
    22444U,	// BITSWAP
    22444U,	// BITSWAP_MMR6
    134238068U,	// BLE
    134241265U,	// BLEU
    25504U,	// BLEZ
    25504U,	// BLEZ64
    18233U,	// BLEZALC
    18233U,	// BLEZALC_MMR6
    18385U,	// BLEZC
    22358U,	// BLEZL
    25504U,	// BLEZ_MM
    134241167U,	// BLT
    134236067U,	// BLTC
    134241341U,	// BLTU
    134236080U,	// BLTUC
    25564U,	// BLTZ
    25564U,	// BLTZ64
    22125U,	// BLTZAL
    18269U,	// BLTZALC
    18269U,	// BLTZALC_MMR6
    22301U,	// BLTZALL
    23400U,	// BLTZALS_MM
    22125U,	// BLTZAL_MM
    18413U,	// BLTZC
    22372U,	// BLTZL
    25564U,	// BLTZ_MM
    151012217U,	// BMNZI_B
    151018659U,	// BMNZ_V
    151012209U,	// BMZI_B
    151018645U,	// BMZ_V
    134238073U,	// BNE
    134238073U,	// BNE64
    134235928U,	// BNEC
    134234851U,	// BNEGI_B
    134236597U,	// BNEGI_D
    134238248U,	// BNEGI_H
    134241878U,	// BNEGI_W
    134234819U,	// BNEG_B
    134236573U,	// BNEG_D
    134238224U,	// BNEG_H
    134241773U,	// BNEG_W
    134239942U,	// BNEL
    16874U,	// BNEZ16_MM
    18242U,	// BNEZALC
    18242U,	// BNEZALC_MMR6
    18392U,	// BNEZC
    18392U,	// BNEZC_MM
    134238073U,	// BNE_MM
    134236087U,	// BNVC
    17808U,	// BNZ_B
    20238U,	// BNZ_D
    21365U,	// BNZ_H
    23708U,	// BNZ_V
    25460U,	// BNZ_W
    134236093U,	// BOVC
    540871U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    22082U,	// BREAK
    65909U,	// BREAK16_MM
    22082U,	// BREAK_MM
    22082U,	// BREAK_MMR6
    151012076U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    151018617U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    134234966U,	// BSETI_B
    134236687U,	// BSETI_D
    134238338U,	// BSETI_H
    134241968U,	// BSETI_W
    134235280U,	// BSET_B
    134237390U,	// BSET_D
    134238785U,	// BSET_H
    134242759U,	// BSET_W
    17802U,	// BZ_B
    20222U,	// BZ_D
    21359U,	// BZ_H
    23695U,	// BZ_V
    25454U,	// BZ_W
    541283U,	// B_MM_Pseudo
    134240307U,	// BeqImm
    402678721U,	// BeqzRxImm16
    25537U,	// BeqzRxImmX16
    1327715U,	// Bimm16
    541283U,	// BimmX16
    134238073U,	// BneImm
    402678694U,	// BnezRxImm16
    25510U,	// BnezRxImmX16
    9366U,	// Break16
    1598415U,	// Bteqz16
    536893395U,	// BteqzT8CmpX16
    536892938U,	// BteqzT8CmpiX16
    536894356U,	// BteqzT8SltX16
    536892968U,	// BteqzT8SltiX16
    536894483U,	// BteqzT8SltiuX16
    536894531U,	// BteqzT8SltuX16
    549839U,	// BteqzX16
    1598388U,	// Btnez16
    671111123U,	// BtnezT8CmpX16
    671110666U,	// BtnezT8CmpiX16
    671112084U,	// BtnezT8SltX16
    671110696U,	// BtnezT8SltiX16
    671112211U,	// BtnezT8SltiuX16
    671112259U,	// BtnezT8SltuX16
    549812U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    85869U,	// CACHE
    85869U,	// CACHE_MM
    85869U,	// CACHE_MMR6
    85869U,	// CACHE_R6
    19008U,	// CEIL_L_D64
    22998U,	// CEIL_L_S
    20184U,	// CEIL_W_D32
    20184U,	// CEIL_W_D64
    20184U,	// CEIL_W_MM
    23320U,	// CEIL_W_S
    23320U,	// CEIL_W_S_MM
    134234895U,	// CEQI_B
    134236632U,	// CEQI_D
    134238283U,	// CEQI_H
    134241913U,	// CEQI_W
    134235049U,	// CEQ_B
    134236935U,	// CEQ_D
    134238474U,	// CEQ_H
    134242189U,	// CEQ_W
    16444U,	// CFC1
    16444U,	// CFC1_MM
    16973U,	// CFCMSA
    134243405U,	// CINS
    134243361U,	// CINS32
    19644U,	// CLASS_D
    23172U,	// CLASS_S
    134235134U,	// CLEI_S_B
    134237195U,	// CLEI_S_D
    134238608U,	// CLEI_S_H
    134242476U,	// CLEI_S_W
    134235349U,	// CLEI_U_B
    134237662U,	// CLEI_U_D
    134238896U,	// CLEI_U_H
    134242944U,	// CLEI_U_W
    134235116U,	// CLE_S_B
    134237177U,	// CLE_S_D
    134238590U,	// CLE_S_H
    134242458U,	// CLE_S_W
    134235331U,	// CLE_U_B
    134237644U,	// CLE_U_D
    134238878U,	// CLE_U_H
    134242926U,	// CLE_U_W
    22419U,	// CLO
    22419U,	// CLO_MM
    22419U,	// CLO_MMR6
    22419U,	// CLO_R6
    134235154U,	// CLTI_S_B
    134237215U,	// CLTI_S_D
    134238628U,	// CLTI_S_H
    134242496U,	// CLTI_S_W
    134235369U,	// CLTI_U_B
    134237682U,	// CLTI_U_D
    134238916U,	// CLTI_U_H
    134242964U,	// CLTI_U_W
    134235222U,	// CLT_S_B
    134237293U,	// CLT_S_D
    134238716U,	// CLT_S_H
    134242624U,	// CLT_S_W
    134235449U,	// CLT_U_B
    134237772U,	// CLT_U_D
    134239006U,	// CLT_U_H
    134243054U,	// CLT_U_W
    25532U,	// CLZ
    25532U,	// CLZ_MM
    25532U,	// CLZ_MMR6
    25532U,	// CLZ_R6
    134235672U,	// CMPGDU_EQ_QB
    134235577U,	// CMPGDU_LE_QB
    134235791U,	// CMPGDU_LT_QB
    134235686U,	// CMPGU_EQ_QB
    134235591U,	// CMPGU_LE_QB
    134235805U,	// CMPGU_LT_QB
    17971U,	// CMPU_EQ_QB
    17876U,	// CMPU_LE_QB
    18090U,	// CMPU_LT_QB
    134236924U,	// CMP_EQ_D
    21550U,	// CMP_EQ_PH
    134240831U,	// CMP_EQ_S
    134236494U,	// CMP_F_D
    134240642U,	// CMP_F_S
    134236338U,	// CMP_LE_D
    21446U,	// CMP_LE_PH
    134240563U,	// CMP_LE_S
    134237415U,	// CMP_LT_D
    21719U,	// CMP_LT_PH
    134240926U,	// CMP_LT_S
    134236512U,	// CMP_SAF_D
    134240652U,	// CMP_SAF_S
    134236951U,	// CMP_SEQ_D
    134240850U,	// CMP_SEQ_S
    134236375U,	// CMP_SLE_D
    134240592U,	// CMP_SLE_S
    134237442U,	// CMP_SLT_D
    134240945U,	// CMP_SLT_S
    134236999U,	// CMP_SUEQ_D
    134240881U,	// CMP_SUEQ_S
    134236423U,	// CMP_SULE_D
    134240623U,	// CMP_SULE_S
    134237490U,	// CMP_SULT_D
    134240976U,	// CMP_SULT_S
    134236881U,	// CMP_SUN_D
    134240804U,	// CMP_SUN_S
    134236979U,	// CMP_UEQ_D
    134240870U,	// CMP_UEQ_S
    134236403U,	// CMP_ULE_D
    134240612U,	// CMP_ULE_S
    134237470U,	// CMP_ULT_D
    134240965U,	// CMP_ULT_S
    134236863U,	// CMP_UN_D
    134240794U,	// CMP_UN_S
    9459U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    805323901U,	// COPY_S_B
    805325994U,	// COPY_S_D
    805327406U,	// COPY_S_H
    805331336U,	// COPY_S_W
    805324116U,	// COPY_U_B
    805326461U,	// COPY_U_D
    805327673U,	// COPY_U_H
    805331743U,	// COPY_U_W
    10256471U,	// CTC1
    10256471U,	// CTC1_MM
    16981U,	// CTCMSA
    22800U,	// CVT_D32_S
    23893U,	// CVT_D32_W
    23893U,	// CVT_D32_W_MM
    22089U,	// CVT_D64_L
    22800U,	// CVT_D64_S
    23893U,	// CVT_D64_W
    22800U,	// CVT_D_S_MM
    19029U,	// CVT_L_D64
    19029U,	// CVT_L_D64_MM
    23019U,	// CVT_L_S
    23019U,	// CVT_L_S_MM
    19367U,	// CVT_S_D32
    19367U,	// CVT_S_D32_MM
    19367U,	// CVT_S_D64
    22098U,	// CVT_S_L
    24648U,	// CVT_S_W
    24648U,	// CVT_S_W_MM
    20205U,	// CVT_W_D32
    20205U,	// CVT_W_D64
    20205U,	// CVT_W_MM
    23341U,	// CVT_W_S
    23341U,	// CVT_W_S_MM
    19188U,	// C_EQ_D32
    19188U,	// C_EQ_D64
    23095U,	// C_EQ_S
    18759U,	// C_F_D32
    18759U,	// C_F_D64
    22907U,	// C_F_S
    18602U,	// C_LE_D32
    18602U,	// C_LE_D64
    22827U,	// C_LE_S
    19679U,	// C_LT_D32
    19679U,	// C_LT_D64
    23190U,	// C_LT_S
    18593U,	// C_NGE_D32
    18593U,	// C_NGE_D64
    22818U,	// C_NGE_S
    18628U,	// C_NGLE_D32
    18628U,	// C_NGLE_D64
    22845U,	// C_NGLE_S
    19045U,	// C_NGL_D32
    19045U,	// C_NGL_D64
    23035U,	// C_NGL_S
    19670U,	// C_NGT_D32
    19670U,	// C_NGT_D64
    23181U,	// C_NGT_S
    18638U,	// C_OLE_D32
    18638U,	// C_OLE_D64
    22855U,	// C_OLE_S
    19705U,	// C_OLT_D32
    19705U,	// C_OLT_D64
    23208U,	// C_OLT_S
    19214U,	// C_SEQ_D32
    19214U,	// C_SEQ_D64
    23113U,	// C_SEQ_S
    18829U,	// C_SF_D32
    18829U,	// C_SF_D64
    22953U,	// C_SF_S
    19242U,	// C_UEQ_D32
    19242U,	// C_UEQ_D64
    23133U,	// C_UEQ_S
    18666U,	// C_ULE_D32
    18666U,	// C_ULE_D64
    22875U,	// C_ULE_S
    19733U,	// C_ULT_D32
    19733U,	// C_ULT_D64
    23228U,	// C_ULT_S
    19127U,	// C_UN_D32
    19127U,	// C_UN_D64
    23058U,	// C_UN_S
    22483U,	// CmpRxRy16
    939546122U,	// CmpiRxImm16
    22026U,	// CmpiRxImmX16
    549943U,	// Constant32
    134237996U,	// DADD
    134239686U,	// DADDi
    134241284U,	// DADDiu
    134241232U,	// DADDu
    8689125U,	// DAHI
    8689125U,	// DAHI_MM64R6
    134240132U,	// DALIGN
    134240132U,	// DALIGN_MM64R6
    8689186U,	// DATI
    8689186U,	// DATI_MM64R6
    134239796U,	// DAUI
    134239796U,	// DAUI_MM64R6
    22443U,	// DBITSWAP
    22418U,	// DCLO
    22418U,	// DCLO_R6
    25531U,	// DCLZ
    25531U,	// DCLZ_R6
    134241466U,	// DDIV
    134241374U,	// DDIVU
    134241374U,	// DDIVU_MM64R6
    134241466U,	// DDIV_MM64R6
    9485U,	// DERET
    9485U,	// DERET_MM
    134243423U,	// DEXT
    134243398U,	// DEXTM
    134240107U,	// DEXTM_MM64R6
    134243436U,	// DEXTU
    134241367U,	// DEXTU_MM64R6
    134241200U,	// DEXT_MM64R6
    546249U,	// DI
    134243411U,	// DINS
    134243391U,	// DINSM
    134243429U,	// DINSU
    134241467U,	// DIV
    134241375U,	// DIVU
    134241375U,	// DIVU_MMR6
    134241467U,	// DIV_MMR6
    134235243U,	// DIV_S_B
    134237336U,	// DIV_S_D
    134238737U,	// DIV_S_H
    134242667U,	// DIV_S_W
    134235458U,	// DIV_U_B
    134237803U,	// DIV_U_D
    134239015U,	// DIV_U_H
    134243085U,	// DIV_U_W
    546249U,	// DI_MM
    134234695U,	// DLSA
    134234695U,	// DLSA_R6
    134234121U,	// DMFC0
    16450U,	// DMFC1
    134234372U,	// DMFC2
    33571076U,	// DMFC2_OCTEON
    134238041U,	// DMOD
    134241246U,	// DMODU
    134241246U,	// DMODU_MM64R6
    134238041U,	// DMOD_MM64R6
    1117552656U,	// DMTC0
    10256477U,	// DMTC1
    1117552907U,	// DMTC2
    33571083U,	// DMTC2_OCTEON
    134239673U,	// DMUH
    134241277U,	// DMUHU
    134240063U,	// DMUL
    23454U,	// DMULT
    23631U,	// DMULTu
    134241321U,	// DMULU
    134240063U,	// DMUL_R6
    134237244U,	// DOTP_S_D
    134238657U,	// DOTP_S_H
    134242535U,	// DOTP_S_W
    134237711U,	// DOTP_U_D
    134238945U,	// DOTP_U_H
    134242993U,	// DOTP_U_W
    151014373U,	// DPADD_S_D
    151015786U,	// DPADD_S_H
    151019654U,	// DPADD_S_W
    151014840U,	// DPADD_U_D
    151016074U,	// DPADD_U_H
    151020122U,	// DPADD_U_W
    134239526U,	// DPAQX_SA_W_PH
    134239609U,	// DPAQX_S_W_PH
    134241995U,	// DPAQ_SA_L_W
    134239568U,	// DPAQ_S_W_PH
    134239861U,	// DPAU_H_QBL
    134240322U,	// DPAU_H_QBR
    134239647U,	// DPAX_W_PH
    134239516U,	// DPA_W_PH
    22488U,	// DPOP
    134239541U,	// DPSQX_SA_W_PH
    134239623U,	// DPSQX_S_W_PH
    134242008U,	// DPSQ_SA_L_W
    134239596U,	// DPSQ_S_W_PH
    151014340U,	// DPSUB_S_D
    151015765U,	// DPSUB_S_H
    151019621U,	// DPSUB_S_W
    151014807U,	// DPSUB_U_D
    151016053U,	// DPSUB_U_H
    151020089U,	// DPSUB_U_W
    134239873U,	// DPSU_H_QBL
    134240334U,	// DPSU_H_QBR
    134239658U,	// DPSX_W_PH
    134239637U,	// DPS_W_PH
    134240479U,	// DROTR
    134234351U,	// DROTR32
    134241510U,	// DROTRV
    21372U,	// DSBH
    25608U,	// DSDIV
    20280U,	// DSHD
    134240038U,	// DSLL
    134234321U,	// DSLL32
    1207981862U,	// DSLL64_32
    134241472U,	// DSLLV
    134234689U,	// DSRA
    134234303U,	// DSRA32
    134241451U,	// DSRAV
    134240050U,	// DSRL
    134234329U,	// DSRL32
    134241479U,	// DSRLV
    134235906U,	// DSUB
    134241211U,	// DSUBu
    25594U,	// DUDIV
    25609U,	// DivRxRy16
    25595U,	// DivuRxRy16
    9436U,	// EHB
    9436U,	// EHB_MM
    9436U,	// EHB_MMR6
    546261U,	// EI
    546261U,	// EI_MM
    546261U,	// EI_MMR6
    9486U,	// ERET
    9440U,	// ERETNC
    9440U,	// ERETNC_MMR6
    9486U,	// ERET_MM
    9486U,	// ERET_MMR6
    134243424U,	// EXT
    134240291U,	// EXTP
    134240188U,	// EXTPDP
    134241494U,	// EXTPDPV
    134241503U,	// EXTPV
    134242728U,	// EXTRV_RS_W
    134242282U,	// EXTRV_R_W
    134238746U,	// EXTRV_S_H
    134243165U,	// EXTRV_W
    134242717U,	// EXTR_RS_W
    134242261U,	// EXTR_R_W
    134238677U,	// EXTR_S_H
    134242360U,	// EXTR_W
    134243417U,	// EXTS
    134243369U,	// EXTS32
    134243424U,	// EXT_MM
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    19636U,	// FABS_D32
    19636U,	// FABS_D64
    19636U,	// FABS_MM
    23165U,	// FABS_S
    23165U,	// FABS_S_MM
    0U,	// FABS_W
    134236270U,	// FADD_D
    134236271U,	// FADD_D32
    134236271U,	// FADD_D64
    134236271U,	// FADD_MM
    134240539U,	// FADD_S
    134240539U,	// FADD_S_MM
    134241630U,	// FADD_W
    134236504U,	// FCAF_D
    134241749U,	// FCAF_W
    134236934U,	// FCEQ_D
    134242188U,	// FCEQ_W
    19643U,	// FCLASS_D
    25012U,	// FCLASS_W
    134236348U,	// FCLE_D
    134241672U,	// FCLE_W
    134237425U,	// FCLT_D
    134242767U,	// FCLT_W
    2204819U,	// FCMP_D32
    2204819U,	// FCMP_D32_MM
    2204819U,	// FCMP_D64
    2466963U,	// FCMP_S32
    2466963U,	// FCMP_S32_MM
    134236444U,	// FCNE_D
    134241706U,	// FCNE_W
    134237044U,	// FCOR_D
    134242317U,	// FCOR_W
    134236990U,	// FCUEQ_D
    134242204U,	// FCUEQ_W
    134236414U,	// FCULE_D
    134241688U,	// FCULE_W
    134237481U,	// FCULT_D
    134242783U,	// FCULT_W
    134236460U,	// FCUNE_D
    134241722U,	// FCUNE_W
    134236873U,	// FCUN_D
    134242094U,	// FCUN_W
    134237867U,	// FDIV_D
    134237868U,	// FDIV_D32
    134237868U,	// FDIV_D64
    134237868U,	// FDIV_MM
    134241012U,	// FDIV_S
    134241012U,	// FDIV_S_MM
    134243149U,	// FDIV_W
    134238404U,	// FEXDO_H
    134242110U,	// FEXDO_W
    134236157U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    134241533U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    19069U,	// FEXUPL_D
    24308U,	// FEXUPL_W
    19332U,	// FEXUPR_D
    24605U,	// FEXUPR_W
    19574U,	// FFINT_S_D
    24905U,	// FFINT_S_W
    20053U,	// FFINT_U_D
    25335U,	// FFINT_U_W
    19079U,	// FFQL_D
    24318U,	// FFQL_W
    19342U,	// FFQR_D
    24615U,	// FFQR_W
    17282U,	// FILL_B
    19054U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    20637U,	// FILL_H
    24293U,	// FILL_W
    18420U,	// FLOG2_D
    23796U,	// FLOG2_W
    19018U,	// FLOOR_L_D64
    23008U,	// FLOOR_L_S
    20194U,	// FLOOR_W_D32
    20194U,	// FLOOR_W_D64
    20194U,	// FLOOR_W_MM
    23330U,	// FLOOR_W_S
    23330U,	// FLOOR_W_S_MM
    151013494U,	// FMADD_D
    151018854U,	// FMADD_W
    134236195U,	// FMAX_A_D
    134241571U,	// FMAX_A_W
    134237942U,	// FMAX_D
    134243174U,	// FMAX_W
    134236175U,	// FMIN_A_D
    134241551U,	// FMIN_A_W
    134236847U,	// FMIN_D
    134242086U,	// FMIN_W
    20155U,	// FMOV_D32
    20155U,	// FMOV_D32_MM
    20155U,	// FMOV_D64
    23291U,	// FMOV_S
    23291U,	// FMOV_S_MM
    151013452U,	// FMSUB_D
    151018812U,	// FMSUB_W
    134236831U,	// FMUL_D
    134236832U,	// FMUL_D32
    134236832U,	// FMUL_D64
    134236832U,	// FMUL_MM
    134240772U,	// FMUL_S
    134240772U,	// FMUL_S_MM
    134242070U,	// FMUL_W
    18846U,	// FNEG_D32
    18846U,	// FNEG_D64
    18846U,	// FNEG_MM
    22969U,	// FNEG_S
    22969U,	// FNEG_S_MM
    19180U,	// FRCP_D
    24391U,	// FRCP_W
    19791U,	// FRINT_D
    25081U,	// FRINT_W
    19819U,	// FRSQRT_D
    25109U,	// FRSQRT_W
    134236523U,	// FSAF_D
    134241757U,	// FSAF_W
    134236962U,	// FSEQ_D
    134242196U,	// FSEQ_W
    134236386U,	// FSLE_D
    134241680U,	// FSLE_W
    134237453U,	// FSLT_D
    134242775U,	// FSLT_W
    134236452U,	// FSNE_D
    134241714U,	// FSNE_W
    134237052U,	// FSOR_D
    134242325U,	// FSOR_W
    19810U,	// FSQRT_D
    19811U,	// FSQRT_D32
    19811U,	// FSQRT_D64
    19811U,	// FSQRT_MM
    23268U,	// FSQRT_S
    23268U,	// FSQRT_S_MM
    25100U,	// FSQRT_W
    134236228U,	// FSUB_D
    134236229U,	// FSUB_D32
    134236229U,	// FSUB_D64
    134236229U,	// FSUB_MM
    134240521U,	// FSUB_S
    134240521U,	// FSUB_S_MM
    134241588U,	// FSUB_W
    134237011U,	// FSUEQ_D
    134242213U,	// FSUEQ_W
    134236435U,	// FSULE_D
    134241697U,	// FSULE_W
    134237502U,	// FSULT_D
    134242792U,	// FSULT_W
    134236469U,	// FSUNE_D
    134241731U,	// FSUNE_W
    134236892U,	// FSUN_D
    134242102U,	// FSUN_W
    19585U,	// FTINT_S_D
    24916U,	// FTINT_S_W
    20064U,	// FTINT_U_D
    25346U,	// FTINT_U_W
    134238481U,	// FTQ_H
    134242222U,	// FTQ_W
    19407U,	// FTRUNC_S_D
    24688U,	// FTRUNC_S_W
    19874U,	// FTRUNC_U_D
    25156U,	// FTRUNC_U_W
    1358976513U,	// GotPrologue16
    134237147U,	// HADD_S_D
    134238560U,	// HADD_S_H
    134242428U,	// HADD_S_W
    134237614U,	// HADD_U_D
    134238848U,	// HADD_U_H
    134242896U,	// HADD_U_W
    134237114U,	// HSUB_S_D
    134238539U,	// HSUB_S_H
    134242395U,	// HSUB_S_W
    134237581U,	// HSUB_U_D
    134238827U,	// HSUB_U_H
    134242863U,	// HSUB_U_W
    134235513U,	// ILVEV_B
    134237858U,	// ILVEV_D
    134239070U,	// ILVEV_H
    134243140U,	// ILVEV_W
    134235041U,	// ILVL_B
    134236839U,	// ILVL_D
    134238396U,	// ILVL_H
    134242078U,	// ILVL_W
    134234793U,	// ILVOD_B
    134236312U,	// ILVOD_D
    134238198U,	// ILVOD_H
    134241663U,	// ILVOD_W
    134235089U,	// ILVR_B
    134237087U,	// ILVR_D
    134238521U,	// ILVR_H
    134242368U,	// ILVR_W
    134243406U,	// INS
    52970656U,	// INSERT_B
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    52972888U,	// INSERT_D
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    52974161U,	// INSERT_H
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    52978178U,	// INSERT_W
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    16801006U,	// INSV
    61358770U,	// INSVE_B
    61360446U,	// INSVE_D
    61362175U,	// INSVE_H
    61365708U,	// INSVE_W
    134243406U,	// INS_MM
    546367U,	// J
    546400U,	// JAL
    22735U,	// JALR
    547023U,	// JALR16_MM
    22735U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRPseudo
    541104U,	// JALRS16_MM
    23409U,	// JALRS_MM
    17827U,	// JALR_HB
    22735U,	// JALR_MM
    547673U,	// JALS_MM
    549769U,	// JALX
    549769U,	// JALX_MM
    546400U,	// JAL_MM
    18217U,	// JIALC
    18217U,	// JIALC_MMR6
    18206U,	// JIC
    18206U,	// JIC_MMR6
    547019U,	// JR
    541091U,	// JR16_MM
    547019U,	// JR64
    546840U,	// JRADDIUSP
    542615U,	// JRC16_MM
    542108U,	// JR_HB
    542108U,	// JR_HB_R6
    547019U,	// JR_MM
    546367U,	// J_MM
    2905696U,	// Jal16
    3167840U,	// JalB16
    546400U,	// JalOneReg
    22112U,	// JalTwoReg
    9428U,	// JrRa16
    9419U,	// JrcRa16
    549870U,	// JrcRx16
    540673U,	// JumpLinkReg16
    67126700U,	// LB
    67126700U,	// LB64
    67125696U,	// LBU16_MM
    1493197711U,	// LBUX
    67126700U,	// LB_MM
    67132342U,	// LBu
    67132342U,	// LBu64
    67132342U,	// LBu_MM
    67129151U,	// LD
    67125296U,	// LDC1
    67125296U,	// LDC164
    67125296U,	// LDC1_MM
    67125496U,	// LDC2
    67125496U,	// LDC2_R6
    67125555U,	// LDC3
    17108U,	// LDI_B
    18862U,	// LDI_D
    20513U,	// LDI_H
    24143U,	// LDI_W
    67131068U,	// LDL
    18278U,	// LDPC
    67131529U,	// LDR
    1493188720U,	// LDXC1
    1493188720U,	// LDXC164
    67125914U,	// LD_B
    67127433U,	// LD_D
    67129319U,	// LD_H
    67132784U,	// LD_W
    25189381U,	// LEA_ADDiu
    25189380U,	// LEA_ADDiu64
    25189381U,	// LEA_ADDiu_MM
    67130253U,	// LH
    67130253U,	// LH64
    67125719U,	// LHU16_MM
    1493197700U,	// LHX
    67130253U,	// LH_MM
    67132408U,	// LHu
    67132408U,	// LHu64
    67132408U,	// LHu_MM
    16751U,	// LI16_MM
    67131152U,	// LL
    67129150U,	// LLD
    67129150U,	// LLD_R6
    67131152U,	// LL_MM
    67131152U,	// LL_R6
    67125255U,	// LOAD_ACC128
    67125255U,	// LOAD_ACC64
    67125255U,	// LOAD_ACC64DSP
    67131369U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    134234696U,	// LSA
    1653391944U,	// LSA_MMR6
    134234696U,	// LSA_R6
    1493188734U,	// LUXC1
    1493188734U,	// LUXC164
    1493188734U,	// LUXC1_MM
    33576506U,	// LUi
    33576506U,	// LUi64
    33576506U,	// LUi_MM
    67134332U,	// LW
    67125726U,	// LW16_MM
    67134332U,	// LW64
    67125348U,	// LWC1
    67125348U,	// LWC1_MM
    67125522U,	// LWC2
    67125522U,	// LWC2_R6
    67125567U,	// LWC3
    67134332U,	// LWGP_MM
    67131205U,	// LWL
    67131205U,	// LWL64
    67131205U,	// LWL_MM
    3522956U,	// LWM16_MM
    3522785U,	// LWM32_MM
    3528562U,	// LWM_MM
    18315U,	// LWPC
    18315U,	// LWPC_MMR6
    137257U,	// LWP_MM
    67131629U,	// LWR
    67131629U,	// LWR64
    67131629U,	// LWR_MM
    67134332U,	// LWSP_MM
    18308U,	// LWUPC
    67132517U,	// LWU_MM
    1493197717U,	// LWX
    1493188748U,	// LWXC1
    1493188748U,	// LWXC1_MM
    1493195640U,	// LWXS_MM
    67134332U,	// LW_MM
    67132517U,	// LWu
    67126700U,	// LbRxRyOffMemX16
    67132342U,	// LbuRxRyOffMemX16
    67130253U,	// LhRxRyOffMemX16
    67132408U,	// LhuRxRyOffMemX16
    939546113U,	// LiRxImm16
    22007U,	// LiRxImmAlignX16
    22017U,	// LiRxImmX16
    33571334U,	// LoadAddrImm32
    16923U,	// LoadAddrImm64
    67125766U,	// LoadAddrReg32
    67125787U,	// LoadAddrReg64
    33576449U,	// LoadImm32
    22021U,	// LoadImm64
    3695484U,	// LwConstant32
    268460924U,	// LwRxPcTcp16
    25468U,	// LwRxPcTcpX16
    67134332U,	// LwRxRyOffMemX16
    1761633148U,	// LwRxSpImmX16
    20274U,	// MADD
    151013756U,	// MADDF_D
    151017888U,	// MADDF_S
    151015669U,	// MADDR_Q_H
    151019383U,	// MADDR_Q_W
    23511U,	// MADDU
    134241239U,	// MADDU_DSP
    23511U,	// MADDU_MM
    151012711U,	// MADDV_B
    151015056U,	// MADDV_D
    151016268U,	// MADDV_H
    151020338U,	// MADDV_W
    134236279U,	// MADD_D32
    134236279U,	// MADD_D32_MM
    134236279U,	// MADD_D64
    134238002U,	// MADD_DSP
    20274U,	// MADD_MM
    151015639U,	// MADD_Q_H
    151019353U,	// MADD_Q_W
    134240538U,	// MADD_S
    134240538U,	// MADD_S_MM
    134239955U,	// MAQ_SA_W_PHL
    134240403U,	// MAQ_SA_W_PHR
    134239983U,	// MAQ_S_W_PHL
    134240431U,	// MAQ_S_W_PHR
    134236220U,	// MAXA_D
    134240511U,	// MAXA_S
    134235164U,	// MAXI_S_B
    134237225U,	// MAXI_S_D
    134238638U,	// MAXI_S_H
    134242506U,	// MAXI_S_W
    134235379U,	// MAXI_U_B
    134237692U,	// MAXI_U_D
    134238926U,	// MAXI_U_H
    134242974U,	// MAXI_U_W
    134234745U,	// MAX_A_B
    134236196U,	// MAX_A_D
    134238150U,	// MAX_A_H
    134241572U,	// MAX_A_W
    134237943U,	// MAX_D
    134241078U,	// MAX_S
    134235252U,	// MAX_S_B
    134237345U,	// MAX_S_D
    134238757U,	// MAX_S_H
    134242687U,	// MAX_S_W
    134235467U,	// MAX_U_B
    134237812U,	// MAX_U_D
    134239024U,	// MAX_U_H
    134243094U,	// MAX_U_W
    134234122U,	// MFC0
    16451U,	// MFC1
    16451U,	// MFC1_MM
    134234373U,	// MFC2
    16457U,	// MFHC1_D32
    16457U,	// MFHC1_D64
    16457U,	// MFHC1_MM
    546283U,	// MFHI
    546283U,	// MFHI16_MM
    546283U,	// MFHI64
    21995U,	// MFHI_DSP
    546283U,	// MFHI_MM
    546712U,	// MFLO
    546712U,	// MFLO16_MM
    546712U,	// MFLO64
    22424U,	// MFLO_DSP
    546712U,	// MFLO_MM
    134236205U,	// MINA_D
    134240503U,	// MINA_S
    134235144U,	// MINI_S_B
    134237205U,	// MINI_S_D
    134238618U,	// MINI_S_H
    134242486U,	// MINI_S_W
    134235359U,	// MINI_U_B
    134237672U,	// MINI_U_D
    134238906U,	// MINI_U_H
    134242954U,	// MINI_U_W
    134234726U,	// MIN_A_B
    134236176U,	// MIN_A_D
    134238131U,	// MIN_A_H
    134241552U,	// MIN_A_W
    134236848U,	// MIN_D
    134240779U,	// MIN_S
    134235174U,	// MIN_S_B
    134237235U,	// MIN_S_D
    134238648U,	// MIN_S_H
    134242526U,	// MIN_S_W
    134235389U,	// MIN_U_B
    134237702U,	// MIN_U_D
    134238936U,	// MIN_U_H
    134242984U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    134238042U,	// MOD
    134235904U,	// MODSUB
    134241247U,	// MODU
    134241247U,	// MODU_MMR6
    134238042U,	// MOD_MMR6
    134235107U,	// MOD_S_B
    134237168U,	// MOD_S_D
    134238581U,	// MOD_S_H
    134242449U,	// MOD_S_W
    134235322U,	// MOD_U_B
    134237635U,	// MOD_U_D
    134238869U,	// MOD_U_H
    134242917U,	// MOD_U_W
    20360U,	// MOVE16_MM
    1921374148U,	// MOVEP_MM
    23665U,	// MOVE_V
    134236565U,	// MOVF_D32
    134236565U,	// MOVF_D32_MM
    134236565U,	// MOVF_D64
    134238111U,	// MOVF_I
    134238111U,	// MOVF_I64
    134238111U,	// MOVF_I_MM
    134240689U,	// MOVF_S
    134240689U,	// MOVF_S_MM
    134236900U,	// MOVN_I64_D64
    134240140U,	// MOVN_I64_I
    134240140U,	// MOVN_I64_I64
    134240815U,	// MOVN_I64_S
    134236900U,	// MOVN_I_D32
    134236900U,	// MOVN_I_D32_MM
    134236900U,	// MOVN_I_D64
    134240140U,	// MOVN_I_I
    134240140U,	// MOVN_I_I64
    134240140U,	// MOVN_I_MM
    134240815U,	// MOVN_I_S
    134240815U,	// MOVN_I_S_MM
    134237563U,	// MOVT_D32
    134237563U,	// MOVT_D32_MM
    134237563U,	// MOVT_D64
    134241194U,	// MOVT_I
    134241194U,	// MOVT_I64
    134241194U,	// MOVT_I_MM
    134241004U,	// MOVT_S
    134241004U,	// MOVT_S_MM
    134237983U,	// MOVZ_I64_D64
    134243298U,	// MOVZ_I64_I
    134243298U,	// MOVZ_I64_I64
    134241105U,	// MOVZ_I64_S
    134237983U,	// MOVZ_I_D32
    134237983U,	// MOVZ_I_D32_MM
    134237983U,	// MOVZ_I_D64
    134243298U,	// MOVZ_I_I
    134243298U,	// MOVZ_I_I64
    134243298U,	// MOVZ_I_MM
    134241105U,	// MOVZ_I_S
    134241105U,	// MOVZ_I_S_MM
    18184U,	// MSUB
    151013747U,	// MSUBF_D
    151017879U,	// MSUBF_S
    151015658U,	// MSUBR_Q_H
    151019372U,	// MSUBR_Q_W
    23490U,	// MSUBU
    134241218U,	// MSUBU_DSP
    23490U,	// MSUBU_MM
    151012702U,	// MSUBV_B
    151015047U,	// MSUBV_D
    151016259U,	// MSUBV_H
    151020329U,	// MSUBV_W
    134236237U,	// MSUB_D32
    134236237U,	// MSUB_D32_MM
    134236237U,	// MSUB_D64
    134235912U,	// MSUB_DSP
    18184U,	// MSUB_MM
    151015629U,	// MSUB_Q_H
    151019343U,	// MSUB_Q_W
    134240520U,	// MSUB_S
    134240520U,	// MSUB_S_MM
    1117552657U,	// MTC0
    10256478U,	// MTC1
    10256478U,	// MTC1_MM
    1117552908U,	// MTC2
    10272848U,	// MTHC1_D32
    10272848U,	// MTHC1_D64
    10272848U,	// MTHC1_MM
    546289U,	// MTHI
    546289U,	// MTHI64
    10262001U,	// MTHI_DSP
    546289U,	// MTHI_MM
    10262475U,	// MTHLIP
    546725U,	// MTLO
    546725U,	// MTLO64
    10262437U,	// MTLO_DSP
    546725U,	// MTLO_MM
    540701U,	// MTM0
    540826U,	// MTM1
    540958U,	// MTM2
    540707U,	// MTP0
    540832U,	// MTP1
    540964U,	// MTP2
    134239674U,	// MUH
    134241278U,	// MUHU
    134241278U,	// MUHU_MMR6
    134239674U,	// MUH_MMR6
    134240064U,	// MUL
    134239996U,	// MULEQ_S_W_PHL
    134240444U,	// MULEQ_S_W_PHR
    134239885U,	// MULEU_S_PH_QBL
    134240346U,	// MULEU_S_PH_QBR
    134239435U,	// MULQ_RS_PH
    134242706U,	// MULQ_RS_W
    134239379U,	// MULQ_S_PH
    134242565U,	// MULQ_S_W
    134238464U,	// MULR_Q_H
    134242178U,	// MULR_Q_W
    134239581U,	// MULSAQ_S_W_PH
    134239556U,	// MULSA_W_PH
    23455U,	// MULT
    134241360U,	// MULTU_DSP
    134241183U,	// MULT_DSP
    23455U,	// MULT_MM
    23632U,	// MULTu
    23632U,	// MULTu_MM
    134241315U,	// MULU
    134241315U,	// MULU_MMR6
    134235522U,	// MULV_B
    134237875U,	// MULV_D
    134239079U,	// MULV_H
    134243157U,	// MULV_W
    134240064U,	// MUL_MM
    134240064U,	// MUL_MMR6
    134239252U,	// MUL_PH
    134238433U,	// MUL_Q_H
    134242147U,	// MUL_Q_W
    134240064U,	// MUL_R6
    134239347U,	// MUL_S_PH
    546283U,	// Mfhi16
    546712U,	// Mflo16
    20360U,	// Move32R16
    20360U,	// MoveR3216
    23455U,	// MultRxRy16
    75799455U,	// MultRxRyRz16
    23632U,	// MultuRxRy16
    75799632U,	// MultuRxRyRz16
    17033U,	// NLOC_B
    18526U,	// NLOC_D
    20438U,	// NLOC_H
    23877U,	// NLOC_W
    17041U,	// NLZC_B
    18534U,	// NLZC_D
    20446U,	// NLZC_H
    23885U,	// NLZC_W
    134236287U,	// NMADD_D32
    134236287U,	// NMADD_D32_MM
    134236287U,	// NMADD_D64
    134240537U,	// NMADD_S
    134240537U,	// NMADD_S_MM
    134236245U,	// NMSUB_D32
    134236245U,	// NMSUB_D32_MM
    134236245U,	// NMSUB_D64
    134240519U,	// NMSUB_S
    134240519U,	// NMSUB_S_MM
    0U,	// NOP
    134240469U,	// NOR
    134240469U,	// NOR64
    134234930U,	// NORI_B
    134240469U,	// NOR_MM
    134240469U,	// NOR_MMR6
    134241409U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    16825U,	// NOT16_MM
    20389U,	// NegRxRy16
    23461U,	// NotRxRy16
    134240470U,	// OR
    9224618U,	// OR16_MM
    134240470U,	// OR64
    134234931U,	// ORI_B
    134239773U,	// ORI_MMR6
    134240470U,	// OR_MM
    134240470U,	// OR_MMR6
    134241410U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    134239773U,	// ORi
    134239773U,	// ORi64
    134239773U,	// ORi_MM
    16799958U,	// OrRxRxRy16
    134239241U,	// PACKRL_PH
    9447U,	// PAUSE
    9447U,	// PAUSE_MM
    134235504U,	// PCKEV_B
    134237849U,	// PCKEV_D
    134239061U,	// PCKEV_H
    134243131U,	// PCKEV_W
    134234784U,	// PCKOD_B
    134236303U,	// PCKOD_D
    134238189U,	// PCKOD_H
    134241654U,	// PCKOD_W
    17560U,	// PCNT_B
    19783U,	// PCNT_D
    21065U,	// PCNT_H
    25073U,	// PCNT_W
    134239205U,	// PICK_PH
    134235636U,	// PICK_QB
    22489U,	// POP
    22188U,	// PRECEQU_PH_QBL
    16906U,	// PRECEQU_PH_QBLA
    22649U,	// PRECEQU_PH_QBR
    16944U,	// PRECEQU_PH_QBRA
    22241U,	// PRECEQ_W_PHL
    22689U,	// PRECEQ_W_PHR
    22173U,	// PRECEU_PH_QBL
    16890U,	// PRECEU_PH_QBLA
    22634U,	// PRECEU_PH_QBR
    16928U,	// PRECEU_PH_QBRA
    134239157U,	// PRECRQU_S_QB_PH
    134241797U,	// PRECRQ_PH_W
    134239130U,	// PRECRQ_QB_PH
    134241828U,	// PRECRQ_RS_PH_W
    134239144U,	// PRECR_QB_PH
    134241781U,	// PRECR_SRA_PH_W
    134241810U,	// PRECR_SRA_R_PH_W
    85913U,	// PREF
    85913U,	// PREF_MM
    85913U,	// PREF_MMR6
    85913U,	// PREF_R6
    134238024U,	// PREPEND
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    16391U,	// PseudoCVT_D32_W
    16391U,	// PseudoCVT_D64_L
    16391U,	// PseudoCVT_D64_W
    16391U,	// PseudoCVT_S_L
    16391U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    0U,	// PseudoUDIV
    18160U,	// RADDU_W_QB
    33576970U,	// RDDSP
    22758U,	// RDHWR
    22758U,	// RDHWR64
    22758U,	// RDHWR_MM
    21768U,	// REPLV_PH
    18140U,	// REPLV_QB
    33575927U,	// REPL_PH
    33572358U,	// REPL_QB
    19792U,	// RINT_D
    23260U,	// RINT_S
    134240480U,	// ROTR
    134241511U,	// ROTRV
    134241511U,	// ROTRV_MM
    134240480U,	// ROTR_MM
    18997U,	// ROUND_L_D64
    22987U,	// ROUND_L_S
    20173U,	// ROUND_W_D32
    20173U,	// ROUND_W_D64
    20173U,	// ROUND_W_MM
    23309U,	// ROUND_W_S
    23309U,	// ROUND_W_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    134235213U,	// SAT_S_B
    134237284U,	// SAT_S_D
    134238707U,	// SAT_S_H
    134242615U,	// SAT_S_W
    134235440U,	// SAT_U_B
    134237763U,	// SAT_U_D
    134238997U,	// SAT_U_H
    134243045U,	// SAT_U_W
    67127036U,	// SB
    67125588U,	// SB16_MM
    67127036U,	// SB64
    67127036U,	// SB_MM
    3966879U,	// SC
    3968807U,	// SCD
    3968807U,	// SCD_R6
    3966879U,	// SC_MM
    3966879U,	// SC_R6
    67129183U,	// SD
    546741U,	// SDBBP
    65946U,	// SDBBP16_MM
    546741U,	// SDBBP_MM
    546741U,	// SDBBP_R6
    67125302U,	// SDC1
    67125302U,	// SDC164
    67125302U,	// SDC1_MM
    67125502U,	// SDC2
    67125502U,	// SDC2_R6
    67125561U,	// SDC3
    25609U,	// SDIV
    25609U,	// SDIV_MM
    67131073U,	// SDL
    67131534U,	// SDR
    1493188727U,	// SDXC1
    1493188727U,	// SDXC164
    17815U,	// SEB
    17815U,	// SEB64
    17815U,	// SEB_MM
    17815U,	// SEB_MMR6
    21384U,	// SEH
    21384U,	// SEH64
    21384U,	// SEH_MM
    21384U,	// SEH_MMR6
    134243271U,	// SELEQZ
    134243271U,	// SELEQZ64
    134237973U,	// SELEQZ_D
    134243271U,	// SELEQZ_MMR6
    134241095U,	// SELEQZ_S
    134243244U,	// SELNEZ
    134243244U,	// SELNEZ64
    134237956U,	// SELNEZ_D
    134243244U,	// SELNEZ_MMR6
    134241085U,	// SELNEZ_S
    151013982U,	// SEL_D
    151017972U,	// SEL_S
    134240312U,	// SEQ
    134239760U,	// SEQi
    67130805U,	// SH
    67125601U,	// SH16_MM
    67130805U,	// SH64
    134234812U,	// SHF_B
    134238217U,	// SHF_H
    134241766U,	// SHF_W
    22430U,	// SHILO
    23758U,	// SHILOV
    134239486U,	// SHLLV_PH
    134235858U,	// SHLLV_QB
    134239423U,	// SHLLV_S_PH
    134242676U,	// SHLLV_S_W
    134239214U,	// SHLL_PH
    134235645U,	// SHLL_QB
    134239336U,	// SHLL_S_PH
    134242516U,	// SHLL_S_W
    134239476U,	// SHRAV_PH
    134235848U,	// SHRAV_QB
    134239324U,	// SHRAV_R_PH
    134235746U,	// SHRAV_R_QB
    134242271U,	// SHRAV_R_W
    134239121U,	// SHRA_PH
    134235568U,	// SHRA_QB
    134239289U,	// SHRA_R_PH
    134235711U,	// SHRA_R_QB
    134242229U,	// SHRA_R_W
    134239506U,	// SHRLV_PH
    134235878U,	// SHRLV_QB
    134239232U,	// SHRL_PH
    134235663U,	// SHRL_QB
    67130805U,	// SH_MM
    822100691U,	// SLDI_B
    822102445U,	// SLDI_D
    822104096U,	// SLDI_H
    822107726U,	// SLDI_W
    822100633U,	// SLD_B
    822102152U,	// SLD_D
    822104038U,	// SLD_H
    822107503U,	// SLD_W
    134240039U,	// SLL
    134234494U,	// SLL16_MM
    2013288231U,	// SLL64_32
    2013288231U,	// SLL64_64
    134234869U,	// SLLI_B
    134236606U,	// SLLI_D
    134238257U,	// SLLI_H
    134241887U,	// SLLI_W
    134241473U,	// SLLV
    134241473U,	// SLLV_MM
    134235018U,	// SLL_B
    134236790U,	// SLL_D
    134238373U,	// SLL_H
    134240039U,	// SLL_MM
    134240039U,	// SLL_MMR6
    134242029U,	// SLL_W
    134241172U,	// SLT
    134241172U,	// SLT64
    134241172U,	// SLT_MM
    134239784U,	// SLTi
    134239784U,	// SLTi64
    134239784U,	// SLTi_MM
    134241299U,	// SLTiu
    134241299U,	// SLTiu64
    134241299U,	// SLTiu_MM
    134241347U,	// SLTu
    134241347U,	// SLTu64
    134241347U,	// SLTu_MM
    134238078U,	// SNE
    134239705U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    805323596U,	// SPLATI_B
    805325317U,	// SPLATI_D
    805326968U,	// SPLATI_H
    805330598U,	// SPLATI_W
    805323911U,	// SPLAT_B
    805326021U,	// SPLAT_D
    805327416U,	// SPLAT_H
    805331390U,	// SPLAT_W
    134234690U,	// SRA
    134234827U,	// SRAI_B
    134236581U,	// SRAI_D
    134238232U,	// SRAI_H
    134241862U,	// SRAI_W
    134234903U,	// SRARI_B
    134236640U,	// SRARI_D
    134238291U,	// SRARI_H
    134241921U,	// SRARI_W
    134235056U,	// SRAR_B
    134237020U,	// SRAR_D
    134238488U,	// SRAR_H
    134242293U,	// SRAR_W
    134241452U,	// SRAV
    134241452U,	// SRAV_MM
    134234754U,	// SRA_B
    134236213U,	// SRA_D
    134238159U,	// SRA_H
    134234690U,	// SRA_MM
    134241581U,	// SRA_W
    134240051U,	// SRL
    134234501U,	// SRL16_MM
    134234877U,	// SRLI_B
    134236614U,	// SRLI_D
    134238265U,	// SRLI_H
    134241895U,	// SRLI_W
    134234921U,	// SRLRI_B
    134236658U,	// SRLRI_D
    134238309U,	// SRLRI_H
    134241939U,	// SRLRI_W
    134235072U,	// SRLR_B
    134237036U,	// SRLR_D
    134238504U,	// SRLR_H
    134242309U,	// SRLR_W
    134241480U,	// SRLV
    134241480U,	// SRLV_MM
    134235025U,	// SRL_B
    134236815U,	// SRL_D
    134238380U,	// SRL_H
    134240051U,	// SRL_MM
    134242054U,	// SRL_W
    9468U,	// SSNOP
    9468U,	// SSNOP_MM
    67125255U,	// STORE_ACC128
    67125255U,	// STORE_ACC64
    67125255U,	// STORE_ACC64DSP
    67131385U,	// STORE_CCOND_DSP
    67126442U,	// ST_B
    67128693U,	// ST_D
    67129947U,	// ST_H
    67133983U,	// ST_W
    134235907U,	// SUB
    134239185U,	// SUBQH_PH
    134239300U,	// SUBQH_R_PH
    134242239U,	// SUBQH_R_W
    134241844U,	// SUBQH_W
    134239260U,	// SUBQ_PH
    134239357U,	// SUBQ_S_PH
    134242545U,	// SUBQ_S_W
    134235428U,	// SUBSUS_U_B
    134237751U,	// SUBSUS_U_D
    134238985U,	// SUBSUS_U_H
    134243033U,	// SUBSUS_U_W
    134235231U,	// SUBSUU_S_B
    134237324U,	// SUBSUU_S_D
    134238725U,	// SUBSUU_S_H
    134242655U,	// SUBSUU_S_W
    134235193U,	// SUBS_S_B
    134237264U,	// SUBS_S_D
    134238687U,	// SUBS_S_H
    134242595U,	// SUBS_S_W
    134235408U,	// SUBS_U_B
    134237731U,	// SUBS_U_D
    134238965U,	// SUBS_U_H
    134243013U,	// SUBS_U_W
    134234567U,	// SUBU16_MM
    134235616U,	// SUBUH_QB
    134235722U,	// SUBUH_R_QB
    134241212U,	// SUBU_MMR6
    134239458U,	// SUBU_PH
    134235830U,	// SUBU_QB
    134239401U,	// SUBU_S_PH
    134235769U,	// SUBU_S_QB
    134234975U,	// SUBVI_B
    134236696U,	// SUBVI_D
    134238347U,	// SUBVI_H
    134241977U,	// SUBVI_W
    134235487U,	// SUBV_B
    134237832U,	// SUBV_D
    134239044U,	// SUBV_H
    134243114U,	// SUBV_W
    134235907U,	// SUB_MM
    134235907U,	// SUB_MMR6
    134241212U,	// SUBu
    134241212U,	// SUBu_MM
    1493188741U,	// SUXC1
    1493188741U,	// SUXC164
    1493188741U,	// SUXC1_MM
    67134336U,	// SW
    67125732U,	// SW16_MM
    67134336U,	// SW64
    67125354U,	// SWC1
    67125354U,	// SWC1_MM
    67125528U,	// SWC2
    67125528U,	// SWC2_R6
    67125573U,	// SWC3
    67129230U,	// SWE_MMR6
    67131210U,	// SWL
    67131210U,	// SWL64
    67131210U,	// SWL_MM
    3522963U,	// SWM16_MM
    3522792U,	// SWM32_MM
    3528567U,	// SWM_MM
    137262U,	// SWP_MM
    67131634U,	// SWR
    67131634U,	// SWR64
    67131634U,	// SWR_MM
    67134336U,	// SWSP_MM
    1493188755U,	// SWXC1
    1493188755U,	// SWXC1_MM
    67134336U,	// SW_MM
    67134336U,	// SW_MMR6
    549937U,	// SYNC
    153023U,	// SYNCI
    549937U,	// SYNC_MM
    546571U,	// SYSCALL
    546571U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    67127036U,	// SbRxRyOffMemX16
    549864U,	// SebRx16
    549876U,	// SehRx16
    4367297U,	// SelBeqZ
    4367270U,	// SelBneZ
    2231539667U,	// SelTBteqZCmp
    2231539210U,	// SelTBteqZCmpi
    2231540628U,	// SelTBteqZSlt
    2231539240U,	// SelTBteqZSlti
    2231540755U,	// SelTBteqZSltiu
    2231540803U,	// SelTBteqZSltu
    2365757395U,	// SelTBtneZCmp
    2365756938U,	// SelTBtneZCmpi
    2365758356U,	// SelTBtneZSlt
    2365756968U,	// SelTBtneZSlti
    2365758483U,	// SelTBtneZSltiu
    2365758531U,	// SelTBtneZSltu
    67130805U,	// ShRxRyOffMemX16
    134240039U,	// SllX16
    16800961U,	// SllvRxRy16
    92576660U,	// SltCCRxRy16
    23444U,	// SltRxRy16
    92575272U,	// SltiCCRxImmX16
    939546152U,	// SltiRxImm16
    22056U,	// SltiRxImmX16
    92576787U,	// SltiuCCRxImmX16
    939547667U,	// SltiuRxImm16
    23571U,	// SltiuRxImmX16
    92576835U,	// SltuCCRxRy16
    23619U,	// SltuRxRy16
    92576835U,	// SltuRxRyRz16
    134234690U,	// SraX16
    16800940U,	// SravRxRy16
    134240051U,	// SrlX16
    16800968U,	// SrlvRxRy16
    134241212U,	// SubuRxRyRz16
    67134336U,	// SwRxRyOffMemX16
    1761633152U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALL64_R
    0U,	// TAILCALL_R
    134240317U,	// TEQ
    33576470U,	// TEQI
    33576470U,	// TEQI_MM
    134240317U,	// TEQ_MM
    134238056U,	// TGE
    33576403U,	// TGEI
    33577996U,	// TGEIU
    33577996U,	// TGEIU_MM
    33576403U,	// TGEI_MM
    134241259U,	// TGEU
    134241259U,	// TGEU_MM
    134238056U,	// TGE_MM
    9463U,	// TLBP
    9463U,	// TLBP_MM
    9474U,	// TLBR
    9474U,	// TLBR_MM
    9453U,	// TLBWI
    9453U,	// TLBWI_MM
    9479U,	// TLBWR
    9479U,	// TLBWR_MM
    134241177U,	// TLT
    33576494U,	// TLTI
    33578010U,	// TLTIU_MM
    33576494U,	// TLTI_MM
    134241353U,	// TLTU
    134241353U,	// TLTU_MM
    134241177U,	// TLT_MM
    134238083U,	// TNE
    33576415U,	// TNEI
    33576415U,	// TNEI_MM
    134238083U,	// TNE_MM
    0U,	// TRAP
    18986U,	// TRUNC_L_D64
    22976U,	// TRUNC_L_S
    20162U,	// TRUNC_W_D32
    20162U,	// TRUNC_W_D64
    20162U,	// TRUNC_W_MM
    23298U,	// TRUNC_W_S
    23298U,	// TRUNC_W_S_MM
    33578010U,	// TTLTIU
    25595U,	// UDIV
    25595U,	// UDIV_MM
    67132407U,	// Ulhu
    67134331U,	// Ulw
    134241313U,	// V3MULU
    134234135U,	// VMM0
    134241328U,	// VMULU
    151012027U,	// VSHF_B
    151013765U,	// VSHF_D
    151015432U,	// VSHF_H
    151018981U,	// VSHF_W
    9491U,	// WAIT
    547721U,	// WAIT_MM
    33576977U,	// WRDSP
    21378U,	// WSBH
    21378U,	// WSBH_MM
    134240474U,	// XOR
    9224617U,	// XOR16_MM
    134240474U,	// XOR64
    134234938U,	// XORI_B
    134239772U,	// XORI_MMR6
    134240474U,	// XOR_MM
    134240474U,	// XOR_MMR6
    134241416U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    134239772U,	// XORi
    134239772U,	// XORi64
    134239772U,	// XORi_MM
    16799962U,	// XorRxRxRy16
    0U
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// ABSQ_S_PH
    0U,	// ABSQ_S_QB
    0U,	// ABSQ_S_W
    0U,	// ADD
    0U,	// ADDIUPC
    0U,	// ADDIUPC_MM
    0U,	// ADDIUPC_MMR6
    0U,	// ADDIUR1SP_MM
    0U,	// ADDIUR2_MM
    0U,	// ADDIUS5_MM
    0U,	// ADDIUSP_MM
    0U,	// ADDIU_MMR6
    0U,	// ADDQH_PH
    0U,	// ADDQH_R_PH
    0U,	// ADDQH_R_W
    0U,	// ADDQH_W
    0U,	// ADDQ_PH
    0U,	// ADDQ_S_PH
    0U,	// ADDQ_S_W
    0U,	// ADDSC
    0U,	// ADDS_A_B
    0U,	// ADDS_A_D
    0U,	// ADDS_A_H
    0U,	// ADDS_A_W
    0U,	// ADDS_S_B
    0U,	// ADDS_S_D
    0U,	// ADDS_S_H
    0U,	// ADDS_S_W
    0U,	// ADDS_U_B
    0U,	// ADDS_U_D
    0U,	// ADDS_U_H
    0U,	// ADDS_U_W
    0U,	// ADDU16_MM
    0U,	// ADDUH_QB
    0U,	// ADDUH_R_QB
    0U,	// ADDU_MMR6
    0U,	// ADDU_PH
    0U,	// ADDU_QB
    0U,	// ADDU_S_PH
    0U,	// ADDU_S_QB
    1U,	// ADDVI_B
    1U,	// ADDVI_D
    1U,	// ADDVI_H
    1U,	// ADDVI_W
    0U,	// ADDV_B
    0U,	// ADDV_D
    0U,	// ADDV_H
    0U,	// ADDV_W
    0U,	// ADDWC
    0U,	// ADD_A_B
    0U,	// ADD_A_D
    0U,	// ADD_A_H
    0U,	// ADD_A_W
    0U,	// ADD_MM
    0U,	// ADD_MMR6
    0U,	// ADDi
    0U,	// ADDi_MM
    0U,	// ADDiu
    0U,	// ADDiu_MM
    0U,	// ADDu
    0U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    8U,	// ALIGN
    8U,	// ALIGN_MMR6
    0U,	// ALUIPC
    0U,	// ALUIPC_MMR6
    0U,	// AND
    0U,	// AND16_MM
    0U,	// AND64
    0U,	// ANDI16_MM
    1U,	// ANDI_B
    0U,	// ANDI_MMR6
    0U,	// AND_MM
    0U,	// AND_MMR6
    0U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    2U,	// ANDi
    2U,	// ANDi64
    2U,	// ANDi_MM
    2U,	// APPEND
    0U,	// ASUB_S_B
    0U,	// ASUB_S_D
    0U,	// ASUB_S_H
    0U,	// ASUB_S_W
    0U,	// ASUB_U_B
    0U,	// ASUB_U_D
    0U,	// ASUB_U_H
    0U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// AUI
    0U,	// AUIPC
    0U,	// AUIPC_MMR6
    0U,	// AUI_MMR6
    0U,	// AVER_S_B
    0U,	// AVER_S_D
    0U,	// AVER_S_H
    0U,	// AVER_S_W
    0U,	// AVER_U_B
    0U,	// AVER_U_D
    0U,	// AVER_U_H
    0U,	// AVER_U_W
    0U,	// AVE_S_B
    0U,	// AVE_S_D
    0U,	// AVE_S_H
    0U,	// AVE_S_W
    0U,	// AVE_U_B
    0U,	// AVE_U_D
    0U,	// AVE_U_H
    0U,	// AVE_U_W
    0U,	// AddiuRxImmX16
    0U,	// AddiuRxPcImmX16
    0U,	// AddiuRxRxImm16
    0U,	// AddiuRxRxImmX16
    0U,	// AddiuRxRyOffMemX16
    0U,	// AddiuSpImm16
    0U,	// AddiuSpImmX16
    0U,	// AdduRxRyRz16
    0U,	// AndRxRxRy16
    0U,	// B
    0U,	// B16_MM
    0U,	// BADDu
    0U,	// BAL
    0U,	// BALC
    0U,	// BALC_MMR6
    2U,	// BALIGN
    0U,	// BAL_BR
    0U,	// BBIT0
    0U,	// BBIT032
    0U,	// BBIT1
    0U,	// BBIT132
    0U,	// BC
    0U,	// BC1EQZ
    0U,	// BC1F
    0U,	// BC1FL
    0U,	// BC1F_MM
    0U,	// BC1NEZ
    0U,	// BC1T
    0U,	// BC1TL
    0U,	// BC1T_MM
    0U,	// BC2EQZ
    0U,	// BC2NEZ
    1U,	// BCLRI_B
    1U,	// BCLRI_D
    1U,	// BCLRI_H
    1U,	// BCLRI_W
    0U,	// BCLR_B
    0U,	// BCLR_D
    0U,	// BCLR_H
    0U,	// BCLR_W
    0U,	// BC_MMR6
    0U,	// BEQ
    0U,	// BEQ64
    0U,	// BEQC
    0U,	// BEQL
    0U,	// BEQZ16_MM
    0U,	// BEQZALC
    0U,	// BEQZALC_MMR6
    0U,	// BEQZC
    0U,	// BEQZC_MM
    0U,	// BEQ_MM
    0U,	// BGE
    0U,	// BGEC
    0U,	// BGEU
    0U,	// BGEUC
    0U,	// BGEZ
    0U,	// BGEZ64
    0U,	// BGEZAL
    0U,	// BGEZALC
    0U,	// BGEZALC_MMR6
    0U,	// BGEZALL
    0U,	// BGEZALS_MM
    0U,	// BGEZAL_MM
    0U,	// BGEZC
    0U,	// BGEZL
    0U,	// BGEZ_MM
    0U,	// BGT
    0U,	// BGTU
    0U,	// BGTZ
    0U,	// BGTZ64
    0U,	// BGTZALC
    0U,	// BGTZALC_MMR6
    0U,	// BGTZC
    0U,	// BGTZL
    0U,	// BGTZ_MM
    3U,	// BINSLI_B
    3U,	// BINSLI_D
    3U,	// BINSLI_H
    3U,	// BINSLI_W
    4U,	// BINSL_B
    4U,	// BINSL_D
    4U,	// BINSL_H
    4U,	// BINSL_W
    3U,	// BINSRI_B
    3U,	// BINSRI_D
    3U,	// BINSRI_H
    3U,	// BINSRI_W
    4U,	// BINSR_B
    4U,	// BINSR_D
    4U,	// BINSR_H
    4U,	// BINSR_W
    0U,	// BITREV
    0U,	// BITSWAP
    0U,	// BITSWAP_MMR6
    0U,	// BLE
    0U,	// BLEU
    0U,	// BLEZ
    0U,	// BLEZ64
    0U,	// BLEZALC
    0U,	// BLEZALC_MMR6
    0U,	// BLEZC
    0U,	// BLEZL
    0U,	// BLEZ_MM
    0U,	// BLT
    0U,	// BLTC
    0U,	// BLTU
    0U,	// BLTUC
    0U,	// BLTZ
    0U,	// BLTZ64
    0U,	// BLTZAL
    0U,	// BLTZALC
    0U,	// BLTZALC_MMR6
    0U,	// BLTZALL
    0U,	// BLTZALS_MM
    0U,	// BLTZAL_MM
    0U,	// BLTZC
    0U,	// BLTZL
    0U,	// BLTZ_MM
    3U,	// BMNZI_B
    4U,	// BMNZ_V
    3U,	// BMZI_B
    4U,	// BMZ_V
    0U,	// BNE
    0U,	// BNE64
    0U,	// BNEC
    1U,	// BNEGI_B
    1U,	// BNEGI_D
    1U,	// BNEGI_H
    1U,	// BNEGI_W
    0U,	// BNEG_B
    0U,	// BNEG_D
    0U,	// BNEG_H
    0U,	// BNEG_W
    0U,	// BNEL
    0U,	// BNEZ16_MM
    0U,	// BNEZALC
    0U,	// BNEZALC_MMR6
    0U,	// BNEZC
    0U,	// BNEZC_MM
    0U,	// BNE_MM
    0U,	// BNVC
    0U,	// BNZ_B
    0U,	// BNZ_D
    0U,	// BNZ_H
    0U,	// BNZ_V
    0U,	// BNZ_W
    0U,	// BOVC
    0U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    0U,	// BREAK
    0U,	// BREAK16_MM
    0U,	// BREAK_MM
    0U,	// BREAK_MMR6
    3U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    4U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    1U,	// BSETI_B
    1U,	// BSETI_D
    1U,	// BSETI_H
    1U,	// BSETI_W
    0U,	// BSET_B
    0U,	// BSET_D
    0U,	// BSET_H
    0U,	// BSET_W
    0U,	// BZ_B
    0U,	// BZ_D
    0U,	// BZ_H
    0U,	// BZ_V
    0U,	// BZ_W
    0U,	// B_MM_Pseudo
    0U,	// BeqImm
    0U,	// BeqzRxImm16
    0U,	// BeqzRxImmX16
    0U,	// Bimm16
    0U,	// BimmX16
    0U,	// BneImm
    0U,	// BnezRxImm16
    0U,	// BnezRxImmX16
    0U,	// Break16
    0U,	// Bteqz16
    0U,	// BteqzT8CmpX16
    0U,	// BteqzT8CmpiX16
    0U,	// BteqzT8SltX16
    0U,	// BteqzT8SltiX16
    0U,	// BteqzT8SltiuX16
    0U,	// BteqzT8SltuX16
    0U,	// BteqzX16
    0U,	// Btnez16
    0U,	// BtnezT8CmpX16
    0U,	// BtnezT8CmpiX16
    0U,	// BtnezT8SltX16
    0U,	// BtnezT8SltiX16
    0U,	// BtnezT8SltiuX16
    0U,	// BtnezT8SltuX16
    0U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    0U,	// CACHE
    0U,	// CACHE_MM
    0U,	// CACHE_MMR6
    0U,	// CACHE_R6
    0U,	// CEIL_L_D64
    0U,	// CEIL_L_S
    0U,	// CEIL_W_D32
    0U,	// CEIL_W_D64
    0U,	// CEIL_W_MM
    0U,	// CEIL_W_S
    0U,	// CEIL_W_S_MM
    0U,	// CEQI_B
    0U,	// CEQI_D
    0U,	// CEQI_H
    0U,	// CEQI_W
    0U,	// CEQ_B
    0U,	// CEQ_D
    0U,	// CEQ_H
    0U,	// CEQ_W
    0U,	// CFC1
    0U,	// CFC1_MM
    0U,	// CFCMSA
    10U,	// CINS
    10U,	// CINS32
    0U,	// CLASS_D
    0U,	// CLASS_S
    0U,	// CLEI_S_B
    0U,	// CLEI_S_D
    0U,	// CLEI_S_H
    0U,	// CLEI_S_W
    1U,	// CLEI_U_B
    1U,	// CLEI_U_D
    1U,	// CLEI_U_H
    1U,	// CLEI_U_W
    0U,	// CLE_S_B
    0U,	// CLE_S_D
    0U,	// CLE_S_H
    0U,	// CLE_S_W
    0U,	// CLE_U_B
    0U,	// CLE_U_D
    0U,	// CLE_U_H
    0U,	// CLE_U_W
    0U,	// CLO
    0U,	// CLO_MM
    0U,	// CLO_MMR6
    0U,	// CLO_R6
    0U,	// CLTI_S_B
    0U,	// CLTI_S_D
    0U,	// CLTI_S_H
    0U,	// CLTI_S_W
    1U,	// CLTI_U_B
    1U,	// CLTI_U_D
    1U,	// CLTI_U_H
    1U,	// CLTI_U_W
    0U,	// CLT_S_B
    0U,	// CLT_S_D
    0U,	// CLT_S_H
    0U,	// CLT_S_W
    0U,	// CLT_U_B
    0U,	// CLT_U_D
    0U,	// CLT_U_H
    0U,	// CLT_U_W
    0U,	// CLZ
    0U,	// CLZ_MM
    0U,	// CLZ_MMR6
    0U,	// CLZ_R6
    0U,	// CMPGDU_EQ_QB
    0U,	// CMPGDU_LE_QB
    0U,	// CMPGDU_LT_QB
    0U,	// CMPGU_EQ_QB
    0U,	// CMPGU_LE_QB
    0U,	// CMPGU_LT_QB
    0U,	// CMPU_EQ_QB
    0U,	// CMPU_LE_QB
    0U,	// CMPU_LT_QB
    0U,	// CMP_EQ_D
    0U,	// CMP_EQ_PH
    0U,	// CMP_EQ_S
    0U,	// CMP_F_D
    0U,	// CMP_F_S
    0U,	// CMP_LE_D
    0U,	// CMP_LE_PH
    0U,	// CMP_LE_S
    0U,	// CMP_LT_D
    0U,	// CMP_LT_PH
    0U,	// CMP_LT_S
    0U,	// CMP_SAF_D
    0U,	// CMP_SAF_S
    0U,	// CMP_SEQ_D
    0U,	// CMP_SEQ_S
    0U,	// CMP_SLE_D
    0U,	// CMP_SLE_S
    0U,	// CMP_SLT_D
    0U,	// CMP_SLT_S
    0U,	// CMP_SUEQ_D
    0U,	// CMP_SUEQ_S
    0U,	// CMP_SULE_D
    0U,	// CMP_SULE_S
    0U,	// CMP_SULT_D
    0U,	// CMP_SULT_S
    0U,	// CMP_SUN_D
    0U,	// CMP_SUN_S
    0U,	// CMP_UEQ_D
    0U,	// CMP_UEQ_S
    0U,	// CMP_ULE_D
    0U,	// CMP_ULE_S
    0U,	// CMP_ULT_D
    0U,	// CMP_ULT_S
    0U,	// CMP_UN_D
    0U,	// CMP_UN_S
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    17U,	// COPY_S_B
    17U,	// COPY_S_D
    17U,	// COPY_S_H
    17U,	// COPY_S_W
    17U,	// COPY_U_B
    17U,	// COPY_U_D
    17U,	// COPY_U_H
    17U,	// COPY_U_W
    0U,	// CTC1
    0U,	// CTC1_MM
    0U,	// CTCMSA
    0U,	// CVT_D32_S
    0U,	// CVT_D32_W
    0U,	// CVT_D32_W_MM
    0U,	// CVT_D64_L
    0U,	// CVT_D64_S
    0U,	// CVT_D64_W
    0U,	// CVT_D_S_MM
    0U,	// CVT_L_D64
    0U,	// CVT_L_D64_MM
    0U,	// CVT_L_S
    0U,	// CVT_L_S_MM
    0U,	// CVT_S_D32
    0U,	// CVT_S_D32_MM
    0U,	// CVT_S_D64
    0U,	// CVT_S_L
    0U,	// CVT_S_W
    0U,	// CVT_S_W_MM
    0U,	// CVT_W_D32
    0U,	// CVT_W_D64
    0U,	// CVT_W_MM
    0U,	// CVT_W_S
    0U,	// CVT_W_S_MM
    0U,	// C_EQ_D32
    0U,	// C_EQ_D64
    0U,	// C_EQ_S
    0U,	// C_F_D32
    0U,	// C_F_D64
    0U,	// C_F_S
    0U,	// C_LE_D32
    0U,	// C_LE_D64
    0U,	// C_LE_S
    0U,	// C_LT_D32
    0U,	// C_LT_D64
    0U,	// C_LT_S
    0U,	// C_NGE_D32
    0U,	// C_NGE_D64
    0U,	// C_NGE_S
    0U,	// C_NGLE_D32
    0U,	// C_NGLE_D64
    0U,	// C_NGLE_S
    0U,	// C_NGL_D32
    0U,	// C_NGL_D64
    0U,	// C_NGL_S
    0U,	// C_NGT_D32
    0U,	// C_NGT_D64
    0U,	// C_NGT_S
    0U,	// C_OLE_D32
    0U,	// C_OLE_D64
    0U,	// C_OLE_S
    0U,	// C_OLT_D32
    0U,	// C_OLT_D64
    0U,	// C_OLT_S
    0U,	// C_SEQ_D32
    0U,	// C_SEQ_D64
    0U,	// C_SEQ_S
    0U,	// C_SF_D32
    0U,	// C_SF_D64
    0U,	// C_SF_S
    0U,	// C_UEQ_D32
    0U,	// C_UEQ_D64
    0U,	// C_UEQ_S
    0U,	// C_ULE_D32
    0U,	// C_ULE_D64
    0U,	// C_ULE_S
    0U,	// C_ULT_D32
    0U,	// C_ULT_D64
    0U,	// C_ULT_S
    0U,	// C_UN_D32
    0U,	// C_UN_D64
    0U,	// C_UN_S
    0U,	// CmpRxRy16
    0U,	// CmpiRxImm16
    0U,	// CmpiRxImmX16
    0U,	// Constant32
    0U,	// DADD
    0U,	// DADDi
    0U,	// DADDiu
    0U,	// DADDu
    0U,	// DAHI
    0U,	// DAHI_MM64R6
    8U,	// DALIGN
    8U,	// DALIGN_MM64R6
    0U,	// DATI
    0U,	// DATI_MM64R6
    0U,	// DAUI
    0U,	// DAUI_MM64R6
    0U,	// DBITSWAP
    0U,	// DCLO
    0U,	// DCLO_R6
    0U,	// DCLZ
    0U,	// DCLZ_R6
    0U,	// DDIV
    0U,	// DDIVU
    0U,	// DDIVU_MM64R6
    0U,	// DDIV_MM64R6
    0U,	// DERET
    0U,	// DERET_MM
    42U,	// DEXT
    42U,	// DEXTM
    42U,	// DEXTM_MM64R6
    42U,	// DEXTU
    42U,	// DEXTU_MM64R6
    42U,	// DEXT_MM64R6
    0U,	// DI
    42U,	// DINS
    42U,	// DINSM
    42U,	// DINSU
    0U,	// DIV
    0U,	// DIVU
    0U,	// DIVU_MMR6
    0U,	// DIV_MMR6
    0U,	// DIV_S_B
    0U,	// DIV_S_D
    0U,	// DIV_S_H
    0U,	// DIV_S_W
    0U,	// DIV_U_B
    0U,	// DIV_U_D
    0U,	// DIV_U_H
    0U,	// DIV_U_W
    0U,	// DI_MM
    8U,	// DLSA
    8U,	// DLSA_R6
    2U,	// DMFC0
    0U,	// DMFC1
    2U,	// DMFC2
    0U,	// DMFC2_OCTEON
    0U,	// DMOD
    0U,	// DMODU
    0U,	// DMODU_MM64R6
    0U,	// DMOD_MM64R6
    0U,	// DMTC0
    0U,	// DMTC1
    0U,	// DMTC2
    0U,	// DMTC2_OCTEON
    0U,	// DMUH
    0U,	// DMUHU
    0U,	// DMUL
    0U,	// DMULT
    0U,	// DMULTu
    0U,	// DMULU
    0U,	// DMUL_R6
    0U,	// DOTP_S_D
    0U,	// DOTP_S_H
    0U,	// DOTP_S_W
    0U,	// DOTP_U_D
    0U,	// DOTP_U_H
    0U,	// DOTP_U_W
    4U,	// DPADD_S_D
    4U,	// DPADD_S_H
    4U,	// DPADD_S_W
    4U,	// DPADD_U_D
    4U,	// DPADD_U_H
    4U,	// DPADD_U_W
    0U,	// DPAQX_SA_W_PH
    0U,	// DPAQX_S_W_PH
    0U,	// DPAQ_SA_L_W
    0U,	// DPAQ_S_W_PH
    0U,	// DPAU_H_QBL
    0U,	// DPAU_H_QBR
    0U,	// DPAX_W_PH
    0U,	// DPA_W_PH
    0U,	// DPOP
    0U,	// DPSQX_SA_W_PH
    0U,	// DPSQX_S_W_PH
    0U,	// DPSQ_SA_L_W
    0U,	// DPSQ_S_W_PH
    4U,	// DPSUB_S_D
    4U,	// DPSUB_S_H
    4U,	// DPSUB_S_W
    4U,	// DPSUB_U_D
    4U,	// DPSUB_U_H
    4U,	// DPSUB_U_W
    0U,	// DPSU_H_QBL
    0U,	// DPSU_H_QBR
    0U,	// DPSX_W_PH
    0U,	// DPS_W_PH
    2U,	// DROTR
    2U,	// DROTR32
    0U,	// DROTRV
    0U,	// DSBH
    0U,	// DSDIV
    0U,	// DSHD
    2U,	// DSLL
    2U,	// DSLL32
    0U,	// DSLL64_32
    0U,	// DSLLV
    2U,	// DSRA
    2U,	// DSRA32
    0U,	// DSRAV
    2U,	// DSRL
    2U,	// DSRL32
    0U,	// DSRLV
    0U,	// DSUB
    0U,	// DSUBu
    0U,	// DUDIV
    0U,	// DivRxRy16
    0U,	// DivuRxRy16
    0U,	// EHB
    0U,	// EHB_MM
    0U,	// EHB_MMR6
    0U,	// EI
    0U,	// EI_MM
    0U,	// EI_MMR6
    0U,	// ERET
    0U,	// ERETNC
    0U,	// ERETNC_MMR6
    0U,	// ERET_MM
    0U,	// ERET_MMR6
    42U,	// EXT
    2U,	// EXTP
    2U,	// EXTPDP
    0U,	// EXTPDPV
    0U,	// EXTPV
    0U,	// EXTRV_RS_W
    0U,	// EXTRV_R_W
    0U,	// EXTRV_S_H
    0U,	// EXTRV_W
    2U,	// EXTR_RS_W
    2U,	// EXTR_R_W
    2U,	// EXTR_S_H
    2U,	// EXTR_W
    10U,	// EXTS
    10U,	// EXTS32
    42U,	// EXT_MM
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    0U,	// FABS_D32
    0U,	// FABS_D64
    0U,	// FABS_MM
    0U,	// FABS_S
    0U,	// FABS_S_MM
    0U,	// FABS_W
    0U,	// FADD_D
    0U,	// FADD_D32
    0U,	// FADD_D64
    0U,	// FADD_MM
    0U,	// FADD_S
    0U,	// FADD_S_MM
    0U,	// FADD_W
    0U,	// FCAF_D
    0U,	// FCAF_W
    0U,	// FCEQ_D
    0U,	// FCEQ_W
    0U,	// FCLASS_D
    0U,	// FCLASS_W
    0U,	// FCLE_D
    0U,	// FCLE_W
    0U,	// FCLT_D
    0U,	// FCLT_W
    0U,	// FCMP_D32
    0U,	// FCMP_D32_MM
    0U,	// FCMP_D64
    0U,	// FCMP_S32
    0U,	// FCMP_S32_MM
    0U,	// FCNE_D
    0U,	// FCNE_W
    0U,	// FCOR_D
    0U,	// FCOR_W
    0U,	// FCUEQ_D
    0U,	// FCUEQ_W
    0U,	// FCULE_D
    0U,	// FCULE_W
    0U,	// FCULT_D
    0U,	// FCULT_W
    0U,	// FCUNE_D
    0U,	// FCUNE_W
    0U,	// FCUN_D
    0U,	// FCUN_W
    0U,	// FDIV_D
    0U,	// FDIV_D32
    0U,	// FDIV_D64
    0U,	// FDIV_MM
    0U,	// FDIV_S
    0U,	// FDIV_S_MM
    0U,	// FDIV_W
    0U,	// FEXDO_H
    0U,	// FEXDO_W
    0U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    0U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    0U,	// FEXUPL_D
    0U,	// FEXUPL_W
    0U,	// FEXUPR_D
    0U,	// FEXUPR_W
    0U,	// FFINT_S_D
    0U,	// FFINT_S_W
    0U,	// FFINT_U_D
    0U,	// FFINT_U_W
    0U,	// FFQL_D
    0U,	// FFQL_W
    0U,	// FFQR_D
    0U,	// FFQR_W
    0U,	// FILL_B
    0U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    0U,	// FILL_H
    0U,	// FILL_W
    0U,	// FLOG2_D
    0U,	// FLOG2_W
    0U,	// FLOOR_L_D64
    0U,	// FLOOR_L_S
    0U,	// FLOOR_W_D32
    0U,	// FLOOR_W_D64
    0U,	// FLOOR_W_MM
    0U,	// FLOOR_W_S
    0U,	// FLOOR_W_S_MM
    4U,	// FMADD_D
    4U,	// FMADD_W
    0U,	// FMAX_A_D
    0U,	// FMAX_A_W
    0U,	// FMAX_D
    0U,	// FMAX_W
    0U,	// FMIN_A_D
    0U,	// FMIN_A_W
    0U,	// FMIN_D
    0U,	// FMIN_W
    0U,	// FMOV_D32
    0U,	// FMOV_D32_MM
    0U,	// FMOV_D64
    0U,	// FMOV_S
    0U,	// FMOV_S_MM
    4U,	// FMSUB_D
    4U,	// FMSUB_W
    0U,	// FMUL_D
    0U,	// FMUL_D32
    0U,	// FMUL_D64
    0U,	// FMUL_MM
    0U,	// FMUL_S
    0U,	// FMUL_S_MM
    0U,	// FMUL_W
    0U,	// FNEG_D32
    0U,	// FNEG_D64
    0U,	// FNEG_MM
    0U,	// FNEG_S
    0U,	// FNEG_S_MM
    0U,	// FRCP_D
    0U,	// FRCP_W
    0U,	// FRINT_D
    0U,	// FRINT_W
    0U,	// FRSQRT_D
    0U,	// FRSQRT_W
    0U,	// FSAF_D
    0U,	// FSAF_W
    0U,	// FSEQ_D
    0U,	// FSEQ_W
    0U,	// FSLE_D
    0U,	// FSLE_W
    0U,	// FSLT_D
    0U,	// FSLT_W
    0U,	// FSNE_D
    0U,	// FSNE_W
    0U,	// FSOR_D
    0U,	// FSOR_W
    0U,	// FSQRT_D
    0U,	// FSQRT_D32
    0U,	// FSQRT_D64
    0U,	// FSQRT_MM
    0U,	// FSQRT_S
    0U,	// FSQRT_S_MM
    0U,	// FSQRT_W
    0U,	// FSUB_D
    0U,	// FSUB_D32
    0U,	// FSUB_D64
    0U,	// FSUB_MM
    0U,	// FSUB_S
    0U,	// FSUB_S_MM
    0U,	// FSUB_W
    0U,	// FSUEQ_D
    0U,	// FSUEQ_W
    0U,	// FSULE_D
    0U,	// FSULE_W
    0U,	// FSULT_D
    0U,	// FSULT_W
    0U,	// FSUNE_D
    0U,	// FSUNE_W
    0U,	// FSUN_D
    0U,	// FSUN_W
    0U,	// FTINT_S_D
    0U,	// FTINT_S_W
    0U,	// FTINT_U_D
    0U,	// FTINT_U_W
    0U,	// FTQ_H
    0U,	// FTQ_W
    0U,	// FTRUNC_S_D
    0U,	// FTRUNC_S_W
    0U,	// FTRUNC_U_D
    0U,	// FTRUNC_U_W
    0U,	// GotPrologue16
    0U,	// HADD_S_D
    0U,	// HADD_S_H
    0U,	// HADD_S_W
    0U,	// HADD_U_D
    0U,	// HADD_U_H
    0U,	// HADD_U_W
    0U,	// HSUB_S_D
    0U,	// HSUB_S_H
    0U,	// HSUB_S_W
    0U,	// HSUB_U_D
    0U,	// HSUB_U_H
    0U,	// HSUB_U_W
    0U,	// ILVEV_B
    0U,	// ILVEV_D
    0U,	// ILVEV_H
    0U,	// ILVEV_W
    0U,	// ILVL_B
    0U,	// ILVL_D
    0U,	// ILVL_H
    0U,	// ILVL_W
    0U,	// ILVOD_B
    0U,	// ILVOD_D
    0U,	// ILVOD_H
    0U,	// ILVOD_W
    0U,	// ILVR_B
    0U,	// ILVR_D
    0U,	// ILVR_H
    0U,	// ILVR_W
    42U,	// INS
    0U,	// INSERT_B
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    0U,	// INSERT_D
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    0U,	// INSERT_H
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    0U,	// INSERT_W
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    0U,	// INSV
    0U,	// INSVE_B
    0U,	// INSVE_D
    0U,	// INSVE_H
    0U,	// INSVE_W
    42U,	// INS_MM
    0U,	// J
    0U,	// JAL
    0U,	// JALR
    0U,	// JALR16_MM
    0U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRPseudo
    0U,	// JALRS16_MM
    0U,	// JALRS_MM
    0U,	// JALR_HB
    0U,	// JALR_MM
    0U,	// JALS_MM
    0U,	// JALX
    0U,	// JALX_MM
    0U,	// JAL_MM
    0U,	// JIALC
    0U,	// JIALC_MMR6
    0U,	// JIC
    0U,	// JIC_MMR6
    0U,	// JR
    0U,	// JR16_MM
    0U,	// JR64
    0U,	// JRADDIUSP
    0U,	// JRC16_MM
    0U,	// JR_HB
    0U,	// JR_HB_R6
    0U,	// JR_MM
    0U,	// J_MM
    0U,	// Jal16
    0U,	// JalB16
    0U,	// JalOneReg
    0U,	// JalTwoReg
    0U,	// JrRa16
    0U,	// JrcRa16
    0U,	// JrcRx16
    0U,	// JumpLinkReg16
    0U,	// LB
    0U,	// LB64
    0U,	// LBU16_MM
    0U,	// LBUX
    0U,	// LB_MM
    0U,	// LBu
    0U,	// LBu64
    0U,	// LBu_MM
    0U,	// LD
    0U,	// LDC1
    0U,	// LDC164
    0U,	// LDC1_MM
    0U,	// LDC2
    0U,	// LDC2_R6
    0U,	// LDC3
    0U,	// LDI_B
    0U,	// LDI_D
    0U,	// LDI_H
    0U,	// LDI_W
    0U,	// LDL
    0U,	// LDPC
    0U,	// LDR
    0U,	// LDXC1
    0U,	// LDXC164
    0U,	// LD_B
    0U,	// LD_D
    0U,	// LD_H
    0U,	// LD_W
    0U,	// LEA_ADDiu
    0U,	// LEA_ADDiu64
    0U,	// LEA_ADDiu_MM
    0U,	// LH
    0U,	// LH64
    0U,	// LHU16_MM
    0U,	// LHX
    0U,	// LH_MM
    0U,	// LHu
    0U,	// LHu64
    0U,	// LHu_MM
    0U,	// LI16_MM
    0U,	// LL
    0U,	// LLD
    0U,	// LLD_R6
    0U,	// LL_MM
    0U,	// LL_R6
    0U,	// LOAD_ACC128
    0U,	// LOAD_ACC64
    0U,	// LOAD_ACC64DSP
    0U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    8U,	// LSA
    0U,	// LSA_MMR6
    8U,	// LSA_R6
    0U,	// LUXC1
    0U,	// LUXC164
    0U,	// LUXC1_MM
    0U,	// LUi
    0U,	// LUi64
    0U,	// LUi_MM
    0U,	// LW
    0U,	// LW16_MM
    0U,	// LW64
    0U,	// LWC1
    0U,	// LWC1_MM
    0U,	// LWC2
    0U,	// LWC2_R6
    0U,	// LWC3
    0U,	// LWGP_MM
    0U,	// LWL
    0U,	// LWL64
    0U,	// LWL_MM
    0U,	// LWM16_MM
    0U,	// LWM32_MM
    0U,	// LWM_MM
    0U,	// LWPC
    0U,	// LWPC_MMR6
    0U,	// LWP_MM
    0U,	// LWR
    0U,	// LWR64
    0U,	// LWR_MM
    0U,	// LWSP_MM
    0U,	// LWUPC
    0U,	// LWU_MM
    0U,	// LWX
    0U,	// LWXC1
    0U,	// LWXC1_MM
    0U,	// LWXS_MM
    0U,	// LW_MM
    0U,	// LWu
    0U,	// LbRxRyOffMemX16
    0U,	// LbuRxRyOffMemX16
    0U,	// LhRxRyOffMemX16
    0U,	// LhuRxRyOffMemX16
    0U,	// LiRxImm16
    0U,	// LiRxImmAlignX16
    0U,	// LiRxImmX16
    0U,	// LoadAddrImm32
    0U,	// LoadAddrImm64
    0U,	// LoadAddrReg32
    0U,	// LoadAddrReg64
    0U,	// LoadImm32
    0U,	// LoadImm64
    0U,	// LwConstant32
    0U,	// LwRxPcTcp16
    0U,	// LwRxPcTcpX16
    0U,	// LwRxRyOffMemX16
    0U,	// LwRxSpImmX16
    0U,	// MADD
    4U,	// MADDF_D
    4U,	// MADDF_S
    4U,	// MADDR_Q_H
    4U,	// MADDR_Q_W
    0U,	// MADDU
    0U,	// MADDU_DSP
    0U,	// MADDU_MM
    4U,	// MADDV_B
    4U,	// MADDV_D
    4U,	// MADDV_H
    4U,	// MADDV_W
    40U,	// MADD_D32
    40U,	// MADD_D32_MM
    40U,	// MADD_D64
    0U,	// MADD_DSP
    0U,	// MADD_MM
    4U,	// MADD_Q_H
    4U,	// MADD_Q_W
    40U,	// MADD_S
    40U,	// MADD_S_MM
    0U,	// MAQ_SA_W_PHL
    0U,	// MAQ_SA_W_PHR
    0U,	// MAQ_S_W_PHL
    0U,	// MAQ_S_W_PHR
    0U,	// MAXA_D
    0U,	// MAXA_S
    0U,	// MAXI_S_B
    0U,	// MAXI_S_D
    0U,	// MAXI_S_H
    0U,	// MAXI_S_W
    1U,	// MAXI_U_B
    1U,	// MAXI_U_D
    1U,	// MAXI_U_H
    1U,	// MAXI_U_W
    0U,	// MAX_A_B
    0U,	// MAX_A_D
    0U,	// MAX_A_H
    0U,	// MAX_A_W
    0U,	// MAX_D
    0U,	// MAX_S
    0U,	// MAX_S_B
    0U,	// MAX_S_D
    0U,	// MAX_S_H
    0U,	// MAX_S_W
    0U,	// MAX_U_B
    0U,	// MAX_U_D
    0U,	// MAX_U_H
    0U,	// MAX_U_W
    2U,	// MFC0
    0U,	// MFC1
    0U,	// MFC1_MM
    2U,	// MFC2
    0U,	// MFHC1_D32
    0U,	// MFHC1_D64
    0U,	// MFHC1_MM
    0U,	// MFHI
    0U,	// MFHI16_MM
    0U,	// MFHI64
    0U,	// MFHI_DSP
    0U,	// MFHI_MM
    0U,	// MFLO
    0U,	// MFLO16_MM
    0U,	// MFLO64
    0U,	// MFLO_DSP
    0U,	// MFLO_MM
    0U,	// MINA_D
    0U,	// MINA_S
    0U,	// MINI_S_B
    0U,	// MINI_S_D
    0U,	// MINI_S_H
    0U,	// MINI_S_W
    1U,	// MINI_U_B
    1U,	// MINI_U_D
    1U,	// MINI_U_H
    1U,	// MINI_U_W
    0U,	// MIN_A_B
    0U,	// MIN_A_D
    0U,	// MIN_A_H
    0U,	// MIN_A_W
    0U,	// MIN_D
    0U,	// MIN_S
    0U,	// MIN_S_B
    0U,	// MIN_S_D
    0U,	// MIN_S_H
    0U,	// MIN_S_W
    0U,	// MIN_U_B
    0U,	// MIN_U_D
    0U,	// MIN_U_H
    0U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    0U,	// MOD
    0U,	// MODSUB
    0U,	// MODU
    0U,	// MODU_MMR6
    0U,	// MOD_MMR6
    0U,	// MOD_S_B
    0U,	// MOD_S_D
    0U,	// MOD_S_H
    0U,	// MOD_S_W
    0U,	// MOD_U_B
    0U,	// MOD_U_D
    0U,	// MOD_U_H
    0U,	// MOD_U_W
    0U,	// MOVE16_MM
    0U,	// MOVEP_MM
    0U,	// MOVE_V
    0U,	// MOVF_D32
    0U,	// MOVF_D32_MM
    0U,	// MOVF_D64
    0U,	// MOVF_I
    0U,	// MOVF_I64
    0U,	// MOVF_I_MM
    0U,	// MOVF_S
    0U,	// MOVF_S_MM
    0U,	// MOVN_I64_D64
    0U,	// MOVN_I64_I
    0U,	// MOVN_I64_I64
    0U,	// MOVN_I64_S
    0U,	// MOVN_I_D32
    0U,	// MOVN_I_D32_MM
    0U,	// MOVN_I_D64
    0U,	// MOVN_I_I
    0U,	// MOVN_I_I64
    0U,	// MOVN_I_MM
    0U,	// MOVN_I_S
    0U,	// MOVN_I_S_MM
    0U,	// MOVT_D32
    0U,	// MOVT_D32_MM
    0U,	// MOVT_D64
    0U,	// MOVT_I
    0U,	// MOVT_I64
    0U,	// MOVT_I_MM
    0U,	// MOVT_S
    0U,	// MOVT_S_MM
    0U,	// MOVZ_I64_D64
    0U,	// MOVZ_I64_I
    0U,	// MOVZ_I64_I64
    0U,	// MOVZ_I64_S
    0U,	// MOVZ_I_D32
    0U,	// MOVZ_I_D32_MM
    0U,	// MOVZ_I_D64
    0U,	// MOVZ_I_I
    0U,	// MOVZ_I_I64
    0U,	// MOVZ_I_MM
    0U,	// MOVZ_I_S
    0U,	// MOVZ_I_S_MM
    0U,	// MSUB
    4U,	// MSUBF_D
    4U,	// MSUBF_S
    4U,	// MSUBR_Q_H
    4U,	// MSUBR_Q_W
    0U,	// MSUBU
    0U,	// MSUBU_DSP
    0U,	// MSUBU_MM
    4U,	// MSUBV_B
    4U,	// MSUBV_D
    4U,	// MSUBV_H
    4U,	// MSUBV_W
    40U,	// MSUB_D32
    40U,	// MSUB_D32_MM
    40U,	// MSUB_D64
    0U,	// MSUB_DSP
    0U,	// MSUB_MM
    4U,	// MSUB_Q_H
    4U,	// MSUB_Q_W
    40U,	// MSUB_S
    40U,	// MSUB_S_MM
    0U,	// MTC0
    0U,	// MTC1
    0U,	// MTC1_MM
    0U,	// MTC2
    0U,	// MTHC1_D32
    0U,	// MTHC1_D64
    0U,	// MTHC1_MM
    0U,	// MTHI
    0U,	// MTHI64
    0U,	// MTHI_DSP
    0U,	// MTHI_MM
    0U,	// MTHLIP
    0U,	// MTLO
    0U,	// MTLO64
    0U,	// MTLO_DSP
    0U,	// MTLO_MM
    0U,	// MTM0
    0U,	// MTM1
    0U,	// MTM2
    0U,	// MTP0
    0U,	// MTP1
    0U,	// MTP2
    0U,	// MUH
    0U,	// MUHU
    0U,	// MUHU_MMR6
    0U,	// MUH_MMR6
    0U,	// MUL
    0U,	// MULEQ_S_W_PHL
    0U,	// MULEQ_S_W_PHR
    0U,	// MULEU_S_PH_QBL
    0U,	// MULEU_S_PH_QBR
    0U,	// MULQ_RS_PH
    0U,	// MULQ_RS_W
    0U,	// MULQ_S_PH
    0U,	// MULQ_S_W
    0U,	// MULR_Q_H
    0U,	// MULR_Q_W
    0U,	// MULSAQ_S_W_PH
    0U,	// MULSA_W_PH
    0U,	// MULT
    0U,	// MULTU_DSP
    0U,	// MULT_DSP
    0U,	// MULT_MM
    0U,	// MULTu
    0U,	// MULTu_MM
    0U,	// MULU
    0U,	// MULU_MMR6
    0U,	// MULV_B
    0U,	// MULV_D
    0U,	// MULV_H
    0U,	// MULV_W
    0U,	// MUL_MM
    0U,	// MUL_MMR6
    0U,	// MUL_PH
    0U,	// MUL_Q_H
    0U,	// MUL_Q_W
    0U,	// MUL_R6
    0U,	// MUL_S_PH
    0U,	// Mfhi16
    0U,	// Mflo16
    0U,	// Move32R16
    0U,	// MoveR3216
    0U,	// MultRxRy16
    0U,	// MultRxRyRz16
    0U,	// MultuRxRy16
    0U,	// MultuRxRyRz16
    0U,	// NLOC_B
    0U,	// NLOC_D
    0U,	// NLOC_H
    0U,	// NLOC_W
    0U,	// NLZC_B
    0U,	// NLZC_D
    0U,	// NLZC_H
    0U,	// NLZC_W
    40U,	// NMADD_D32
    40U,	// NMADD_D32_MM
    40U,	// NMADD_D64
    40U,	// NMADD_S
    40U,	// NMADD_S_MM
    40U,	// NMSUB_D32
    40U,	// NMSUB_D32_MM
    40U,	// NMSUB_D64
    40U,	// NMSUB_S
    40U,	// NMSUB_S_MM
    0U,	// NOP
    0U,	// NOR
    0U,	// NOR64
    1U,	// NORI_B
    0U,	// NOR_MM
    0U,	// NOR_MMR6
    0U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    0U,	// NOT16_MM
    0U,	// NegRxRy16
    0U,	// NotRxRy16
    0U,	// OR
    0U,	// OR16_MM
    0U,	// OR64
    1U,	// ORI_B
    0U,	// ORI_MMR6
    0U,	// OR_MM
    0U,	// OR_MMR6
    0U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    2U,	// ORi
    2U,	// ORi64
    2U,	// ORi_MM
    0U,	// OrRxRxRy16
    0U,	// PACKRL_PH
    0U,	// PAUSE
    0U,	// PAUSE_MM
    0U,	// PCKEV_B
    0U,	// PCKEV_D
    0U,	// PCKEV_H
    0U,	// PCKEV_W
    0U,	// PCKOD_B
    0U,	// PCKOD_D
    0U,	// PCKOD_H
    0U,	// PCKOD_W
    0U,	// PCNT_B
    0U,	// PCNT_D
    0U,	// PCNT_H
    0U,	// PCNT_W
    0U,	// PICK_PH
    0U,	// PICK_QB
    0U,	// POP
    0U,	// PRECEQU_PH_QBL
    0U,	// PRECEQU_PH_QBLA
    0U,	// PRECEQU_PH_QBR
    0U,	// PRECEQU_PH_QBRA
    0U,	// PRECEQ_W_PHL
    0U,	// PRECEQ_W_PHR
    0U,	// PRECEU_PH_QBL
    0U,	// PRECEU_PH_QBLA
    0U,	// PRECEU_PH_QBR
    0U,	// PRECEU_PH_QBRA
    0U,	// PRECRQU_S_QB_PH
    0U,	// PRECRQ_PH_W
    0U,	// PRECRQ_QB_PH
    0U,	// PRECRQ_RS_PH_W
    0U,	// PRECR_QB_PH
    2U,	// PRECR_SRA_PH_W
    2U,	// PRECR_SRA_R_PH_W
    0U,	// PREF
    0U,	// PREF_MM
    0U,	// PREF_MMR6
    0U,	// PREF_R6
    2U,	// PREPEND
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    0U,	// PseudoCVT_D32_W
    0U,	// PseudoCVT_D64_L
    0U,	// PseudoCVT_D64_W
    0U,	// PseudoCVT_S_L
    0U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    0U,	// PseudoUDIV
    0U,	// RADDU_W_QB
    0U,	// RDDSP
    0U,	// RDHWR
    0U,	// RDHWR64
    0U,	// RDHWR_MM
    0U,	// REPLV_PH
    0U,	// REPLV_QB
    0U,	// REPL_PH
    0U,	// REPL_QB
    0U,	// RINT_D
    0U,	// RINT_S
    2U,	// ROTR
    0U,	// ROTRV
    0U,	// ROTRV_MM
    2U,	// ROTR_MM
    0U,	// ROUND_L_D64
    0U,	// ROUND_L_S
    0U,	// ROUND_W_D32
    0U,	// ROUND_W_D64
    0U,	// ROUND_W_MM
    0U,	// ROUND_W_S
    0U,	// ROUND_W_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    2U,	// SAT_S_B
    2U,	// SAT_S_D
    1U,	// SAT_S_H
    2U,	// SAT_S_W
    2U,	// SAT_U_B
    2U,	// SAT_U_D
    1U,	// SAT_U_H
    2U,	// SAT_U_W
    0U,	// SB
    0U,	// SB16_MM
    0U,	// SB64
    0U,	// SB_MM
    0U,	// SC
    0U,	// SCD
    0U,	// SCD_R6
    0U,	// SC_MM
    0U,	// SC_R6
    0U,	// SD
    0U,	// SDBBP
    0U,	// SDBBP16_MM
    0U,	// SDBBP_MM
    0U,	// SDBBP_R6
    0U,	// SDC1
    0U,	// SDC164
    0U,	// SDC1_MM
    0U,	// SDC2
    0U,	// SDC2_R6
    0U,	// SDC3
    0U,	// SDIV
    0U,	// SDIV_MM
    0U,	// SDL
    0U,	// SDR
    0U,	// SDXC1
    0U,	// SDXC164
    0U,	// SEB
    0U,	// SEB64
    0U,	// SEB_MM
    0U,	// SEB_MMR6
    0U,	// SEH
    0U,	// SEH64
    0U,	// SEH_MM
    0U,	// SEH_MMR6
    0U,	// SELEQZ
    0U,	// SELEQZ64
    0U,	// SELEQZ_D
    0U,	// SELEQZ_MMR6
    0U,	// SELEQZ_S
    0U,	// SELNEZ
    0U,	// SELNEZ64
    0U,	// SELNEZ_D
    0U,	// SELNEZ_MMR6
    0U,	// SELNEZ_S
    4U,	// SEL_D
    4U,	// SEL_S
    0U,	// SEQ
    0U,	// SEQi
    0U,	// SH
    0U,	// SH16_MM
    0U,	// SH64
    1U,	// SHF_B
    1U,	// SHF_H
    1U,	// SHF_W
    0U,	// SHILO
    0U,	// SHILOV
    0U,	// SHLLV_PH
    0U,	// SHLLV_QB
    0U,	// SHLLV_S_PH
    0U,	// SHLLV_S_W
    2U,	// SHLL_PH
    2U,	// SHLL_QB
    2U,	// SHLL_S_PH
    2U,	// SHLL_S_W
    0U,	// SHRAV_PH
    0U,	// SHRAV_QB
    0U,	// SHRAV_R_PH
    0U,	// SHRAV_R_QB
    0U,	// SHRAV_R_W
    2U,	// SHRA_PH
    2U,	// SHRA_QB
    2U,	// SHRA_R_PH
    2U,	// SHRA_R_QB
    2U,	// SHRA_R_W
    0U,	// SHRLV_PH
    0U,	// SHRLV_QB
    2U,	// SHRL_PH
    2U,	// SHRL_QB
    0U,	// SH_MM
    19U,	// SLDI_B
    19U,	// SLDI_D
    19U,	// SLDI_H
    19U,	// SLDI_W
    20U,	// SLD_B
    20U,	// SLD_D
    20U,	// SLD_H
    20U,	// SLD_W
    2U,	// SLL
    0U,	// SLL16_MM
    0U,	// SLL64_32
    0U,	// SLL64_64
    1U,	// SLLI_B
    1U,	// SLLI_D
    1U,	// SLLI_H
    1U,	// SLLI_W
    0U,	// SLLV
    0U,	// SLLV_MM
    0U,	// SLL_B
    0U,	// SLL_D
    0U,	// SLL_H
    2U,	// SLL_MM
    2U,	// SLL_MMR6
    0U,	// SLL_W
    0U,	// SLT
    0U,	// SLT64
    0U,	// SLT_MM
    0U,	// SLTi
    0U,	// SLTi64
    0U,	// SLTi_MM
    0U,	// SLTiu
    0U,	// SLTiu64
    0U,	// SLTiu_MM
    0U,	// SLTu
    0U,	// SLTu64
    0U,	// SLTu_MM
    0U,	// SNE
    0U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    17U,	// SPLATI_B
    17U,	// SPLATI_D
    17U,	// SPLATI_H
    17U,	// SPLATI_W
    16U,	// SPLAT_B
    16U,	// SPLAT_D
    16U,	// SPLAT_H
    16U,	// SPLAT_W
    2U,	// SRA
    1U,	// SRAI_B
    1U,	// SRAI_D
    1U,	// SRAI_H
    1U,	// SRAI_W
    2U,	// SRARI_B
    2U,	// SRARI_D
    1U,	// SRARI_H
    2U,	// SRARI_W
    0U,	// SRAR_B
    0U,	// SRAR_D
    0U,	// SRAR_H
    0U,	// SRAR_W
    0U,	// SRAV
    0U,	// SRAV_MM
    0U,	// SRA_B
    0U,	// SRA_D
    0U,	// SRA_H
    2U,	// SRA_MM
    0U,	// SRA_W
    2U,	// SRL
    0U,	// SRL16_MM
    1U,	// SRLI_B
    1U,	// SRLI_D
    1U,	// SRLI_H
    1U,	// SRLI_W
    2U,	// SRLRI_B
    2U,	// SRLRI_D
    1U,	// SRLRI_H
    2U,	// SRLRI_W
    0U,	// SRLR_B
    0U,	// SRLR_D
    0U,	// SRLR_H
    0U,	// SRLR_W
    0U,	// SRLV
    0U,	// SRLV_MM
    0U,	// SRL_B
    0U,	// SRL_D
    0U,	// SRL_H
    2U,	// SRL_MM
    0U,	// SRL_W
    0U,	// SSNOP
    0U,	// SSNOP_MM
    0U,	// STORE_ACC128
    0U,	// STORE_ACC64
    0U,	// STORE_ACC64DSP
    0U,	// STORE_CCOND_DSP
    0U,	// ST_B
    0U,	// ST_D
    0U,	// ST_H
    0U,	// ST_W
    0U,	// SUB
    0U,	// SUBQH_PH
    0U,	// SUBQH_R_PH
    0U,	// SUBQH_R_W
    0U,	// SUBQH_W
    0U,	// SUBQ_PH
    0U,	// SUBQ_S_PH
    0U,	// SUBQ_S_W
    0U,	// SUBSUS_U_B
    0U,	// SUBSUS_U_D
    0U,	// SUBSUS_U_H
    0U,	// SUBSUS_U_W
    0U,	// SUBSUU_S_B
    0U,	// SUBSUU_S_D
    0U,	// SUBSUU_S_H
    0U,	// SUBSUU_S_W
    0U,	// SUBS_S_B
    0U,	// SUBS_S_D
    0U,	// SUBS_S_H
    0U,	// SUBS_S_W
    0U,	// SUBS_U_B
    0U,	// SUBS_U_D
    0U,	// SUBS_U_H
    0U,	// SUBS_U_W
    0U,	// SUBU16_MM
    0U,	// SUBUH_QB
    0U,	// SUBUH_R_QB
    0U,	// SUBU_MMR6
    0U,	// SUBU_PH
    0U,	// SUBU_QB
    0U,	// SUBU_S_PH
    0U,	// SUBU_S_QB
    1U,	// SUBVI_B
    1U,	// SUBVI_D
    1U,	// SUBVI_H
    1U,	// SUBVI_W
    0U,	// SUBV_B
    0U,	// SUBV_D
    0U,	// SUBV_H
    0U,	// SUBV_W
    0U,	// SUB_MM
    0U,	// SUB_MMR6
    0U,	// SUBu
    0U,	// SUBu_MM
    0U,	// SUXC1
    0U,	// SUXC164
    0U,	// SUXC1_MM
    0U,	// SW
    0U,	// SW16_MM
    0U,	// SW64
    0U,	// SWC1
    0U,	// SWC1_MM
    0U,	// SWC2
    0U,	// SWC2_R6
    0U,	// SWC3
    0U,	// SWE_MMR6
    0U,	// SWL
    0U,	// SWL64
    0U,	// SWL_MM
    0U,	// SWM16_MM
    0U,	// SWM32_MM
    0U,	// SWM_MM
    0U,	// SWP_MM
    0U,	// SWR
    0U,	// SWR64
    0U,	// SWR_MM
    0U,	// SWSP_MM
    0U,	// SWXC1
    0U,	// SWXC1_MM
    0U,	// SW_MM
    0U,	// SW_MMR6
    0U,	// SYNC
    0U,	// SYNCI
    0U,	// SYNC_MM
    0U,	// SYSCALL
    0U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    0U,	// SbRxRyOffMemX16
    0U,	// SebRx16
    0U,	// SehRx16
    0U,	// SelBeqZ
    0U,	// SelBneZ
    0U,	// SelTBteqZCmp
    0U,	// SelTBteqZCmpi
    0U,	// SelTBteqZSlt
    0U,	// SelTBteqZSlti
    0U,	// SelTBteqZSltiu
    0U,	// SelTBteqZSltu
    0U,	// SelTBtneZCmp
    0U,	// SelTBtneZCmpi
    0U,	// SelTBtneZSlt
    0U,	// SelTBtneZSlti
    0U,	// SelTBtneZSltiu
    0U,	// SelTBtneZSltu
    0U,	// ShRxRyOffMemX16
    2U,	// SllX16
    0U,	// SllvRxRy16
    0U,	// SltCCRxRy16
    0U,	// SltRxRy16
    0U,	// SltiCCRxImmX16
    0U,	// SltiRxImm16
    0U,	// SltiRxImmX16
    0U,	// SltiuCCRxImmX16
    0U,	// SltiuRxImm16
    0U,	// SltiuRxImmX16
    0U,	// SltuCCRxRy16
    0U,	// SltuRxRy16
    0U,	// SltuRxRyRz16
    2U,	// SraX16
    0U,	// SravRxRy16
    2U,	// SrlX16
    0U,	// SrlvRxRy16
    0U,	// SubuRxRyRz16
    0U,	// SwRxRyOffMemX16
    0U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALL64_R
    0U,	// TAILCALL_R
    2U,	// TEQ
    0U,	// TEQI
    0U,	// TEQI_MM
    2U,	// TEQ_MM
    2U,	// TGE
    0U,	// TGEI
    0U,	// TGEIU
    0U,	// TGEIU_MM
    0U,	// TGEI_MM
    2U,	// TGEU
    2U,	// TGEU_MM
    2U,	// TGE_MM
    0U,	// TLBP
    0U,	// TLBP_MM
    0U,	// TLBR
    0U,	// TLBR_MM
    0U,	// TLBWI
    0U,	// TLBWI_MM
    0U,	// TLBWR
    0U,	// TLBWR_MM
    2U,	// TLT
    0U,	// TLTI
    0U,	// TLTIU_MM
    0U,	// TLTI_MM
    2U,	// TLTU
    2U,	// TLTU_MM
    2U,	// TLT_MM
    2U,	// TNE
    0U,	// TNEI
    0U,	// TNEI_MM
    2U,	// TNE_MM
    0U,	// TRAP
    0U,	// TRUNC_L_D64
    0U,	// TRUNC_L_S
    0U,	// TRUNC_W_D32
    0U,	// TRUNC_W_D64
    0U,	// TRUNC_W_MM
    0U,	// TRUNC_W_S
    0U,	// TRUNC_W_S_MM
    0U,	// TTLTIU
    0U,	// UDIV
    0U,	// UDIV_MM
    0U,	// Ulhu
    0U,	// Ulw
    0U,	// V3MULU
    0U,	// VMM0
    0U,	// VMULU
    4U,	// VSHF_B
    4U,	// VSHF_D
    4U,	// VSHF_H
    4U,	// VSHF_W
    0U,	// WAIT
    0U,	// WAIT_MM
    0U,	// WRDSP
    0U,	// WSBH
    0U,	// WSBH_MM
    0U,	// XOR
    0U,	// XOR16_MM
    0U,	// XOR64
    1U,	// XORI_B
    0U,	// XORI_MMR6
    0U,	// XOR_MM
    0U,	// XOR_MMR6
    0U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    2U,	// XORi
    2U,	// XORi64
    2U,	// XORi_MM
    0U,	// XorRxRxRy16
    0U
  };

  static const char AsmStrs[] = {
  /* 0 */ 'j', 'a', 'l', 'r', 'c', 32, 9, 0,
  /* 8 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 15 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 22 */ 'v', 'm', 'm', '0', 9, 0,
  /* 28 */ 'm', 't', 'm', '0', 9, 0,
  /* 34 */ 'm', 't', 'p', '0', 9, 0,
  /* 40 */ 'b', 'b', 'i', 't', '0', 9, 0,
  /* 47 */ 'l', 'd', 'c', '1', 9, 0,
  /* 53 */ 's', 'd', 'c', '1', 9, 0,
  /* 59 */ 'c', 'f', 'c', '1', 9, 0,
  /* 65 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 72 */ 'm', 'f', 'h', 'c', '1', 9, 0,
  /* 79 */ 'm', 't', 'h', 'c', '1', 9, 0,
  /* 86 */ 'c', 't', 'c', '1', 9, 0,
  /* 92 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 99 */ 'l', 'w', 'c', '1', 9, 0,
  /* 105 */ 's', 'w', 'c', '1', 9, 0,
  /* 111 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 118 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 125 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 132 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 139 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 146 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 153 */ 'm', 't', 'm', '1', 9, 0,
  /* 159 */ 'm', 't', 'p', '1', 9, 0,
  /* 165 */ 'b', 'b', 'i', 't', '1', 9, 0,
  /* 172 */ 'b', 'b', 'i', 't', '0', '3', '2', 9, 0,
  /* 181 */ 'b', 'b', 'i', 't', '1', '3', '2', 9, 0,
  /* 190 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 198 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 208 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 216 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 224 */ 'l', 'w', 'm', '3', '2', 9, 0,
  /* 231 */ 's', 'w', 'm', '3', '2', 9, 0,
  /* 238 */ 'd', 'r', 'o', 't', 'r', '3', '2', 9, 0,
  /* 247 */ 'l', 'd', 'c', '2', 9, 0,
  /* 253 */ 's', 'd', 'c', '2', 9, 0,
  /* 259 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 266 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 273 */ 'l', 'w', 'c', '2', 9, 0,
  /* 279 */ 's', 'w', 'c', '2', 9, 0,
  /* 285 */ 'm', 't', 'm', '2', 9, 0,
  /* 291 */ 'm', 't', 'p', '2', 9, 0,
  /* 297 */ 'a', 'd', 'd', 'i', 'u', 'r', '2', 9, 0,
  /* 306 */ 'l', 'd', 'c', '3', 9, 0,
  /* 312 */ 's', 'd', 'c', '3', 9, 0,
  /* 318 */ 'l', 'w', 'c', '3', 9, 0,
  /* 324 */ 's', 'w', 'c', '3', 9, 0,
  /* 330 */ 'a', 'd', 'd', 'i', 'u', 's', '5', 9, 0,
  /* 339 */ 's', 'b', '1', '6', 9, 0,
  /* 345 */ 'a', 'n', 'd', '1', '6', 9, 0,
  /* 352 */ 's', 'h', '1', '6', 9, 0,
  /* 358 */ 'a', 'n', 'd', 'i', '1', '6', 9, 0,
  /* 366 */ 'l', 'i', '1', '6', 9, 0,
  /* 372 */ 'b', 'r', 'e', 'a', 'k', '1', '6', 9, 0,
  /* 381 */ 's', 'l', 'l', '1', '6', 9, 0,
  /* 388 */ 's', 'r', 'l', '1', '6', 9, 0,
  /* 395 */ 'l', 'w', 'm', '1', '6', 9, 0,
  /* 402 */ 's', 'w', 'm', '1', '6', 9, 0,
  /* 409 */ 's', 'd', 'b', 'b', 'p', '1', '6', 9, 0,
  /* 418 */ 'j', 'r', '1', '6', 9, 0,
  /* 424 */ 'x', 'o', 'r', '1', '6', 9, 0,
  /* 431 */ 'j', 'a', 'l', 'r', 's', '1', '6', 9, 0,
  /* 440 */ 'n', 'o', 't', '1', '6', 9, 0,
  /* 447 */ 'l', 'b', 'u', '1', '6', 9, 0,
  /* 454 */ 's', 'u', 'b', 'u', '1', '6', 9, 0,
  /* 462 */ 'a', 'd', 'd', 'u', '1', '6', 9, 0,
  /* 470 */ 'l', 'h', 'u', '1', '6', 9, 0,
  /* 477 */ 'l', 'w', '1', '6', 9, 0,
  /* 483 */ 's', 'w', '1', '6', 9, 0,
  /* 489 */ 'b', 'n', 'e', 'z', '1', '6', 9, 0,
  /* 497 */ 'b', 'e', 'q', 'z', '1', '6', 9, 0,
  /* 505 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 521 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 538 */ 'd', 'l', 'a', 9, 0,
  /* 543 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 559 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 576 */ 'd', 's', 'r', 'a', 9, 0,
  /* 582 */ 'd', 'l', 's', 'a', 9, 0,
  /* 588 */ 'c', 'f', 'c', 'm', 's', 'a', 9, 0,
  /* 596 */ 'c', 't', 'c', 'm', 's', 'a', 9, 0,
  /* 604 */ 'a', 'd', 'd', '_', 'a', '.', 'b', 9, 0,
  /* 613 */ 'm', 'i', 'n', '_', 'a', '.', 'b', 9, 0,
  /* 622 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'b', 9, 0,
  /* 632 */ 'm', 'a', 'x', '_', 'a', '.', 'b', 9, 0,
  /* 641 */ 's', 'r', 'a', '.', 'b', 9, 0,
  /* 648 */ 'n', 'l', 'o', 'c', '.', 'b', 9, 0,
  /* 656 */ 'n', 'l', 'z', 'c', '.', 'b', 9, 0,
  /* 664 */ 's', 'l', 'd', '.', 'b', 9, 0,
  /* 671 */ 'p', 'c', 'k', 'o', 'd', '.', 'b', 9, 0,
  /* 680 */ 'i', 'l', 'v', 'o', 'd', '.', 'b', 9, 0,
  /* 689 */ 'i', 'n', 's', 'v', 'e', '.', 'b', 9, 0,
  /* 698 */ 'v', 's', 'h', 'f', '.', 'b', 9, 0,
  /* 706 */ 'b', 'n', 'e', 'g', '.', 'b', 9, 0,
  /* 714 */ 's', 'r', 'a', 'i', '.', 'b', 9, 0,
  /* 722 */ 's', 'l', 'd', 'i', '.', 'b', 9, 0,
  /* 730 */ 'a', 'n', 'd', 'i', '.', 'b', 9, 0,
  /* 738 */ 'b', 'n', 'e', 'g', 'i', '.', 'b', 9, 0,
  /* 747 */ 'b', 's', 'e', 'l', 'i', '.', 'b', 9, 0,
  /* 756 */ 's', 'l', 'l', 'i', '.', 'b', 9, 0,
  /* 764 */ 's', 'r', 'l', 'i', '.', 'b', 9, 0,
  /* 772 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'b', 9, 0,
  /* 782 */ 'c', 'e', 'q', 'i', '.', 'b', 9, 0,
  /* 790 */ 's', 'r', 'a', 'r', 'i', '.', 'b', 9, 0,
  /* 799 */ 'b', 'c', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 808 */ 's', 'r', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 817 */ 'n', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 825 */ 'x', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 833 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'b', 9, 0,
  /* 843 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'b', 9, 0,
  /* 853 */ 'b', 's', 'e', 't', 'i', '.', 'b', 9, 0,
  /* 862 */ 's', 'u', 'b', 'v', 'i', '.', 'b', 9, 0,
  /* 871 */ 'a', 'd', 'd', 'v', 'i', '.', 'b', 9, 0,
  /* 880 */ 'b', 'm', 'z', 'i', '.', 'b', 9, 0,
  /* 888 */ 'b', 'm', 'n', 'z', 'i', '.', 'b', 9, 0,
  /* 897 */ 'f', 'i', 'l', 'l', '.', 'b', 9, 0,
  /* 905 */ 's', 'l', 'l', '.', 'b', 9, 0,
  /* 912 */ 's', 'r', 'l', '.', 'b', 9, 0,
  /* 919 */ 'b', 'i', 'n', 's', 'l', '.', 'b', 9, 0,
  /* 928 */ 'i', 'l', 'v', 'l', '.', 'b', 9, 0,
  /* 936 */ 'c', 'e', 'q', '.', 'b', 9, 0,
  /* 943 */ 's', 'r', 'a', 'r', '.', 'b', 9, 0,
  /* 951 */ 'b', 'c', 'l', 'r', '.', 'b', 9, 0,
  /* 959 */ 's', 'r', 'l', 'r', '.', 'b', 9, 0,
  /* 967 */ 'b', 'i', 'n', 's', 'r', '.', 'b', 9, 0,
  /* 976 */ 'i', 'l', 'v', 'r', '.', 'b', 9, 0,
  /* 984 */ 'a', 's', 'u', 'b', '_', 's', '.', 'b', 9, 0,
  /* 994 */ 'm', 'o', 'd', '_', 's', '.', 'b', 9, 0,
  /* 1003 */ 'c', 'l', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1012 */ 'a', 'v', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1021 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1031 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1041 */ 'c', 'l', 't', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1051 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1061 */ 'm', 'i', 'n', '_', 's', '.', 'b', 9, 0,
  /* 1070 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'b', 9, 0,
  /* 1080 */ 's', 'u', 'b', 's', '_', 's', '.', 'b', 9, 0,
  /* 1090 */ 'a', 'd', 'd', 's', '_', 's', '.', 'b', 9, 0,
  /* 1100 */ 's', 'a', 't', '_', 's', '.', 'b', 9, 0,
  /* 1109 */ 'c', 'l', 't', '_', 's', '.', 'b', 9, 0,
  /* 1118 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'b', 9, 0,
  /* 1130 */ 'd', 'i', 'v', '_', 's', '.', 'b', 9, 0,
  /* 1139 */ 'm', 'a', 'x', '_', 's', '.', 'b', 9, 0,
  /* 1148 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'b', 9, 0,
  /* 1158 */ 's', 'p', 'l', 'a', 't', '.', 'b', 9, 0,
  /* 1167 */ 'b', 's', 'e', 't', '.', 'b', 9, 0,
  /* 1175 */ 'p', 'c', 'n', 't', '.', 'b', 9, 0,
  /* 1183 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'b', 9, 0,
  /* 1193 */ 's', 't', '.', 'b', 9, 0,
  /* 1199 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'b', 9, 0,
  /* 1209 */ 'm', 'o', 'd', '_', 'u', '.', 'b', 9, 0,
  /* 1218 */ 'c', 'l', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1227 */ 'a', 'v', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1236 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1246 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1256 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1266 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1276 */ 'm', 'i', 'n', '_', 'u', '.', 'b', 9, 0,
  /* 1285 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'b', 9, 0,
  /* 1295 */ 's', 'u', 'b', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1305 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1315 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1327 */ 's', 'a', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1336 */ 'c', 'l', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1345 */ 'd', 'i', 'v', '_', 'u', '.', 'b', 9, 0,
  /* 1354 */ 'm', 'a', 'x', '_', 'u', '.', 'b', 9, 0,
  /* 1363 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'b', 9, 0,
  /* 1373 */ 'm', 's', 'u', 'b', 'v', '.', 'b', 9, 0,
  /* 1382 */ 'm', 'a', 'd', 'd', 'v', '.', 'b', 9, 0,
  /* 1391 */ 'p', 'c', 'k', 'e', 'v', '.', 'b', 9, 0,
  /* 1400 */ 'i', 'l', 'v', 'e', 'v', '.', 'b', 9, 0,
  /* 1409 */ 'm', 'u', 'l', 'v', '.', 'b', 9, 0,
  /* 1417 */ 'b', 'z', '.', 'b', 9, 0,
  /* 1423 */ 'b', 'n', 'z', '.', 'b', 9, 0,
  /* 1430 */ 's', 'e', 'b', 9, 0,
  /* 1435 */ 'j', 'r', '.', 'h', 'b', 9, 0,
  /* 1442 */ 'j', 'a', 'l', 'r', '.', 'h', 'b', 9, 0,
  /* 1451 */ 'l', 'b', 9, 0,
  /* 1455 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 1464 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1478 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1491 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1503 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1513 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1523 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 1532 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 1541 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 1550 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 1559 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1573 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1586 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1598 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1609 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1621 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1633 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1645 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1656 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1667 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1678 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1692 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1705 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1717 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 1726 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 1735 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 1745 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1755 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1765 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1775 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 1787 */ 's', 'b', 9, 0,
  /* 1791 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 1799 */ 'm', 's', 'u', 'b', 9, 0,
  /* 1805 */ 'b', 'c', 9, 0,
  /* 1809 */ 'b', 'g', 'e', 'c', 9, 0,
  /* 1815 */ 'b', 'n', 'e', 'c', 9, 0,
  /* 1821 */ 'j', 'i', 'c', 9, 0,
  /* 1826 */ 'b', 'a', 'l', 'c', 9, 0,
  /* 1832 */ 'j', 'i', 'a', 'l', 'c', 9, 0,
  /* 1839 */ 'b', 'g', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1848 */ 'b', 'l', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1857 */ 'b', 'n', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1866 */ 'b', 'e', 'q', 'z', 'a', 'l', 'c', 9, 0,
  /* 1875 */ 'b', 'g', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 1884 */ 'b', 'l', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 1893 */ 'l', 'd', 'p', 'c', 9, 0,
  /* 1899 */ 'a', 'u', 'i', 'p', 'c', 9, 0,
  /* 1906 */ 'a', 'l', 'u', 'i', 'p', 'c', 9, 0,
  /* 1914 */ 'a', 'd', 'd', 'i', 'u', 'p', 'c', 9, 0,
  /* 1923 */ 'l', 'w', 'u', 'p', 'c', 9, 0,
  /* 1930 */ 'l', 'w', 'p', 'c', 9, 0,
  /* 1936 */ 'b', 'e', 'q', 'c', 9, 0,
  /* 1942 */ 'j', 'r', 'c', 9, 0,
  /* 1947 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 1954 */ 'b', 'l', 't', 'c', 9, 0,
  /* 1960 */ 'b', 'g', 'e', 'u', 'c', 9, 0,
  /* 1967 */ 'b', 'l', 't', 'u', 'c', 9, 0,
  /* 1974 */ 'b', 'n', 'v', 'c', 9, 0,
  /* 1980 */ 'b', 'o', 'v', 'c', 9, 0,
  /* 1986 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 1993 */ 'b', 'g', 'e', 'z', 'c', 9, 0,
  /* 2000 */ 'b', 'l', 'e', 'z', 'c', 9, 0,
  /* 2007 */ 'b', 'n', 'e', 'z', 'c', 9, 0,
  /* 2014 */ 'b', 'e', 'q', 'z', 'c', 9, 0,
  /* 2021 */ 'b', 'g', 't', 'z', 'c', 9, 0,
  /* 2028 */ 'b', 'l', 't', 'z', 'c', 9, 0,
  /* 2035 */ 'f', 'l', 'o', 'g', '2', '.', 'd', 9, 0,
  /* 2044 */ 'f', 'e', 'x', 'p', '2', '.', 'd', 9, 0,
  /* 2053 */ 'a', 'd', 'd', '_', 'a', '.', 'd', 9, 0,
  /* 2062 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'd', 9, 0,
  /* 2072 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'd', 9, 0,
  /* 2082 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'd', 9, 0,
  /* 2092 */ 'm', 'i', 'n', 'a', '.', 'd', 9, 0,
  /* 2100 */ 's', 'r', 'a', '.', 'd', 9, 0,
  /* 2107 */ 'm', 'a', 'x', 'a', '.', 'd', 9, 0,
  /* 2115 */ 'f', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2123 */ 'f', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2132 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2141 */ 'n', 'l', 'o', 'c', '.', 'd', 9, 0,
  /* 2149 */ 'n', 'l', 'z', 'c', '.', 'd', 9, 0,
  /* 2157 */ 'f', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2165 */ 'f', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2174 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2183 */ 's', 'l', 'd', '.', 'd', 9, 0,
  /* 2190 */ 'p', 'c', 'k', 'o', 'd', '.', 'd', 9, 0,
  /* 2199 */ 'i', 'l', 'v', 'o', 'd', '.', 'd', 9, 0,
  /* 2208 */ 'c', '.', 'n', 'g', 'e', '.', 'd', 9, 0,
  /* 2217 */ 'c', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2225 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2235 */ 'f', 'c', 'l', 'e', '.', 'd', 9, 0,
  /* 2243 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 'd', 9, 0,
  /* 2253 */ 'c', '.', 'o', 'l', 'e', '.', 'd', 9, 0,
  /* 2262 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2273 */ 'f', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2281 */ 'c', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2290 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2301 */ 'f', 'c', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2310 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2322 */ 'f', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2331 */ 'f', 'c', 'n', 'e', '.', 'd', 9, 0,
  /* 2339 */ 'f', 's', 'n', 'e', '.', 'd', 9, 0,
  /* 2347 */ 'f', 'c', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2356 */ 'f', 's', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2365 */ 'i', 'n', 's', 'v', 'e', '.', 'd', 9, 0,
  /* 2374 */ 'c', '.', 'f', '.', 'd', 9, 0,
  /* 2381 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 'd', 9, 0,
  /* 2391 */ 'f', 'c', 'a', 'f', '.', 'd', 9, 0,
  /* 2399 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2410 */ 'f', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2418 */ 'm', 's', 'u', 'b', 'f', '.', 'd', 9, 0,
  /* 2427 */ 'm', 'a', 'd', 'd', 'f', '.', 'd', 9, 0,
  /* 2436 */ 'v', 's', 'h', 'f', '.', 'd', 9, 0,
  /* 2444 */ 'c', '.', 's', 'f', '.', 'd', 9, 0,
  /* 2452 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 2460 */ 'b', 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 2468 */ 's', 'r', 'a', 'i', '.', 'd', 9, 0,
  /* 2476 */ 's', 'l', 'd', 'i', '.', 'd', 9, 0,
  /* 2484 */ 'b', 'n', 'e', 'g', 'i', '.', 'd', 9, 0,
  /* 2493 */ 's', 'l', 'l', 'i', '.', 'd', 9, 0,
  /* 2501 */ 's', 'r', 'l', 'i', '.', 'd', 9, 0,
  /* 2509 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'd', 9, 0,
  /* 2519 */ 'c', 'e', 'q', 'i', '.', 'd', 9, 0,
  /* 2527 */ 's', 'r', 'a', 'r', 'i', '.', 'd', 9, 0,
  /* 2536 */ 'b', 'c', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2545 */ 's', 'r', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2554 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'd', 9, 0,
  /* 2564 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'd', 9, 0,
  /* 2574 */ 'b', 's', 'e', 't', 'i', '.', 'd', 9, 0,
  /* 2583 */ 's', 'u', 'b', 'v', 'i', '.', 'd', 9, 0,
  /* 2592 */ 'a', 'd', 'd', 'v', 'i', '.', 'd', 9, 0,
  /* 2601 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 2612 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 2623 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 2633 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 2644 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 2653 */ 's', 'e', 'l', '.', 'd', 9, 0,
  /* 2660 */ 'c', '.', 'n', 'g', 'l', '.', 'd', 9, 0,
  /* 2669 */ 'f', 'i', 'l', 'l', '.', 'd', 9, 0,
  /* 2677 */ 's', 'l', 'l', '.', 'd', 9, 0,
  /* 2684 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'd', 9, 0,
  /* 2694 */ 'f', 'f', 'q', 'l', '.', 'd', 9, 0,
  /* 2702 */ 's', 'r', 'l', '.', 'd', 9, 0,
  /* 2709 */ 'b', 'i', 'n', 's', 'l', '.', 'd', 9, 0,
  /* 2718 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 2726 */ 'i', 'l', 'v', 'l', '.', 'd', 9, 0,
  /* 2734 */ 'f', 'm', 'i', 'n', '.', 'd', 9, 0,
  /* 2742 */ 'c', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2750 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2760 */ 'f', 'c', 'u', 'n', '.', 'd', 9, 0,
  /* 2768 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2779 */ 'f', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2787 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 2795 */ 'f', 'r', 'c', 'p', '.', 'd', 9, 0,
  /* 2803 */ 'c', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2811 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2821 */ 'f', 'c', 'e', 'q', '.', 'd', 9, 0,
  /* 2829 */ 'c', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2838 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2849 */ 'f', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2857 */ 'c', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2866 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2877 */ 'f', 'c', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2886 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2898 */ 'f', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2907 */ 's', 'r', 'a', 'r', '.', 'd', 9, 0,
  /* 2915 */ 'b', 'c', 'l', 'r', '.', 'd', 9, 0,
  /* 2923 */ 's', 'r', 'l', 'r', '.', 'd', 9, 0,
  /* 2931 */ 'f', 'c', 'o', 'r', '.', 'd', 9, 0,
  /* 2939 */ 'f', 's', 'o', 'r', '.', 'd', 9, 0,
  /* 2947 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'd', 9, 0,
  /* 2957 */ 'f', 'f', 'q', 'r', '.', 'd', 9, 0,
  /* 2965 */ 'b', 'i', 'n', 's', 'r', '.', 'd', 9, 0,
  /* 2974 */ 'i', 'l', 'v', 'r', '.', 'd', 9, 0,
  /* 2982 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 2991 */ 'a', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3001 */ 'h', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3011 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3022 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'd', 9, 0,
  /* 3034 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3044 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3055 */ 'm', 'o', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3064 */ 'c', 'l', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3073 */ 'a', 'v', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3082 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3092 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3102 */ 'c', 'l', 't', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3112 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3122 */ 'm', 'i', 'n', '_', 's', '.', 'd', 9, 0,
  /* 3131 */ 'd', 'o', 't', 'p', '_', 's', '.', 'd', 9, 0,
  /* 3141 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'd', 9, 0,
  /* 3151 */ 's', 'u', 'b', 's', '_', 's', '.', 'd', 9, 0,
  /* 3161 */ 'a', 'd', 'd', 's', '_', 's', '.', 'd', 9, 0,
  /* 3171 */ 's', 'a', 't', '_', 's', '.', 'd', 9, 0,
  /* 3180 */ 'c', 'l', 't', '_', 's', '.', 'd', 9, 0,
  /* 3189 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3200 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3211 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'd', 9, 0,
  /* 3223 */ 'd', 'i', 'v', '_', 's', '.', 'd', 9, 0,
  /* 3232 */ 'm', 'a', 'x', '_', 's', '.', 'd', 9, 0,
  /* 3241 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'd', 9, 0,
  /* 3251 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 3258 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'd', 9, 0,
  /* 3268 */ 's', 'p', 'l', 'a', 't', '.', 'd', 9, 0,
  /* 3277 */ 'b', 's', 'e', 't', '.', 'd', 9, 0,
  /* 3285 */ 'c', '.', 'n', 'g', 't', '.', 'd', 9, 0,
  /* 3294 */ 'c', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3302 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3312 */ 'f', 'c', 'l', 't', '.', 'd', 9, 0,
  /* 3320 */ 'c', '.', 'o', 'l', 't', '.', 'd', 9, 0,
  /* 3329 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3340 */ 'f', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3348 */ 'c', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3357 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3368 */ 'f', 'c', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3377 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3389 */ 'f', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3398 */ 'p', 'c', 'n', 't', '.', 'd', 9, 0,
  /* 3406 */ 'f', 'r', 'i', 'n', 't', '.', 'd', 9, 0,
  /* 3415 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'd', 9, 0,
  /* 3425 */ 'f', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3434 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3444 */ 's', 't', '.', 'd', 9, 0,
  /* 3450 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 3458 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3468 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3478 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3489 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'd', 9, 0,
  /* 3501 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3511 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3522 */ 'm', 'o', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3531 */ 'c', 'l', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3540 */ 'a', 'v', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3549 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3559 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3569 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3579 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3589 */ 'm', 'i', 'n', '_', 'u', '.', 'd', 9, 0,
  /* 3598 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'd', 9, 0,
  /* 3608 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'd', 9, 0,
  /* 3618 */ 's', 'u', 'b', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3628 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3638 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3650 */ 's', 'a', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3659 */ 'c', 'l', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3668 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3679 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3690 */ 'd', 'i', 'v', '_', 'u', '.', 'd', 9, 0,
  /* 3699 */ 'm', 'a', 'x', '_', 'u', '.', 'd', 9, 0,
  /* 3708 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'd', 9, 0,
  /* 3718 */ 'm', 's', 'u', 'b', 'v', '.', 'd', 9, 0,
  /* 3727 */ 'm', 'a', 'd', 'd', 'v', '.', 'd', 9, 0,
  /* 3736 */ 'p', 'c', 'k', 'e', 'v', '.', 'd', 9, 0,
  /* 3745 */ 'i', 'l', 'v', 'e', 'v', '.', 'd', 9, 0,
  /* 3754 */ 'f', 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 3762 */ 'm', 'u', 'l', 'v', '.', 'd', 9, 0,
  /* 3770 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 3777 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 3788 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 3799 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 3809 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 3820 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 3829 */ 'f', 'm', 'a', 'x', '.', 'd', 9, 0,
  /* 3837 */ 'b', 'z', '.', 'd', 9, 0,
  /* 3843 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 'd', 9, 0,
  /* 3853 */ 'b', 'n', 'z', '.', 'd', 9, 0,
  /* 3860 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 'd', 9, 0,
  /* 3870 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 3878 */ 's', 'c', 'd', 9, 0,
  /* 3883 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 3889 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 3895 */ 'd', 's', 'h', 'd', 9, 0,
  /* 3901 */ 'l', 'l', 'd', 9, 0,
  /* 3906 */ 'a', 'n', 'd', 9, 0,
  /* 3911 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 3920 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 3928 */ 'd', 'm', 'o', 'd', 9, 0,
  /* 3934 */ 's', 'd', 9, 0,
  /* 3938 */ 'b', 'g', 'e', 9, 0,
  /* 3943 */ 't', 'g', 'e', 9, 0,
  /* 3948 */ 'c', 'a', 'c', 'h', 'e', 9, 0,
  /* 3955 */ 'b', 'l', 'e', 9, 0,
  /* 3960 */ 'b', 'n', 'e', 9, 0,
  /* 3965 */ 's', 'n', 'e', 9, 0,
  /* 3970 */ 't', 'n', 'e', 9, 0,
  /* 3975 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 3981 */ 's', 'w', 'e', 9, 0,
  /* 3986 */ 'b', 'c', '1', 'f', 9, 0,
  /* 3992 */ 'p', 'r', 'e', 'f', 9, 0,
  /* 3998 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 4004 */ 'n', 'e', 'g', 9, 0,
  /* 4009 */ 'a', 'd', 'd', '_', 'a', '.', 'h', 9, 0,
  /* 4018 */ 'm', 'i', 'n', '_', 'a', '.', 'h', 9, 0,
  /* 4027 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'h', 9, 0,
  /* 4037 */ 'm', 'a', 'x', '_', 'a', '.', 'h', 9, 0,
  /* 4046 */ 's', 'r', 'a', '.', 'h', 9, 0,
  /* 4053 */ 'n', 'l', 'o', 'c', '.', 'h', 9, 0,
  /* 4061 */ 'n', 'l', 'z', 'c', '.', 'h', 9, 0,
  /* 4069 */ 's', 'l', 'd', '.', 'h', 9, 0,
  /* 4076 */ 'p', 'c', 'k', 'o', 'd', '.', 'h', 9, 0,
  /* 4085 */ 'i', 'l', 'v', 'o', 'd', '.', 'h', 9, 0,
  /* 4094 */ 'i', 'n', 's', 'v', 'e', '.', 'h', 9, 0,
  /* 4103 */ 'v', 's', 'h', 'f', '.', 'h', 9, 0,
  /* 4111 */ 'b', 'n', 'e', 'g', '.', 'h', 9, 0,
  /* 4119 */ 's', 'r', 'a', 'i', '.', 'h', 9, 0,
  /* 4127 */ 's', 'l', 'd', 'i', '.', 'h', 9, 0,
  /* 4135 */ 'b', 'n', 'e', 'g', 'i', '.', 'h', 9, 0,
  /* 4144 */ 's', 'l', 'l', 'i', '.', 'h', 9, 0,
  /* 4152 */ 's', 'r', 'l', 'i', '.', 'h', 9, 0,
  /* 4160 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'h', 9, 0,
  /* 4170 */ 'c', 'e', 'q', 'i', '.', 'h', 9, 0,
  /* 4178 */ 's', 'r', 'a', 'r', 'i', '.', 'h', 9, 0,
  /* 4187 */ 'b', 'c', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4196 */ 's', 'r', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4205 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'h', 9, 0,
  /* 4215 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'h', 9, 0,
  /* 4225 */ 'b', 's', 'e', 't', 'i', '.', 'h', 9, 0,
  /* 4234 */ 's', 'u', 'b', 'v', 'i', '.', 'h', 9, 0,
  /* 4243 */ 'a', 'd', 'd', 'v', 'i', '.', 'h', 9, 0,
  /* 4252 */ 'f', 'i', 'l', 'l', '.', 'h', 9, 0,
  /* 4260 */ 's', 'l', 'l', '.', 'h', 9, 0,
  /* 4267 */ 's', 'r', 'l', '.', 'h', 9, 0,
  /* 4274 */ 'b', 'i', 'n', 's', 'l', '.', 'h', 9, 0,
  /* 4283 */ 'i', 'l', 'v', 'l', '.', 'h', 9, 0,
  /* 4291 */ 'f', 'e', 'x', 'd', 'o', '.', 'h', 9, 0,
  /* 4300 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'h', 9, 0,
  /* 4310 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'h', 9, 0,
  /* 4320 */ 'm', 'u', 'l', '_', 'q', '.', 'h', 9, 0,
  /* 4329 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4340 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4351 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4361 */ 'c', 'e', 'q', '.', 'h', 9, 0,
  /* 4368 */ 'f', 't', 'q', '.', 'h', 9, 0,
  /* 4375 */ 's', 'r', 'a', 'r', '.', 'h', 9, 0,
  /* 4383 */ 'b', 'c', 'l', 'r', '.', 'h', 9, 0,
  /* 4391 */ 's', 'r', 'l', 'r', '.', 'h', 9, 0,
  /* 4399 */ 'b', 'i', 'n', 's', 'r', '.', 'h', 9, 0,
  /* 4408 */ 'i', 'l', 'v', 'r', '.', 'h', 9, 0,
  /* 4416 */ 'a', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4426 */ 'h', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4436 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4447 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4457 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4468 */ 'm', 'o', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4477 */ 'c', 'l', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4486 */ 'a', 'v', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4495 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4505 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4515 */ 'c', 'l', 't', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4525 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4535 */ 'm', 'i', 'n', '_', 's', '.', 'h', 9, 0,
  /* 4544 */ 'd', 'o', 't', 'p', '_', 's', '.', 'h', 9, 0,
  /* 4554 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4564 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4574 */ 's', 'u', 'b', 's', '_', 's', '.', 'h', 9, 0,
  /* 4584 */ 'a', 'd', 'd', 's', '_', 's', '.', 'h', 9, 0,
  /* 4594 */ 's', 'a', 't', '_', 's', '.', 'h', 9, 0,
  /* 4603 */ 'c', 'l', 't', '_', 's', '.', 'h', 9, 0,
  /* 4612 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'h', 9, 0,
  /* 4624 */ 'd', 'i', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4633 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4644 */ 'm', 'a', 'x', '_', 's', '.', 'h', 9, 0,
  /* 4653 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'h', 9, 0,
  /* 4663 */ 's', 'p', 'l', 'a', 't', '.', 'h', 9, 0,
  /* 4672 */ 'b', 's', 'e', 't', '.', 'h', 9, 0,
  /* 4680 */ 'p', 'c', 'n', 't', '.', 'h', 9, 0,
  /* 4688 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'h', 9, 0,
  /* 4698 */ 's', 't', '.', 'h', 9, 0,
  /* 4704 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4714 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4724 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4735 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4745 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4756 */ 'm', 'o', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4765 */ 'c', 'l', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 4774 */ 'a', 'v', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 4783 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4793 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4803 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4813 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4823 */ 'm', 'i', 'n', '_', 'u', '.', 'h', 9, 0,
  /* 4832 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'h', 9, 0,
  /* 4842 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'h', 9, 0,
  /* 4852 */ 's', 'u', 'b', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4862 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4872 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4884 */ 's', 'a', 't', '_', 'u', '.', 'h', 9, 0,
  /* 4893 */ 'c', 'l', 't', '_', 'u', '.', 'h', 9, 0,
  /* 4902 */ 'd', 'i', 'v', '_', 'u', '.', 'h', 9, 0,
  /* 4911 */ 'm', 'a', 'x', '_', 'u', '.', 'h', 9, 0,
  /* 4920 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'h', 9, 0,
  /* 4930 */ 'm', 's', 'u', 'b', 'v', '.', 'h', 9, 0,
  /* 4939 */ 'm', 'a', 'd', 'd', 'v', '.', 'h', 9, 0,
  /* 4948 */ 'p', 'c', 'k', 'e', 'v', '.', 'h', 9, 0,
  /* 4957 */ 'i', 'l', 'v', 'e', 'v', '.', 'h', 9, 0,
  /* 4966 */ 'm', 'u', 'l', 'v', '.', 'h', 9, 0,
  /* 4974 */ 'b', 'z', '.', 'h', 9, 0,
  /* 4980 */ 'b', 'n', 'z', '.', 'h', 9, 0,
  /* 4987 */ 'd', 's', 'b', 'h', 9, 0,
  /* 4993 */ 'w', 's', 'b', 'h', 9, 0,
  /* 4999 */ 's', 'e', 'h', 9, 0,
  /* 5004 */ 'l', 'h', 9, 0,
  /* 5008 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 5017 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5031 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5044 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5061 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 5072 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5082 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5092 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 5101 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 5110 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 5119 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5128 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5139 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 5147 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 5156 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 5165 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 5176 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5187 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5199 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5211 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5223 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5234 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5244 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5255 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5266 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5277 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5288 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5299 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5310 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5322 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 5334 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 5345 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 5354 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 5363 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 5373 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5383 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5393 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5403 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5413 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5428 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5443 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5455 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5468 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5483 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5496 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5510 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5524 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5534 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5545 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5556 */ 's', 'h', 9, 0,
  /* 5560 */ 'd', 'm', 'u', 'h', 9, 0,
  /* 5566 */ 's', 'y', 'n', 'c', 'i', 9, 0,
  /* 5573 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 5580 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 5586 */ 't', 'g', 'e', 'i', 9, 0,
  /* 5592 */ 's', 'n', 'e', 'i', 9, 0,
  /* 5598 */ 't', 'n', 'e', 'i', 9, 0,
  /* 5604 */ 'd', 'a', 'h', 'i', 9, 0,
  /* 5610 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 5616 */ 'm', 't', 'h', 'i', 9, 0,
  /* 5622 */ '.', 'a', 'l', 'i', 'g', 'n', 32, '2', 10, 9, 'l', 'i', 9, 0,
  /* 5636 */ 'd', 'l', 'i', 9, 0,
  /* 5641 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 5647 */ 's', 'e', 'q', 'i', 9, 0,
  /* 5653 */ 't', 'e', 'q', 'i', 9, 0,
  /* 5659 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 5665 */ 'd', 'a', 't', 'i', 9, 0,
  /* 5671 */ 's', 'l', 't', 'i', 9, 0,
  /* 5677 */ 't', 'l', 't', 'i', 9, 0,
  /* 5683 */ 'd', 'a', 'u', 'i', 9, 0,
  /* 5689 */ 'l', 'u', 'i', 9, 0,
  /* 5694 */ 'j', 9, 0,
  /* 5697 */ 'b', 'r', 'e', 'a', 'k', 9, 0,
  /* 5704 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 5713 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 5722 */ 'b', 'a', 'l', 9, 0,
  /* 5727 */ 'j', 'a', 'l', 9, 0,
  /* 5732 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 5740 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 5748 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5760 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5772 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5788 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5803 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5819 */ 'l', 'd', 'l', 9, 0,
  /* 5824 */ 's', 'd', 'l', 9, 0,
  /* 5829 */ 'b', 'n', 'e', 'l', 9, 0,
  /* 5835 */ 'b', 'c', '1', 'f', 'l', 9, 0,
  /* 5842 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5856 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5870 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5883 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5898 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 9, 0,
  /* 5907 */ 'b', 'g', 'e', 'z', 'a', 'l', 'l', 9, 0,
  /* 5916 */ 'b', 'l', 't', 'z', 'a', 'l', 'l', 9, 0,
  /* 5925 */ 'd', 's', 'l', 'l', 9, 0,
  /* 5931 */ 'b', 'e', 'q', 'l', 9, 0,
  /* 5937 */ 'd', 's', 'r', 'l', 9, 0,
  /* 5943 */ 'b', 'c', '1', 't', 'l', 9, 0,
  /* 5950 */ 'd', 'm', 'u', 'l', 9, 0,
  /* 5956 */ 'l', 'w', 'l', 9, 0,
  /* 5961 */ 's', 'w', 'l', 9, 0,
  /* 5966 */ 'b', 'g', 'e', 'z', 'l', 9, 0,
  /* 5973 */ 'b', 'l', 'e', 'z', 'l', 9, 0,
  /* 5980 */ 'b', 'g', 't', 'z', 'l', 9, 0,
  /* 5987 */ 'b', 'l', 't', 'z', 'l', 9, 0,
  /* 5994 */ 'd', 'e', 'x', 't', 'm', 9, 0,
  /* 6001 */ 'l', 'w', 'm', 9, 0,
  /* 6006 */ 's', 'w', 'm', 9, 0,
  /* 6011 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6019 */ 'd', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6027 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 6033 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 6039 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 6045 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 6052 */ 'm', 't', 'l', 'o', 9, 0,
  /* 6058 */ 'd', 'b', 'i', 't', 's', 'w', 'a', 'p', 9, 0,
  /* 6068 */ 's', 'd', 'b', 'b', 'p', 9, 0,
  /* 6075 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 6083 */ 'm', 'o', 'v', 'e', 'p', 9, 0,
  /* 6090 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 6098 */ 'c', 'm', 'p', 9, 0,
  /* 6103 */ 'd', 'p', 'o', 'p', 9, 0,
  /* 6109 */ 'a', 'd', 'd', 'i', 'u', 'r', '1', 's', 'p', 9, 0,
  /* 6120 */ 'l', 'o', 'a', 'd', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6136 */ 's', 't', 'o', 'r', 'e', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6153 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 6160 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 6167 */ 'j', 'r', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 6178 */ 'e', 'x', 't', 'p', 9, 0,
  /* 6184 */ 'l', 'w', 'p', 9, 0,
  /* 6189 */ 's', 'w', 'p', 9, 0,
  /* 6194 */ 'b', 'e', 'q', 9, 0,
  /* 6199 */ 's', 'e', 'q', 9, 0,
  /* 6204 */ 't', 'e', 'q', 9, 0,
  /* 6209 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6221 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6233 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6249 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6264 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6280 */ 'l', 'd', 'r', 9, 0,
  /* 6285 */ 's', 'd', 'r', 9, 0,
  /* 6290 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6304 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6318 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6331 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6346 */ 'j', 'r', 9, 0,
  /* 6350 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 6356 */ 'n', 'o', 'r', 9, 0,
  /* 6361 */ 'x', 'o', 'r', 9, 0,
  /* 6366 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 6373 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 6380 */ 'l', 'w', 'r', 9, 0,
  /* 6385 */ 's', 'w', 'r', 9, 0,
  /* 6390 */ 'm', 'i', 'n', 'a', '.', 's', 9, 0,
  /* 6398 */ 'm', 'a', 'x', 'a', '.', 's', 9, 0,
  /* 6406 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 6415 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 6424 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 6433 */ 'c', '.', 'n', 'g', 'e', '.', 's', 9, 0,
  /* 6442 */ 'c', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6450 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6460 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 's', 9, 0,
  /* 6470 */ 'c', '.', 'o', 'l', 'e', '.', 's', 9, 0,
  /* 6479 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 's', 9, 0,
  /* 6490 */ 'c', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6499 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6510 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6522 */ 'c', '.', 'f', '.', 's', 9, 0,
  /* 6529 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 's', 9, 0,
  /* 6539 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 's', 9, 0,
  /* 6550 */ 'm', 's', 'u', 'b', 'f', '.', 's', 9, 0,
  /* 6559 */ 'm', 'a', 'd', 'd', 'f', '.', 's', 9, 0,
  /* 6568 */ 'c', '.', 's', 'f', '.', 's', 9, 0,
  /* 6576 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 6584 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 6591 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 6602 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 6613 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 6623 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 6634 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 6643 */ 's', 'e', 'l', '.', 's', 9, 0,
  /* 6650 */ 'c', '.', 'n', 'g', 'l', '.', 's', 9, 0,
  /* 6659 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 6666 */ 'm', 'i', 'n', '.', 's', 9, 0,
  /* 6673 */ 'c', '.', 'u', 'n', '.', 's', 9, 0,
  /* 6681 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 's', 9, 0,
  /* 6691 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 's', 9, 0,
  /* 6702 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 6710 */ 'c', '.', 'e', 'q', '.', 's', 9, 0,
  /* 6718 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 's', 9, 0,
  /* 6728 */ 'c', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 6737 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 6748 */ 'c', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 6757 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 6768 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 6780 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 6787 */ 'c', 'l', 'a', 's', 's', '.', 's', 9, 0,
  /* 6796 */ 'c', '.', 'n', 'g', 't', '.', 's', 9, 0,
  /* 6805 */ 'c', '.', 'l', 't', '.', 's', 9, 0,
  /* 6813 */ 'c', 'm', 'p', '.', 'l', 't', '.', 's', 9, 0,
  /* 6823 */ 'c', '.', 'o', 'l', 't', '.', 's', 9, 0,
  /* 6832 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 's', 9, 0,
  /* 6843 */ 'c', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 6852 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 6863 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 's', 9, 0,
  /* 6875 */ 'r', 'i', 'n', 't', '.', 's', 9, 0,
  /* 6883 */ 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 6891 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 6899 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 6906 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 6913 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 6924 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 6935 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 6945 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 6956 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 6965 */ 'm', 'a', 'x', '.', 's', 9, 0,
  /* 6972 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 's', 9, 0,
  /* 6982 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 's', 9, 0,
  /* 6992 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 7000 */ 'j', 'a', 'l', 's', 9, 0,
  /* 7006 */ 'b', 'g', 'e', 'z', 'a', 'l', 's', 9, 0,
  /* 7015 */ 'b', 'l', 't', 'z', 'a', 'l', 's', 9, 0,
  /* 7024 */ 'j', 'a', 'l', 'r', 's', 9, 0,
  /* 7031 */ 'l', 'w', 'x', 's', 9, 0,
  /* 7037 */ 'b', 'c', '1', 't', 9, 0,
  /* 7043 */ 'b', 'g', 't', 9, 0,
  /* 7048 */ 'w', 'a', 'i', 't', 9, 0,
  /* 7054 */ 'b', 'l', 't', 9, 0,
  /* 7059 */ 's', 'l', 't', 9, 0,
  /* 7064 */ 't', 'l', 't', 9, 0,
  /* 7069 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 7076 */ 'n', 'o', 't', 9, 0,
  /* 7081 */ 'm', 'o', 'v', 't', 9, 0,
  /* 7087 */ 'd', 'e', 'x', 't', 9, 0,
  /* 7093 */ 'l', 'b', 'u', 9, 0,
  /* 7098 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 7105 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 7112 */ 'b', 'a', 'd', 'd', 'u', 9, 0,
  /* 7119 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 7126 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 7133 */ 'd', 'm', 'o', 'd', 'u', 9, 0,
  /* 7140 */ 'b', 'g', 'e', 'u', 9, 0,
  /* 7146 */ 't', 'g', 'e', 'u', 9, 0,
  /* 7152 */ 'b', 'l', 'e', 'u', 9, 0,
  /* 7158 */ 'u', 'l', 'h', 'u', 9, 0,
  /* 7164 */ 'd', 'm', 'u', 'h', 'u', 9, 0,
  /* 7171 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 7179 */ 't', 'g', 'e', 'i', 'u', 9, 0,
  /* 7186 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 7193 */ 't', 'l', 't', 'i', 'u', 9, 0,
  /* 7200 */ 'v', '3', 'm', 'u', 'l', 'u', 9, 0,
  /* 7208 */ 'd', 'm', 'u', 'l', 'u', 9, 0,
  /* 7215 */ 'v', 'm', 'u', 'l', 'u', 9, 0,
  /* 7222 */ 'b', 'g', 't', 'u', 9, 0,
  /* 7228 */ 'b', 'l', 't', 'u', 9, 0,
  /* 7234 */ 's', 'l', 't', 'u', 9, 0,
  /* 7240 */ 't', 'l', 't', 'u', 9, 0,
  /* 7246 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 7254 */ 'd', 'e', 'x', 't', 'u', 9, 0,
  /* 7261 */ 'd', 'd', 'i', 'v', 'u', 9, 0,
  /* 7268 */ 'l', 'w', 'u', 9, 0,
  /* 7273 */ 'a', 'n', 'd', '.', 'v', 9, 0,
  /* 7280 */ 'm', 'o', 'v', 'e', '.', 'v', 9, 0,
  /* 7288 */ 'b', 's', 'e', 'l', '.', 'v', 9, 0,
  /* 7296 */ 'n', 'o', 'r', '.', 'v', 9, 0,
  /* 7303 */ 'x', 'o', 'r', '.', 'v', 9, 0,
  /* 7310 */ 'b', 'z', '.', 'v', 9, 0,
  /* 7316 */ 'b', 'm', 'z', '.', 'v', 9, 0,
  /* 7323 */ 'b', 'n', 'z', '.', 'v', 9, 0,
  /* 7330 */ 'b', 'm', 'n', 'z', '.', 'v', 9, 0,
  /* 7338 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 7345 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 7353 */ 'd', 'd', 'i', 'v', 9, 0,
  /* 7359 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 7366 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 7373 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 7381 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 7390 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 7397 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 7405 */ 'i', 'n', 's', 'v', 9, 0,
  /* 7411 */ 'f', 'l', 'o', 'g', '2', '.', 'w', 9, 0,
  /* 7420 */ 'f', 'e', 'x', 'p', '2', '.', 'w', 9, 0,
  /* 7429 */ 'a', 'd', 'd', '_', 'a', '.', 'w', 9, 0,
  /* 7438 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'w', 9, 0,
  /* 7448 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'w', 9, 0,
  /* 7458 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'w', 9, 0,
  /* 7468 */ 's', 'r', 'a', '.', 'w', 9, 0,
  /* 7475 */ 'f', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7483 */ 'f', 'm', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7492 */ 'n', 'l', 'o', 'c', '.', 'w', 9, 0,
  /* 7500 */ 'n', 'l', 'z', 'c', '.', 'w', 9, 0,
  /* 7508 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 7517 */ 'f', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7525 */ 'f', 'm', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7534 */ 's', 'l', 'd', '.', 'w', 9, 0,
  /* 7541 */ 'p', 'c', 'k', 'o', 'd', '.', 'w', 9, 0,
  /* 7550 */ 'i', 'l', 'v', 'o', 'd', '.', 'w', 9, 0,
  /* 7559 */ 'f', 'c', 'l', 'e', '.', 'w', 9, 0,
  /* 7567 */ 'f', 's', 'l', 'e', '.', 'w', 9, 0,
  /* 7575 */ 'f', 'c', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7584 */ 'f', 's', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7593 */ 'f', 'c', 'n', 'e', '.', 'w', 9, 0,
  /* 7601 */ 'f', 's', 'n', 'e', '.', 'w', 9, 0,
  /* 7609 */ 'f', 'c', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 7618 */ 'f', 's', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 7627 */ 'i', 'n', 's', 'v', 'e', '.', 'w', 9, 0,
  /* 7636 */ 'f', 'c', 'a', 'f', '.', 'w', 9, 0,
  /* 7644 */ 'f', 's', 'a', 'f', '.', 'w', 9, 0,
  /* 7652 */ 'v', 's', 'h', 'f', '.', 'w', 9, 0,
  /* 7660 */ 'b', 'n', 'e', 'g', '.', 'w', 9, 0,
  /* 7668 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7684 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7697 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7715 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7731 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 7740 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 7749 */ 's', 'r', 'a', 'i', '.', 'w', 9, 0,
  /* 7757 */ 's', 'l', 'd', 'i', '.', 'w', 9, 0,
  /* 7765 */ 'b', 'n', 'e', 'g', 'i', '.', 'w', 9, 0,
  /* 7774 */ 's', 'l', 'l', 'i', '.', 'w', 9, 0,
  /* 7782 */ 's', 'r', 'l', 'i', '.', 'w', 9, 0,
  /* 7790 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'w', 9, 0,
  /* 7800 */ 'c', 'e', 'q', 'i', '.', 'w', 9, 0,
  /* 7808 */ 's', 'r', 'a', 'r', 'i', '.', 'w', 9, 0,
  /* 7817 */ 'b', 'c', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 7826 */ 's', 'r', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 7835 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'w', 9, 0,
  /* 7845 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'w', 9, 0,
  /* 7855 */ 'b', 's', 'e', 't', 'i', '.', 'w', 9, 0,
  /* 7864 */ 's', 'u', 'b', 'v', 'i', '.', 'w', 9, 0,
  /* 7873 */ 'a', 'd', 'd', 'v', 'i', '.', 'w', 9, 0,
  /* 7882 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 7895 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 7908 */ 'f', 'i', 'l', 'l', '.', 'w', 9, 0,
  /* 7916 */ 's', 'l', 'l', '.', 'w', 9, 0,
  /* 7923 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'w', 9, 0,
  /* 7933 */ 'f', 'f', 'q', 'l', '.', 'w', 9, 0,
  /* 7941 */ 's', 'r', 'l', '.', 'w', 9, 0,
  /* 7948 */ 'b', 'i', 'n', 's', 'l', '.', 'w', 9, 0,
  /* 7957 */ 'f', 'm', 'u', 'l', '.', 'w', 9, 0,
  /* 7965 */ 'i', 'l', 'v', 'l', '.', 'w', 9, 0,
  /* 7973 */ 'f', 'm', 'i', 'n', '.', 'w', 9, 0,
  /* 7981 */ 'f', 'c', 'u', 'n', '.', 'w', 9, 0,
  /* 7989 */ 'f', 's', 'u', 'n', '.', 'w', 9, 0,
  /* 7997 */ 'f', 'e', 'x', 'd', 'o', '.', 'w', 9, 0,
  /* 8006 */ 'f', 'r', 'c', 'p', '.', 'w', 9, 0,
  /* 8014 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'w', 9, 0,
  /* 8024 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'w', 9, 0,
  /* 8034 */ 'm', 'u', 'l', '_', 'q', '.', 'w', 9, 0,
  /* 8043 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8054 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8065 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8075 */ 'f', 'c', 'e', 'q', '.', 'w', 9, 0,
  /* 8083 */ 'f', 's', 'e', 'q', '.', 'w', 9, 0,
  /* 8091 */ 'f', 'c', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8100 */ 'f', 's', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8109 */ 'f', 't', 'q', '.', 'w', 9, 0,
  /* 8116 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 8126 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8137 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8148 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 8158 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8169 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8180 */ 's', 'r', 'a', 'r', '.', 'w', 9, 0,
  /* 8188 */ 'b', 'c', 'l', 'r', '.', 'w', 9, 0,
  /* 8196 */ 's', 'r', 'l', 'r', '.', 'w', 9, 0,
  /* 8204 */ 'f', 'c', 'o', 'r', '.', 'w', 9, 0,
  /* 8212 */ 'f', 's', 'o', 'r', '.', 'w', 9, 0,
  /* 8220 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'w', 9, 0,
  /* 8230 */ 'f', 'f', 'q', 'r', '.', 'w', 9, 0,
  /* 8238 */ 'b', 'i', 'n', 's', 'r', '.', 'w', 9, 0,
  /* 8247 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 8255 */ 'i', 'l', 'v', 'r', '.', 'w', 9, 0,
  /* 8263 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 8272 */ 'a', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8282 */ 'h', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8292 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8303 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'w', 9, 0,
  /* 8315 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8325 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8336 */ 'm', 'o', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8345 */ 'c', 'l', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8354 */ 'a', 'v', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8363 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8373 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8383 */ 'c', 'l', 't', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8393 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8403 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 8413 */ 'm', 'i', 'n', '_', 's', '.', 'w', 9, 0,
  /* 8422 */ 'd', 'o', 't', 'p', '_', 's', '.', 'w', 9, 0,
  /* 8432 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8442 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8452 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8462 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8472 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'w', 9, 0,
  /* 8482 */ 's', 'u', 'b', 's', '_', 's', '.', 'w', 9, 0,
  /* 8492 */ 'a', 'd', 'd', 's', '_', 's', '.', 'w', 9, 0,
  /* 8502 */ 's', 'a', 't', '_', 's', '.', 'w', 9, 0,
  /* 8511 */ 'c', 'l', 't', '_', 's', '.', 'w', 9, 0,
  /* 8520 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8531 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8542 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'w', 9, 0,
  /* 8554 */ 'd', 'i', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8563 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8574 */ 'm', 'a', 'x', '_', 's', '.', 'w', 9, 0,
  /* 8583 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'w', 9, 0,
  /* 8593 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8604 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8615 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8627 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'w', 9, 0,
  /* 8637 */ 's', 'p', 'l', 'a', 't', '.', 'w', 9, 0,
  /* 8646 */ 'b', 's', 'e', 't', '.', 'w', 9, 0,
  /* 8654 */ 'f', 'c', 'l', 't', '.', 'w', 9, 0,
  /* 8662 */ 'f', 's', 'l', 't', '.', 'w', 9, 0,
  /* 8670 */ 'f', 'c', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 8679 */ 'f', 's', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 8688 */ 'p', 'c', 'n', 't', '.', 'w', 9, 0,
  /* 8696 */ 'f', 'r', 'i', 'n', 't', '.', 'w', 9, 0,
  /* 8705 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'w', 9, 0,
  /* 8715 */ 'f', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 8724 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 8734 */ 's', 't', '.', 'w', 9, 0,
  /* 8740 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 8750 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 8760 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 8771 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'w', 9, 0,
  /* 8783 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 8793 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 8804 */ 'm', 'o', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 8813 */ 'c', 'l', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 8822 */ 'a', 'v', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 8831 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8841 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8851 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8861 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8871 */ 'm', 'i', 'n', '_', 'u', '.', 'w', 9, 0,
  /* 8880 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'w', 9, 0,
  /* 8890 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'w', 9, 0,
  /* 8900 */ 's', 'u', 'b', 's', '_', 'u', '.', 'w', 9, 0,
  /* 8910 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'w', 9, 0,
  /* 8920 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'w', 9, 0,
  /* 8932 */ 's', 'a', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8941 */ 'c', 'l', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8950 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8961 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8972 */ 'd', 'i', 'v', '_', 'u', '.', 'w', 9, 0,
  /* 8981 */ 'm', 'a', 'x', '_', 'u', '.', 'w', 9, 0,
  /* 8990 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'w', 9, 0,
  /* 9000 */ 'm', 's', 'u', 'b', 'v', '.', 'w', 9, 0,
  /* 9009 */ 'm', 'a', 'd', 'd', 'v', '.', 'w', 9, 0,
  /* 9018 */ 'p', 'c', 'k', 'e', 'v', '.', 'w', 9, 0,
  /* 9027 */ 'i', 'l', 'v', 'e', 'v', '.', 'w', 9, 0,
  /* 9036 */ 'f', 'd', 'i', 'v', '.', 'w', 9, 0,
  /* 9044 */ 'm', 'u', 'l', 'v', '.', 'w', 9, 0,
  /* 9052 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 9061 */ 'f', 'm', 'a', 'x', '.', 'w', 9, 0,
  /* 9069 */ 'b', 'z', '.', 'w', 9, 0,
  /* 9075 */ 'b', 'n', 'z', '.', 'w', 9, 0,
  /* 9082 */ 'u', 'l', 'w', 9, 0,
  /* 9087 */ 's', 'w', 9, 0,
  /* 9091 */ 'l', 'h', 'x', 9, 0,
  /* 9096 */ 'j', 'a', 'l', 'x', 9, 0,
  /* 9102 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 9108 */ 'l', 'w', 'x', 9, 0,
  /* 9113 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 9119 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 9125 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 9131 */ 's', 'e', 'l', 'n', 'e', 'z', 9, 0,
  /* 9139 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 9146 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 9152 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 9158 */ 's', 'e', 'l', 'e', 'q', 'z', 9, 0,
  /* 9166 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 9173 */ 'b', 'g', 't', 'z', 9, 0,
  /* 9179 */ 'b', 'l', 't', 'z', 9, 0,
  /* 9185 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 9191 */ 's', 'e', 'b', 9, 32, 0,
  /* 9197 */ 'j', 'r', 'c', 9, 32, 0,
  /* 9203 */ 's', 'e', 'h', 9, 32, 0,
  /* 9209 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9223 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9236 */ 'a', 'd', 'd', 'i', 'u', 9, '$', 's', 'p', ',', 32, 0,
  /* 9248 */ 'c', 'i', 'n', 's', '3', '2', 32, 0,
  /* 9256 */ 'e', 'x', 't', 's', '3', '2', 32, 0,
  /* 9264 */ 's', 'y', 'n', 'c', 32, 0,
  /* 9270 */ 9, '.', 'w', 'o', 'r', 'd', 32, 0,
  /* 9278 */ 'd', 'i', 'n', 's', 'm', 32, 0,
  /* 9285 */ 'd', 'e', 'x', 't', 'm', 32, 0,
  /* 9292 */ 'c', 'i', 'n', 's', 32, 0,
  /* 9298 */ 'd', 'i', 'n', 's', 32, 0,
  /* 9304 */ 'e', 'x', 't', 's', 32, 0,
  /* 9310 */ 'd', 'e', 'x', 't', 32, 0,
  /* 9316 */ 'd', 'i', 'n', 's', 'u', 32, 0,
  /* 9323 */ 'd', 'e', 'x', 't', 'u', 32, 0,
  /* 9330 */ 'b', 'c', '1', 'n', 'e', 'z', 32, 0,
  /* 9338 */ 'b', 'c', '2', 'n', 'e', 'z', 32, 0,
  /* 9346 */ 'b', 'c', '1', 'e', 'q', 'z', 32, 0,
  /* 9354 */ 'b', 'c', '2', 'e', 'q', 'z', 32, 0,
  /* 9362 */ 'c', '.', 0,
  /* 9365 */ 'b', 'r', 'e', 'a', 'k', 32, '0', 0,
  /* 9373 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 9386 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 9393 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 9403 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 9418 */ 'j', 'r', 'c', 9, 32, '$', 'r', 'a', 0,
  /* 9427 */ 'j', 'r', 9, 32, '$', 'r', 'a', 0,
  /* 9435 */ 'e', 'h', 'b', 0,
  /* 9439 */ 'e', 'r', 'e', 't', 'n', 'c', 0,
  /* 9446 */ 'p', 'a', 'u', 's', 'e', 0,
  /* 9452 */ 't', 'l', 'b', 'w', 'i', 0,
  /* 9458 */ 'f', 'o', 'o', 0,
  /* 9462 */ 't', 'l', 'b', 'p', 0,
  /* 9467 */ 's', 's', 'n', 'o', 'p', 0,
  /* 9473 */ 't', 'l', 'b', 'r', 0,
  /* 9478 */ 't', 'l', 'b', 'w', 'r', 0,
  /* 9484 */ 'd', 'e', 'r', 'e', 't', 0,
  /* 9490 */ 'w', 'a', 'i', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 14) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, Break16, CONSTPOOL_EN...
    return;
    break;
  case 1:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDIUPC, ADDIUPC_MM, ADDIUPC_MMR6...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADDIUS5_MM, CTC1, CTC1_MM, DAHI, DAHI_MM64R6, DATI, DATI_MM64R6, DMTC0...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 3:
    // AND16_MM, LSA_MMR6, MTHC1_D32, MTHC1_D64, MTHC1_MM, OR16_MM, XOR16_MM
    printOperand(MI, 2, O); 
    O << ", "; 
    break;
  case 4:
    // BREAK16_MM, SDBBP16_MM
    printUnsignedImm8(MI, 0, O); 
    return;
    break;
  case 5:
    // CACHE, CACHE_MM, CACHE_MMR6, CACHE_R6, PREF, PREF_MM, PREF_MMR6, PREF_...
    printUnsignedImm(MI, 2, O); 
    O << ", "; 
    printMemOperand(MI, 0, O); 
    return;
    break;
  case 6:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64, FCMP_S32, FCMP_S32_MM
    printFCCOperand(MI, 2, O); 
    break;
  case 7:
    // LWM16_MM, LWM32_MM, LWM_MM, MOVEP_MM, SWM16_MM, SWM32_MM, SWM_MM
    printRegisterList(MI, 0, O); 
    O << ", "; 
    break;
  case 8:
    // LWP_MM, SWP_MM
    printRegisterPair(MI, 0, O); 
    O << ", "; 
    printMemOperand(MI, 2, O); 
    return;
    break;
  case 9:
    // SYNCI
    printMemOperand(MI, 0, O); 
    return;
    break;
  case 10:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O); 
    break;
  }


  // Fragment 1 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 18) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDIUPC, ADDIUPC_MM, ADDIUPC_MMR6...
    O << ", "; 
    break;
  case 1:
    // ADDIUS5_MM, DAHI, DAHI_MM64R6, DATI, DATI_MM64R6, MOVEP_MM, MultRxRyRz...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // ADDIUSP_MM, AddiuSpImmX16, B16_MM, BAL, BALC, BALC_MMR6, BC, BC_MMR6, ...
    return;
    break;
  case 3:
    // AND16_MM, LSA_MMR6, OR16_MM, XOR16_MM
    printOperand(MI, 1, O); 
    break;
  case 4:
    // AddiuRxPcImmX16
    O << ", $pc, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 5:
    // AddiuSpImm16, Bimm16
    O << " # 16 bit inst"; 
    return;
    break;
  case 6:
    // Bteqz16, Btnez16
    O << "  # 16 bit inst"; 
    return;
    break;
  case 7:
    // CTC1, CTC1_MM, DMTC0, DMTC1, DMTC2, MTC0, MTC1, MTC1_MM, MTC2, MTHC1_D...
    printOperand(MI, 0, O); 
    break;
  case 8:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64
    O << ".d\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // FCMP_S32, FCMP_S32_MM
    O << ".s\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W, INSVE_B, INSVE_D, INSVE_H, INS...
    O << '['; 
    break;
  case 11:
    // Jal16
    O << "\n\tnop"; 
    return;
    break;
  case 12:
    // JalB16
    O << "\t# branch\n\tnop"; 
    return;
    break;
  case 13:
    // LWM16_MM, LWM32_MM, LWM_MM, SWM16_MM, SWM32_MM, SWM_MM
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 14:
    // LwConstant32
    O << ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t"; 
    printOperand(MI, 1, O); 
    O << "\n2:"; 
    return;
    break;
  case 15:
    // SC, SCD, SCD_R6, SC_MM, SC_R6
    printMemOperand(MI, 2, O); 
    return;
    break;
  case 16:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 23) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDIUPC, ADDIUPC_MM, ADDIUPC_MMR6...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADDIUS5_MM, AND16_MM, CTC1, CTC1_MM, DAHI, DAHI_MM64R6, DATI, DATI_MM6...
    return;
    break;
  case 2:
    // AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, BINSLI_B, BINSLI_D, BINS...
    printOperand(MI, 2, O); 
    break;
  case 3:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64, LEA_ADDiu_MM
    printMemOperandEA(MI, 1, O); 
    return;
    break;
  case 4:
    // BBIT0, BBIT032, BBIT1, BBIT132, DMFC2_OCTEON, DMTC2_OCTEON, LUi, LUi64...
    printUnsignedImm(MI, 1, O); 
    break;
  case 5:
    // DMTC0, DMTC2, LSA_MMR6, MOVEP_MM, MTC0, MTC2
    O << ", "; 
    break;
  case 6:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W
    printUnsignedImm8(MI, 3, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // INSVE_B, INSVE_D, INSVE_H, INSVE_W
    printUnsignedImm(MI, 2, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printUnsignedImm(MI, 4, O); 
    O << ']'; 
    return;
    break;
  case 8:
    // LB, LB64, LBU16_MM, LB_MM, LBu, LBu64, LBu_MM, LD, LDC1, LDC164, LDC1_...
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t"; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 10:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O); 
    break;
  case 11:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t"; 
    printOperand(MI, 0, O); 
    O << ", $t8"; 
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 27) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADDIUPC, ADDIUPC_MM, ADDIUPC_MMR6, ADD...
    return;
    break;
  case 1:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W,...
    O << ", "; 
    break;
  case 2:
    // AddiuRxRxImm16, LwRxPcTcp16
    O << "\t# 16 bit inst"; 
    return;
    break;
  case 3:
    // BeqzRxImm16, BnezRxImm16
    O << "  # 16 bit inst"; 
    return;
    break;
  case 4:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_D, COPY_U_H, ...
    O << '['; 
    break;
  case 7:
    // CmpiRxImm16, LiRxImm16, SltiRxImm16, SltiuRxImm16
    O << " \t# 16 bit inst"; 
    return;
    break;
  case 8:
    // DMTC0, DMTC2, MTC0, MTC2
    printUnsignedImm(MI, 2, O); 
    return;
    break;
  case 9:
    // DSLL64_32
    O << ", 32"; 
    return;
    break;
  case 10:
    // GotPrologue16
    O << "\n\taddiu\t"; 
    printOperand(MI, 1, O); 
    O << ", $pc, "; 
    printOperand(MI, 3, O); 
    O << "\n "; 
    return;
    break;
  case 11:
    // LBUX, LDXC1, LDXC164, LHX, LUXC1, LUXC164, LUXC1_MM, LWX, LWXC1, LWXC1...
    O << '('; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // LSA_MMR6
    printOperand(MI, 0, O); 
    O << ", "; 
    printUnsignedImm(MI, 3, O); 
    return;
    break;
  case 13:
    // LwRxSpImmX16, SwRxSpImmX16
    O << " ( "; 
    printOperand(MI, 1, O); 
    O << " ); "; 
    return;
    break;
  case 14:
    // MOVEP_MM
    printOperand(MI, 3, O); 
    return;
    break;
  case 15:
    // SLL64_32, SLL64_64
    O << ", 0"; 
    return;
    break;
  case 16:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 17:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 32) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W,...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDVI_B, ADDVI_D, ADDVI_H, ADDVI_W, ANDI_B, BCLRI_B, BCLRI_D, BCLRI_H,...
    printUnsignedImm8(MI, 2, O); 
    break;
  case 2:
    // ANDi, ANDi64, ANDi_MM, APPEND, BALIGN, CINS, CINS32, DEXT, DEXTM, DEXT...
    printUnsignedImm(MI, 2, O); 
    break;
  case 3:
    // BINSLI_B, BINSLI_D, BINSLI_H, BINSLI_W, BINSRI_B, BINSRI_D, BINSRI_H, ...
    printUnsignedImm8(MI, 3, O); 
    break;
  case 4:
    // BINSL_B, BINSL_D, BINSL_H, BINSL_W, BINSR_B, BINSR_D, BINSR_H, BINSR_W...
    printOperand(MI, 3, O); 
    break;
  }


  // Fragment 5 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 35) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W,...
    return;
    break;
  case 1:
    // ALIGN, ALIGN_MMR6, CINS, CINS32, DALIGN, DALIGN_MM64R6, DEXT, DEXTM, D...
    O << ", "; 
    break;
  case 2:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_D, COPY_U_H, ...
    O << ']'; 
    return;
    break;
  }


  // Fragment 6 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 37) & 1) {
    // DEXT, DEXTM, DEXTM_MM64R6, DEXTU, DEXTU_MM64R6, DEXT_MM64R6, DINS, DIN...
    printOperand(MI, 3, O); 
    return;
  } else {
    // ALIGN, ALIGN_MMR6, CINS, CINS32, DALIGN, DALIGN_MM64R6, DLSA, DLSA_R6,...
    printUnsignedImm(MI, 3, O); 
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 418 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'w', '1', '0', 0,
  /* 8 */ 'f', '2', '0', 0,
  /* 12 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 25 */ 'w', '2', '0', 0,
  /* 29 */ 'f', '3', '0', 0,
  /* 33 */ 'w', '3', '0', 0,
  /* 37 */ 'a', 'c', '0', 0,
  /* 41 */ 'f', 'c', 'c', '0', 0,
  /* 46 */ 'f', '0', 0,
  /* 49 */ 'm', 'p', 'l', '0', 0,
  /* 54 */ 'p', '0', 0,
  /* 57 */ 'w', '0', 0,
  /* 60 */ 'f', '1', '1', 0,
  /* 64 */ 'w', '1', '1', 0,
  /* 68 */ 'f', '2', '1', 0,
  /* 72 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 85 */ 'w', '2', '1', 0,
  /* 89 */ 'f', '3', '1', 0,
  /* 93 */ 'w', '3', '1', 0,
  /* 97 */ 'a', 'c', '1', 0,
  /* 101 */ 'f', 'c', 'c', '1', 0,
  /* 106 */ 'f', '1', 0,
  /* 109 */ 'm', 'p', 'l', '1', 0,
  /* 114 */ 'p', '1', 0,
  /* 117 */ 'w', '1', 0,
  /* 120 */ 'f', '1', '2', 0,
  /* 124 */ 'w', '1', '2', 0,
  /* 128 */ 'f', '2', '2', 0,
  /* 132 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 145 */ 'w', '2', '2', 0,
  /* 149 */ 'a', 'c', '2', 0,
  /* 153 */ 'f', 'c', 'c', '2', 0,
  /* 158 */ 'f', '2', 0,
  /* 161 */ 'm', 'p', 'l', '2', 0,
  /* 166 */ 'p', '2', 0,
  /* 169 */ 'w', '2', 0,
  /* 172 */ 'f', '1', '3', 0,
  /* 176 */ 'w', '1', '3', 0,
  /* 180 */ 'f', '2', '3', 0,
  /* 184 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 197 */ 'w', '2', '3', 0,
  /* 201 */ 'a', 'c', '3', 0,
  /* 205 */ 'f', 'c', 'c', '3', 0,
  /* 210 */ 'f', '3', 0,
  /* 213 */ 'w', '3', 0,
  /* 216 */ 'f', '1', '4', 0,
  /* 220 */ 'w', '1', '4', 0,
  /* 224 */ 'f', '2', '4', 0,
  /* 228 */ 'w', '2', '4', 0,
  /* 232 */ 'f', 'c', 'c', '4', 0,
  /* 237 */ 'f', '4', 0,
  /* 240 */ 'w', '4', 0,
  /* 243 */ 'f', '1', '5', 0,
  /* 247 */ 'w', '1', '5', 0,
  /* 251 */ 'f', '2', '5', 0,
  /* 255 */ 'w', '2', '5', 0,
  /* 259 */ 'f', 'c', 'c', '5', 0,
  /* 264 */ 'f', '5', 0,
  /* 267 */ 'w', '5', 0,
  /* 270 */ 'f', '1', '6', 0,
  /* 274 */ 'w', '1', '6', 0,
  /* 278 */ 'f', '2', '6', 0,
  /* 282 */ 'w', '2', '6', 0,
  /* 286 */ 'f', 'c', 'c', '6', 0,
  /* 291 */ 'f', '6', 0,
  /* 294 */ 'w', '6', 0,
  /* 297 */ 'f', '1', '7', 0,
  /* 301 */ 'w', '1', '7', 0,
  /* 305 */ 'f', '2', '7', 0,
  /* 309 */ 'w', '2', '7', 0,
  /* 313 */ 'f', 'c', 'c', '7', 0,
  /* 318 */ 'f', '7', 0,
  /* 321 */ 'w', '7', 0,
  /* 324 */ 'f', '1', '8', 0,
  /* 328 */ 'w', '1', '8', 0,
  /* 332 */ 'f', '2', '8', 0,
  /* 336 */ 'w', '2', '8', 0,
  /* 340 */ 'f', '8', 0,
  /* 343 */ 'w', '8', 0,
  /* 346 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 362 */ 'f', '1', '9', 0,
  /* 366 */ 'w', '1', '9', 0,
  /* 370 */ 'f', '2', '9', 0,
  /* 374 */ 'w', '2', '9', 0,
  /* 378 */ 'f', '9', 0,
  /* 381 */ 'w', '9', 0,
  /* 384 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 391 */ 'r', 'a', 0,
  /* 394 */ 'h', 'w', 'r', '_', 'c', 'c', 0,
  /* 401 */ 'p', 'c', 0,
  /* 404 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 413 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 424 */ 'h', 'i', 0,
  /* 427 */ 'h', 'w', 'r', '_', 'c', 'p', 'u', 'n', 'u', 'm', 0,
  /* 438 */ 'l', 'o', 0,
  /* 441 */ 'z', 'e', 'r', 'o', 0,
  /* 446 */ 'h', 'w', 'r', '_', 's', 'y', 'n', 'c', 'i', '_', 's', 't', 'e', 'p', 0,
  /* 461 */ 'f', 'p', 0,
  /* 464 */ 'g', 'p', 0,
  /* 467 */ 's', 'p', 0,
  /* 470 */ 'h', 'w', 'r', '_', 'c', 'c', 'r', 'e', 's', 0,
  /* 480 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 487 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 497 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    62, 404, 497, 384, 413, 480, 487, 461, 464, 122, 62, 2, 272, 218, 
    245, 174, 299, 401, 391, 467, 441, 218, 245, 272, 299, 37, 97, 149, 
    201, 62, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 
    122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 122, 174, 218, 245, 
    272, 299, 326, 360, 1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 
    9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 1, 61, 
    121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 225, 252, 
    279, 306, 333, 371, 30, 90, 1, 61, 121, 173, 217, 244, 271, 298, 
    325, 359, 9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 
    46, 158, 237, 291, 340, 0, 120, 216, 270, 324, 8, 128, 224, 278, 
    332, 29, 12, 72, 132, 184, 46, 106, 158, 210, 237, 264, 291, 318, 
    340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 
    128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 41, 101, 153, 205, 
    232, 259, 286, 313, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 461, 46, 106, 158, 210, 237, 
    264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 
    362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 464, 
    37, 97, 149, 201, 427, 446, 394, 470, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 279, 306, 37, 97, 149, 201, 
    49, 109, 161, 54, 114, 166, 391, 271, 298, 325, 359, 9, 69, 129, 
    181, 467, 326, 360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
    57, 117, 169, 213, 240, 267, 294, 321, 343, 381, 4, 64, 124, 176, 
    220, 247, 274, 301, 328, 366, 25, 85, 145, 197, 228, 255, 282, 309, 
    336, 374, 33, 93, 441, 218, 245, 272, 299, 37, 46, 106, 158, 210, 
    237, 264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 
    324, 362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 
    346, 424, 279, 306, 438, 271, 298, 325, 359, 9, 69, 129, 181, 326, 
    360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADDu GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::BC1F:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1F FCC0, brtarget:$offset)
      AsmString = "bc1f $\x02";
      break;
    }
    return false;
  case Mips::BC1FL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1FL FCC0, brtarget:$offset)
      AsmString = "bc1fl $\x02";
      break;
    }
    return false;
  case Mips::BC1T:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1T FCC0, brtarget:$offset)
      AsmString = "bc1t $\x02";
      break;
    }
    return false;
  case Mips::BC1TL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1TL FCC0, brtarget:$offset)
      AsmString = "bc1tl $\x02";
      break;
    }
    return false;
  case Mips::BREAK:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK 0, 0)
      AsmString = "break";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK uimm10:$imm, 0)
      AsmString = "break $\x01";
      break;
    }
    return false;
  case Mips::DADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADDu GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::DI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DSUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUB GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dneg $\x01, $\x03";
      break;
    }
    return false;
  case Mips::DSUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUBu GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dnegu $\x01, $\x03";
      break;
    }
    return false;
  case Mips::EI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MM ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MMR6 ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::JALR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR ZERO, GPR32Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALR64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO_64 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR64 ZERO_64, GPR64Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALR_HB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR_HB RA, GPR32Opnd:$rs)
      AsmString = "jalr.hb $\x02";
      break;
    }
    return false;
  case Mips::MOVE16_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO) {
      // (MOVE16_MM ZERO, ZERO)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::OR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (OR GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::OR64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (OR64 GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::SDBBP:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_R6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_R6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SLL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MM ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MMR6 ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "negu $\x01, $\x03";
      break;
    }
    return false;
  case Mips::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYSCALL:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::TEQ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::WAIT_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT_MM 0)
      AsmString = "wait";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void MipsInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  llvm_unreachable("Unknown PrintMethod kind");
}

#endif // PRINT_ALIAS_INSTR
